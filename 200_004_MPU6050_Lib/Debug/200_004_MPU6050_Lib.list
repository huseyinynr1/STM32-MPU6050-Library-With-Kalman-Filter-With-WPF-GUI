
200_004_MPU6050_Lib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054a4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08005630  08005630  00015630  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056e8  080056e8  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080056e8  080056e8  000156e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056f0  080056f0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056f0  080056f0  000156f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056f4  080056f4  000156f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080056f8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          000002c4  20000080  20000080  00020080  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000344  20000344  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00007dfb  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001505  00000000  00000000  00027eee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000790  00000000  00000000  000293f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000005ce  00000000  00000000  00029b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001ffd8  00000000  00000000  0002a156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00009b03  00000000  00000000  0004a12e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c2749  00000000  00000000  00053c31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000025b4  00000000  00000000  0011637c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  00118930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000080 	.word	0x20000080
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005614 	.word	0x08005614

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000084 	.word	0x20000084
 80001c4:	08005614 	.word	0x08005614

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b970 	b.w	8000e38 <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9e08      	ldr	r6, [sp, #32]
 8000b76:	460d      	mov	r5, r1
 8000b78:	4604      	mov	r4, r0
 8000b7a:	460f      	mov	r7, r1
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d14a      	bne.n	8000c16 <__udivmoddi4+0xa6>
 8000b80:	428a      	cmp	r2, r1
 8000b82:	4694      	mov	ip, r2
 8000b84:	d965      	bls.n	8000c52 <__udivmoddi4+0xe2>
 8000b86:	fab2 f382 	clz	r3, r2
 8000b8a:	b143      	cbz	r3, 8000b9e <__udivmoddi4+0x2e>
 8000b8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b90:	f1c3 0220 	rsb	r2, r3, #32
 8000b94:	409f      	lsls	r7, r3
 8000b96:	fa20 f202 	lsr.w	r2, r0, r2
 8000b9a:	4317      	orrs	r7, r2
 8000b9c:	409c      	lsls	r4, r3
 8000b9e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ba2:	fa1f f58c 	uxth.w	r5, ip
 8000ba6:	fbb7 f1fe 	udiv	r1, r7, lr
 8000baa:	0c22      	lsrs	r2, r4, #16
 8000bac:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bb0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bb4:	fb01 f005 	mul.w	r0, r1, r5
 8000bb8:	4290      	cmp	r0, r2
 8000bba:	d90a      	bls.n	8000bd2 <__udivmoddi4+0x62>
 8000bbc:	eb1c 0202 	adds.w	r2, ip, r2
 8000bc0:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bc4:	f080 811c 	bcs.w	8000e00 <__udivmoddi4+0x290>
 8000bc8:	4290      	cmp	r0, r2
 8000bca:	f240 8119 	bls.w	8000e00 <__udivmoddi4+0x290>
 8000bce:	3902      	subs	r1, #2
 8000bd0:	4462      	add	r2, ip
 8000bd2:	1a12      	subs	r2, r2, r0
 8000bd4:	b2a4      	uxth	r4, r4
 8000bd6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bda:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bde:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000be2:	fb00 f505 	mul.w	r5, r0, r5
 8000be6:	42a5      	cmp	r5, r4
 8000be8:	d90a      	bls.n	8000c00 <__udivmoddi4+0x90>
 8000bea:	eb1c 0404 	adds.w	r4, ip, r4
 8000bee:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bf2:	f080 8107 	bcs.w	8000e04 <__udivmoddi4+0x294>
 8000bf6:	42a5      	cmp	r5, r4
 8000bf8:	f240 8104 	bls.w	8000e04 <__udivmoddi4+0x294>
 8000bfc:	4464      	add	r4, ip
 8000bfe:	3802      	subs	r0, #2
 8000c00:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c04:	1b64      	subs	r4, r4, r5
 8000c06:	2100      	movs	r1, #0
 8000c08:	b11e      	cbz	r6, 8000c12 <__udivmoddi4+0xa2>
 8000c0a:	40dc      	lsrs	r4, r3
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	e9c6 4300 	strd	r4, r3, [r6]
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	428b      	cmp	r3, r1
 8000c18:	d908      	bls.n	8000c2c <__udivmoddi4+0xbc>
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	f000 80ed 	beq.w	8000dfa <__udivmoddi4+0x28a>
 8000c20:	2100      	movs	r1, #0
 8000c22:	e9c6 0500 	strd	r0, r5, [r6]
 8000c26:	4608      	mov	r0, r1
 8000c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2c:	fab3 f183 	clz	r1, r3
 8000c30:	2900      	cmp	r1, #0
 8000c32:	d149      	bne.n	8000cc8 <__udivmoddi4+0x158>
 8000c34:	42ab      	cmp	r3, r5
 8000c36:	d302      	bcc.n	8000c3e <__udivmoddi4+0xce>
 8000c38:	4282      	cmp	r2, r0
 8000c3a:	f200 80f8 	bhi.w	8000e2e <__udivmoddi4+0x2be>
 8000c3e:	1a84      	subs	r4, r0, r2
 8000c40:	eb65 0203 	sbc.w	r2, r5, r3
 8000c44:	2001      	movs	r0, #1
 8000c46:	4617      	mov	r7, r2
 8000c48:	2e00      	cmp	r6, #0
 8000c4a:	d0e2      	beq.n	8000c12 <__udivmoddi4+0xa2>
 8000c4c:	e9c6 4700 	strd	r4, r7, [r6]
 8000c50:	e7df      	b.n	8000c12 <__udivmoddi4+0xa2>
 8000c52:	b902      	cbnz	r2, 8000c56 <__udivmoddi4+0xe6>
 8000c54:	deff      	udf	#255	; 0xff
 8000c56:	fab2 f382 	clz	r3, r2
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	f040 8090 	bne.w	8000d80 <__udivmoddi4+0x210>
 8000c60:	1a8a      	subs	r2, r1, r2
 8000c62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c66:	fa1f fe8c 	uxth.w	lr, ip
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c70:	fb07 2015 	mls	r0, r7, r5, r2
 8000c74:	0c22      	lsrs	r2, r4, #16
 8000c76:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c7a:	fb0e f005 	mul.w	r0, lr, r5
 8000c7e:	4290      	cmp	r0, r2
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x124>
 8000c82:	eb1c 0202 	adds.w	r2, ip, r2
 8000c86:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c8a:	d202      	bcs.n	8000c92 <__udivmoddi4+0x122>
 8000c8c:	4290      	cmp	r0, r2
 8000c8e:	f200 80cb 	bhi.w	8000e28 <__udivmoddi4+0x2b8>
 8000c92:	4645      	mov	r5, r8
 8000c94:	1a12      	subs	r2, r2, r0
 8000c96:	b2a4      	uxth	r4, r4
 8000c98:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c9c:	fb07 2210 	mls	r2, r7, r0, r2
 8000ca0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ca4:	fb0e fe00 	mul.w	lr, lr, r0
 8000ca8:	45a6      	cmp	lr, r4
 8000caa:	d908      	bls.n	8000cbe <__udivmoddi4+0x14e>
 8000cac:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cb4:	d202      	bcs.n	8000cbc <__udivmoddi4+0x14c>
 8000cb6:	45a6      	cmp	lr, r4
 8000cb8:	f200 80bb 	bhi.w	8000e32 <__udivmoddi4+0x2c2>
 8000cbc:	4610      	mov	r0, r2
 8000cbe:	eba4 040e 	sub.w	r4, r4, lr
 8000cc2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cc6:	e79f      	b.n	8000c08 <__udivmoddi4+0x98>
 8000cc8:	f1c1 0720 	rsb	r7, r1, #32
 8000ccc:	408b      	lsls	r3, r1
 8000cce:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cd2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cd6:	fa05 f401 	lsl.w	r4, r5, r1
 8000cda:	fa20 f307 	lsr.w	r3, r0, r7
 8000cde:	40fd      	lsrs	r5, r7
 8000ce0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ce4:	4323      	orrs	r3, r4
 8000ce6:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cea:	fa1f fe8c 	uxth.w	lr, ip
 8000cee:	fb09 5518 	mls	r5, r9, r8, r5
 8000cf2:	0c1c      	lsrs	r4, r3, #16
 8000cf4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cf8:	fb08 f50e 	mul.w	r5, r8, lr
 8000cfc:	42a5      	cmp	r5, r4
 8000cfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000d02:	fa00 f001 	lsl.w	r0, r0, r1
 8000d06:	d90b      	bls.n	8000d20 <__udivmoddi4+0x1b0>
 8000d08:	eb1c 0404 	adds.w	r4, ip, r4
 8000d0c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d10:	f080 8088 	bcs.w	8000e24 <__udivmoddi4+0x2b4>
 8000d14:	42a5      	cmp	r5, r4
 8000d16:	f240 8085 	bls.w	8000e24 <__udivmoddi4+0x2b4>
 8000d1a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d1e:	4464      	add	r4, ip
 8000d20:	1b64      	subs	r4, r4, r5
 8000d22:	b29d      	uxth	r5, r3
 8000d24:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d28:	fb09 4413 	mls	r4, r9, r3, r4
 8000d2c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d30:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d34:	45a6      	cmp	lr, r4
 8000d36:	d908      	bls.n	8000d4a <__udivmoddi4+0x1da>
 8000d38:	eb1c 0404 	adds.w	r4, ip, r4
 8000d3c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d40:	d26c      	bcs.n	8000e1c <__udivmoddi4+0x2ac>
 8000d42:	45a6      	cmp	lr, r4
 8000d44:	d96a      	bls.n	8000e1c <__udivmoddi4+0x2ac>
 8000d46:	3b02      	subs	r3, #2
 8000d48:	4464      	add	r4, ip
 8000d4a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d4e:	fba3 9502 	umull	r9, r5, r3, r2
 8000d52:	eba4 040e 	sub.w	r4, r4, lr
 8000d56:	42ac      	cmp	r4, r5
 8000d58:	46c8      	mov	r8, r9
 8000d5a:	46ae      	mov	lr, r5
 8000d5c:	d356      	bcc.n	8000e0c <__udivmoddi4+0x29c>
 8000d5e:	d053      	beq.n	8000e08 <__udivmoddi4+0x298>
 8000d60:	b156      	cbz	r6, 8000d78 <__udivmoddi4+0x208>
 8000d62:	ebb0 0208 	subs.w	r2, r0, r8
 8000d66:	eb64 040e 	sbc.w	r4, r4, lr
 8000d6a:	fa04 f707 	lsl.w	r7, r4, r7
 8000d6e:	40ca      	lsrs	r2, r1
 8000d70:	40cc      	lsrs	r4, r1
 8000d72:	4317      	orrs	r7, r2
 8000d74:	e9c6 7400 	strd	r7, r4, [r6]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d80:	f1c3 0120 	rsb	r1, r3, #32
 8000d84:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d88:	fa20 f201 	lsr.w	r2, r0, r1
 8000d8c:	fa25 f101 	lsr.w	r1, r5, r1
 8000d90:	409d      	lsls	r5, r3
 8000d92:	432a      	orrs	r2, r5
 8000d94:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d98:	fa1f fe8c 	uxth.w	lr, ip
 8000d9c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da0:	fb07 1510 	mls	r5, r7, r0, r1
 8000da4:	0c11      	lsrs	r1, r2, #16
 8000da6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000daa:	fb00 f50e 	mul.w	r5, r0, lr
 8000dae:	428d      	cmp	r5, r1
 8000db0:	fa04 f403 	lsl.w	r4, r4, r3
 8000db4:	d908      	bls.n	8000dc8 <__udivmoddi4+0x258>
 8000db6:	eb1c 0101 	adds.w	r1, ip, r1
 8000dba:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dbe:	d22f      	bcs.n	8000e20 <__udivmoddi4+0x2b0>
 8000dc0:	428d      	cmp	r5, r1
 8000dc2:	d92d      	bls.n	8000e20 <__udivmoddi4+0x2b0>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	4461      	add	r1, ip
 8000dc8:	1b49      	subs	r1, r1, r5
 8000dca:	b292      	uxth	r2, r2
 8000dcc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000dd0:	fb07 1115 	mls	r1, r7, r5, r1
 8000dd4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dd8:	fb05 f10e 	mul.w	r1, r5, lr
 8000ddc:	4291      	cmp	r1, r2
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x282>
 8000de0:	eb1c 0202 	adds.w	r2, ip, r2
 8000de4:	f105 38ff 	add.w	r8, r5, #4294967295
 8000de8:	d216      	bcs.n	8000e18 <__udivmoddi4+0x2a8>
 8000dea:	4291      	cmp	r1, r2
 8000dec:	d914      	bls.n	8000e18 <__udivmoddi4+0x2a8>
 8000dee:	3d02      	subs	r5, #2
 8000df0:	4462      	add	r2, ip
 8000df2:	1a52      	subs	r2, r2, r1
 8000df4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000df8:	e738      	b.n	8000c6c <__udivmoddi4+0xfc>
 8000dfa:	4631      	mov	r1, r6
 8000dfc:	4630      	mov	r0, r6
 8000dfe:	e708      	b.n	8000c12 <__udivmoddi4+0xa2>
 8000e00:	4639      	mov	r1, r7
 8000e02:	e6e6      	b.n	8000bd2 <__udivmoddi4+0x62>
 8000e04:	4610      	mov	r0, r2
 8000e06:	e6fb      	b.n	8000c00 <__udivmoddi4+0x90>
 8000e08:	4548      	cmp	r0, r9
 8000e0a:	d2a9      	bcs.n	8000d60 <__udivmoddi4+0x1f0>
 8000e0c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e10:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e14:	3b01      	subs	r3, #1
 8000e16:	e7a3      	b.n	8000d60 <__udivmoddi4+0x1f0>
 8000e18:	4645      	mov	r5, r8
 8000e1a:	e7ea      	b.n	8000df2 <__udivmoddi4+0x282>
 8000e1c:	462b      	mov	r3, r5
 8000e1e:	e794      	b.n	8000d4a <__udivmoddi4+0x1da>
 8000e20:	4640      	mov	r0, r8
 8000e22:	e7d1      	b.n	8000dc8 <__udivmoddi4+0x258>
 8000e24:	46d0      	mov	r8, sl
 8000e26:	e77b      	b.n	8000d20 <__udivmoddi4+0x1b0>
 8000e28:	3d02      	subs	r5, #2
 8000e2a:	4462      	add	r2, ip
 8000e2c:	e732      	b.n	8000c94 <__udivmoddi4+0x124>
 8000e2e:	4608      	mov	r0, r1
 8000e30:	e70a      	b.n	8000c48 <__udivmoddi4+0xd8>
 8000e32:	4464      	add	r4, ip
 8000e34:	3802      	subs	r0, #2
 8000e36:	e742      	b.n	8000cbe <__udivmoddi4+0x14e>

08000e38 <__aeabi_idiv0>:
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop

08000e3c <FindDevice>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void FindDevice()
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
	for(address = 0; address <= 255; address++)
 8000e40:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <FindDevice+0x44>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	701a      	strb	r2, [r3, #0]
		{
			if(HAL_I2C_IsDeviceReady(&hi2c1, address, 1, 1000) == HAL_OK)
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <FindDevice+0x44>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	b299      	uxth	r1, r3
 8000e4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e50:	2201      	movs	r2, #1
 8000e52:	480c      	ldr	r0, [pc, #48]	; (8000e84 <FindDevice+0x48>)
 8000e54:	f002 f8de 	bl	8003014 <HAL_I2C_IsDeviceReady>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d106      	bne.n	8000e6c <FindDevice+0x30>
			{
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000e5e:	2201      	movs	r2, #1
 8000e60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e64:	4808      	ldr	r0, [pc, #32]	; (8000e88 <FindDevice+0x4c>)
 8000e66:	f001 fc39 	bl	80026dc <HAL_GPIO_WritePin>
				break;
 8000e6a:	e006      	b.n	8000e7a <FindDevice+0x3e>
	for(address = 0; address <= 255; address++)
 8000e6c:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <FindDevice+0x44>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	3301      	adds	r3, #1
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	4b02      	ldr	r3, [pc, #8]	; (8000e80 <FindDevice+0x44>)
 8000e76:	701a      	strb	r2, [r3, #0]
			if(HAL_I2C_IsDeviceReady(&hi2c1, address, 1, 1000) == HAL_OK)
 8000e78:	e7e5      	b.n	8000e46 <FindDevice+0xa>
			}
		}
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	200000f0 	.word	0x200000f0
 8000e84:	2000009c 	.word	0x2000009c
 8000e88:	40020c00 	.word	0x40020c00
 8000e8c:	00000000 	.word	0x00000000

08000e90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e96:	f001 f909 	bl	80020ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e9a:	f000 f8f5 	bl	8001088 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e9e:	f000 f98b 	bl	80011b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ea2:	f000 f95b 	bl	800115c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  FindDevice();
 8000ea6:	f7ff ffc9 	bl	8000e3c <FindDevice>
  MPU6050_Init(&hi2c1);
 8000eaa:	4859      	ldr	r0, [pc, #356]	; (8001010 <main+0x180>)
 8000eac:	f000 fa20 	bl	80012f0 <MPU6050_Init>
  Offset_Calibration_All(&hi2c1, &offset);
 8000eb0:	4958      	ldr	r1, [pc, #352]	; (8001014 <main+0x184>)
 8000eb2:	4857      	ldr	r0, [pc, #348]	; (8001010 <main+0x180>)
 8000eb4:	f000 fce6 	bl	8001884 <Offset_Calibration_All>
  Kalman_Init(&kalman_roll, 0, 0.0f, 0.001f, 0.003f, 0.03f, P_init);
 8000eb8:	4957      	ldr	r1, [pc, #348]	; (8001018 <main+0x188>)
 8000eba:	eddf 2a58 	vldr	s5, [pc, #352]	; 800101c <main+0x18c>
 8000ebe:	ed9f 2a58 	vldr	s4, [pc, #352]	; 8001020 <main+0x190>
 8000ec2:	eddf 1a58 	vldr	s3, [pc, #352]	; 8001024 <main+0x194>
 8000ec6:	ed9f 1a58 	vldr	s2, [pc, #352]	; 8001028 <main+0x198>
 8000eca:	ed9f 0b4f 	vldr	d0, [pc, #316]	; 8001008 <main+0x178>
 8000ece:	4857      	ldr	r0, [pc, #348]	; (800102c <main+0x19c>)
 8000ed0:	f000 fe76 	bl	8001bc0 <Kalman_Init>
  Kalman_Init(&kalman_pitch, 0, 0.0f, 0.001f, 0.003f, 0.03f, P_init);
 8000ed4:	4950      	ldr	r1, [pc, #320]	; (8001018 <main+0x188>)
 8000ed6:	eddf 2a51 	vldr	s5, [pc, #324]	; 800101c <main+0x18c>
 8000eda:	ed9f 2a51 	vldr	s4, [pc, #324]	; 8001020 <main+0x190>
 8000ede:	eddf 1a51 	vldr	s3, [pc, #324]	; 8001024 <main+0x194>
 8000ee2:	ed9f 1a51 	vldr	s2, [pc, #324]	; 8001028 <main+0x198>
 8000ee6:	ed9f 0b48 	vldr	d0, [pc, #288]	; 8001008 <main+0x178>
 8000eea:	4851      	ldr	r0, [pc, #324]	; (8001030 <main+0x1a0>)
 8000eec:	f000 fe68 	bl	8001bc0 <Kalman_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if( MPU6050_CONVERT_ACCELL(&hi2c1, &ax, &ay, &az) == HAL_OK )
 8000ef0:	4b50      	ldr	r3, [pc, #320]	; (8001034 <main+0x1a4>)
 8000ef2:	4a51      	ldr	r2, [pc, #324]	; (8001038 <main+0x1a8>)
 8000ef4:	4951      	ldr	r1, [pc, #324]	; (800103c <main+0x1ac>)
 8000ef6:	4846      	ldr	r0, [pc, #280]	; (8001010 <main+0x180>)
 8000ef8:	f000 fae4 	bl	80014c4 <MPU6050_CONVERT_ACCELL>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d105      	bne.n	8000f0e <main+0x7e>
	  {
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000f02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f06:	484e      	ldr	r0, [pc, #312]	; (8001040 <main+0x1b0>)
 8000f08:	f001 fc01 	bl	800270e <HAL_GPIO_TogglePin>
 8000f0c:	e004      	b.n	8000f18 <main+0x88>
	  }

	  else
	  {
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000f0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f12:	484b      	ldr	r0, [pc, #300]	; (8001040 <main+0x1b0>)
 8000f14:	f001 fbfb 	bl	800270e <HAL_GPIO_TogglePin>
	  }

	  HAL_Delay(10);
 8000f18:	200a      	movs	r0, #10
 8000f1a:	f001 f939 	bl	8002190 <HAL_Delay>

	  if(MPU6050_CONVERT_GYRO(&hi2c1, &gx, &gy, &gz) == HAL_OK )
 8000f1e:	4b49      	ldr	r3, [pc, #292]	; (8001044 <main+0x1b4>)
 8000f20:	4a49      	ldr	r2, [pc, #292]	; (8001048 <main+0x1b8>)
 8000f22:	494a      	ldr	r1, [pc, #296]	; (800104c <main+0x1bc>)
 8000f24:	483a      	ldr	r0, [pc, #232]	; (8001010 <main+0x180>)
 8000f26:	f000 fb47 	bl	80015b8 <MPU6050_CONVERT_GYRO>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d105      	bne.n	8000f3c <main+0xac>
	  {
	  	 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000f30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f34:	4842      	ldr	r0, [pc, #264]	; (8001040 <main+0x1b0>)
 8000f36:	f001 fbea 	bl	800270e <HAL_GPIO_TogglePin>
 8000f3a:	e004      	b.n	8000f46 <main+0xb6>
	  }

	  else
	  {
	    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000f3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f40:	483f      	ldr	r0, [pc, #252]	; (8001040 <main+0x1b0>)
 8000f42:	f001 fbe4 	bl	800270e <HAL_GPIO_TogglePin>
	  }

	  HAL_Delay(10);
 8000f46:	200a      	movs	r0, #10
 8000f48:	f001 f922 	bl	8002190 <HAL_Delay>

	  if(MPU6050_CONVERT_TEMP(&hi2c1, &temperature) == HAL_OK )
 8000f4c:	4940      	ldr	r1, [pc, #256]	; (8001050 <main+0x1c0>)
 8000f4e:	4830      	ldr	r0, [pc, #192]	; (8001010 <main+0x180>)
 8000f50:	f000 fbb0 	bl	80016b4 <MPU6050_CONVERT_TEMP>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d105      	bne.n	8000f66 <main+0xd6>
	  {
	  	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);	  }
 8000f5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f5e:	4838      	ldr	r0, [pc, #224]	; (8001040 <main+0x1b0>)
 8000f60:	f001 fbd5 	bl	800270e <HAL_GPIO_TogglePin>
 8000f64:	e004      	b.n	8000f70 <main+0xe0>

	  else
	  {
	  	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000f66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f6a:	4835      	ldr	r0, [pc, #212]	; (8001040 <main+0x1b0>)
 8000f6c:	f001 fbcf 	bl	800270e <HAL_GPIO_TogglePin>
	  }

	  HAL_Delay(10);
 8000f70:	200a      	movs	r0, #10
 8000f72:	f001 f90d 	bl	8002190 <HAL_Delay>


	  MPU6050_GET_REAL_ACCEL(&hi2c1, &offset, &realAx, &realAy, &realAz);
 8000f76:	4b37      	ldr	r3, [pc, #220]	; (8001054 <main+0x1c4>)
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	4b37      	ldr	r3, [pc, #220]	; (8001058 <main+0x1c8>)
 8000f7c:	4a37      	ldr	r2, [pc, #220]	; (800105c <main+0x1cc>)
 8000f7e:	4925      	ldr	r1, [pc, #148]	; (8001014 <main+0x184>)
 8000f80:	4823      	ldr	r0, [pc, #140]	; (8001010 <main+0x180>)
 8000f82:	f000 fc90 	bl	80018a6 <MPU6050_GET_REAL_ACCEL>
	  MPU6050_GET_REAL_GYRO(&hi2c1, &offset, &realGx, &realGy, &realGz);
 8000f86:	4b36      	ldr	r3, [pc, #216]	; (8001060 <main+0x1d0>)
 8000f88:	9300      	str	r3, [sp, #0]
 8000f8a:	4b36      	ldr	r3, [pc, #216]	; (8001064 <main+0x1d4>)
 8000f8c:	4a36      	ldr	r2, [pc, #216]	; (8001068 <main+0x1d8>)
 8000f8e:	4921      	ldr	r1, [pc, #132]	; (8001014 <main+0x184>)
 8000f90:	481f      	ldr	r0, [pc, #124]	; (8001010 <main+0x180>)
 8000f92:	f000 fcc2 	bl	800191a <MPU6050_GET_REAL_GYRO>

	  GET_ANGLE_WITH_ACCELL(&hi2c1, &offset, &roll_degree, &pitch_degree);
 8000f96:	4b35      	ldr	r3, [pc, #212]	; (800106c <main+0x1dc>)
 8000f98:	4a35      	ldr	r2, [pc, #212]	; (8001070 <main+0x1e0>)
 8000f9a:	491e      	ldr	r1, [pc, #120]	; (8001014 <main+0x184>)
 8000f9c:	481c      	ldr	r0, [pc, #112]	; (8001010 <main+0x180>)
 8000f9e:	f000 fcf7 	bl	8001990 <GET_ANGLE_WITH_ACCELL>
	  GET_ANGLE_WITH_GYRO(&hi2c1, &offset, &angle);
 8000fa2:	4a34      	ldr	r2, [pc, #208]	; (8001074 <main+0x1e4>)
 8000fa4:	491b      	ldr	r1, [pc, #108]	; (8001014 <main+0x184>)
 8000fa6:	481a      	ldr	r0, [pc, #104]	; (8001010 <main+0x180>)
 8000fa8:	f000 fd8e 	bl	8001ac8 <GET_ANGLE_WITH_GYRO>

	  Kalman_Prediction(&kalman_pitch, &hi2c1, &angle_out_pitch, gy);
 8000fac:	4b26      	ldr	r3, [pc, #152]	; (8001048 <main+0x1b8>)
 8000fae:	edd3 7a00 	vldr	s15, [r3]
 8000fb2:	eeb0 0a67 	vmov.f32	s0, s15
 8000fb6:	4a30      	ldr	r2, [pc, #192]	; (8001078 <main+0x1e8>)
 8000fb8:	4915      	ldr	r1, [pc, #84]	; (8001010 <main+0x180>)
 8000fba:	481d      	ldr	r0, [pc, #116]	; (8001030 <main+0x1a0>)
 8000fbc:	f000 fe4e 	bl	8001c5c <Kalman_Prediction>
	  Kalman_Update(&hi2c1, &kalman_pitch, &offset, &angle_out_pitch_1, ay);
 8000fc0:	4b1d      	ldr	r3, [pc, #116]	; (8001038 <main+0x1a8>)
 8000fc2:	edd3 7a00 	vldr	s15, [r3]
 8000fc6:	eeb0 0a67 	vmov.f32	s0, s15
 8000fca:	4b2c      	ldr	r3, [pc, #176]	; (800107c <main+0x1ec>)
 8000fcc:	4a11      	ldr	r2, [pc, #68]	; (8001014 <main+0x184>)
 8000fce:	4918      	ldr	r1, [pc, #96]	; (8001030 <main+0x1a0>)
 8000fd0:	480f      	ldr	r0, [pc, #60]	; (8001010 <main+0x180>)
 8000fd2:	f000 fee9 	bl	8001da8 <Kalman_Update>

	  Kalman_Prediction(&kalman_roll, &hi2c1, &angle_out_roll, gx);
 8000fd6:	4b1d      	ldr	r3, [pc, #116]	; (800104c <main+0x1bc>)
 8000fd8:	edd3 7a00 	vldr	s15, [r3]
 8000fdc:	eeb0 0a67 	vmov.f32	s0, s15
 8000fe0:	4a27      	ldr	r2, [pc, #156]	; (8001080 <main+0x1f0>)
 8000fe2:	490b      	ldr	r1, [pc, #44]	; (8001010 <main+0x180>)
 8000fe4:	4811      	ldr	r0, [pc, #68]	; (800102c <main+0x19c>)
 8000fe6:	f000 fe39 	bl	8001c5c <Kalman_Prediction>
	  Kalman_Update(&hi2c1, &kalman_roll, &offset, &angle_out_roll_1, ax);
 8000fea:	4b14      	ldr	r3, [pc, #80]	; (800103c <main+0x1ac>)
 8000fec:	edd3 7a00 	vldr	s15, [r3]
 8000ff0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ff4:	4b23      	ldr	r3, [pc, #140]	; (8001084 <main+0x1f4>)
 8000ff6:	4a07      	ldr	r2, [pc, #28]	; (8001014 <main+0x184>)
 8000ff8:	490c      	ldr	r1, [pc, #48]	; (800102c <main+0x19c>)
 8000ffa:	4805      	ldr	r0, [pc, #20]	; (8001010 <main+0x180>)
 8000ffc:	f000 fed4 	bl	8001da8 <Kalman_Update>
	  if( MPU6050_CONVERT_ACCELL(&hi2c1, &ax, &ay, &az) == HAL_OK )
 8001000:	e776      	b.n	8000ef0 <main+0x60>
 8001002:	bf00      	nop
 8001004:	f3af 8000 	nop.w
	...
 8001010:	2000009c 	.word	0x2000009c
 8001014:	20000158 	.word	0x20000158
 8001018:	20000000 	.word	0x20000000
 800101c:	3cf5c28f 	.word	0x3cf5c28f
 8001020:	3b449ba6 	.word	0x3b449ba6
 8001024:	3a83126f 	.word	0x3a83126f
 8001028:	00000000 	.word	0x00000000
 800102c:	20000198 	.word	0x20000198
 8001030:	200001d0 	.word	0x200001d0
 8001034:	200000fc 	.word	0x200000fc
 8001038:	200000f8 	.word	0x200000f8
 800103c:	200000f4 	.word	0x200000f4
 8001040:	40020c00 	.word	0x40020c00
 8001044:	20000108 	.word	0x20000108
 8001048:	20000104 	.word	0x20000104
 800104c:	20000100 	.word	0x20000100
 8001050:	2000010c 	.word	0x2000010c
 8001054:	20000118 	.word	0x20000118
 8001058:	20000114 	.word	0x20000114
 800105c:	20000110 	.word	0x20000110
 8001060:	20000124 	.word	0x20000124
 8001064:	20000120 	.word	0x20000120
 8001068:	2000011c 	.word	0x2000011c
 800106c:	20000130 	.word	0x20000130
 8001070:	20000128 	.word	0x20000128
 8001074:	20000170 	.word	0x20000170
 8001078:	20000148 	.word	0x20000148
 800107c:	20000150 	.word	0x20000150
 8001080:	20000138 	.word	0x20000138
 8001084:	20000140 	.word	0x20000140

08001088 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b094      	sub	sp, #80	; 0x50
 800108c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800108e:	f107 0320 	add.w	r3, r7, #32
 8001092:	2230      	movs	r2, #48	; 0x30
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f003 f8b6 	bl	8004208 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800109c:	f107 030c 	add.w	r3, r7, #12
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ac:	2300      	movs	r3, #0
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	4b28      	ldr	r3, [pc, #160]	; (8001154 <SystemClock_Config+0xcc>)
 80010b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b4:	4a27      	ldr	r2, [pc, #156]	; (8001154 <SystemClock_Config+0xcc>)
 80010b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ba:	6413      	str	r3, [r2, #64]	; 0x40
 80010bc:	4b25      	ldr	r3, [pc, #148]	; (8001154 <SystemClock_Config+0xcc>)
 80010be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c4:	60bb      	str	r3, [r7, #8]
 80010c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010c8:	2300      	movs	r3, #0
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	4b22      	ldr	r3, [pc, #136]	; (8001158 <SystemClock_Config+0xd0>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a21      	ldr	r2, [pc, #132]	; (8001158 <SystemClock_Config+0xd0>)
 80010d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d6:	6013      	str	r3, [r2, #0]
 80010d8:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <SystemClock_Config+0xd0>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010e0:	607b      	str	r3, [r7, #4]
 80010e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010e4:	2301      	movs	r3, #1
 80010e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ee:	2302      	movs	r3, #2
 80010f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010f8:	2304      	movs	r3, #4
 80010fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010fc:	23a8      	movs	r3, #168	; 0xa8
 80010fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001100:	2302      	movs	r3, #2
 8001102:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001104:	2304      	movs	r3, #4
 8001106:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001108:	f107 0320 	add.w	r3, r7, #32
 800110c:	4618      	mov	r0, r3
 800110e:	f002 fbf7 	bl	8003900 <HAL_RCC_OscConfig>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001118:	f000 f8a0 	bl	800125c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800111c:	230f      	movs	r3, #15
 800111e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001120:	2302      	movs	r3, #2
 8001122:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001128:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800112c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800112e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001132:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001134:	f107 030c 	add.w	r3, r7, #12
 8001138:	2105      	movs	r1, #5
 800113a:	4618      	mov	r0, r3
 800113c:	f002 fe58 	bl	8003df0 <HAL_RCC_ClockConfig>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001146:	f000 f889 	bl	800125c <Error_Handler>
  }
}
 800114a:	bf00      	nop
 800114c:	3750      	adds	r7, #80	; 0x50
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40023800 	.word	0x40023800
 8001158:	40007000 	.word	0x40007000

0800115c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001160:	4b12      	ldr	r3, [pc, #72]	; (80011ac <MX_I2C1_Init+0x50>)
 8001162:	4a13      	ldr	r2, [pc, #76]	; (80011b0 <MX_I2C1_Init+0x54>)
 8001164:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001166:	4b11      	ldr	r3, [pc, #68]	; (80011ac <MX_I2C1_Init+0x50>)
 8001168:	4a12      	ldr	r2, [pc, #72]	; (80011b4 <MX_I2C1_Init+0x58>)
 800116a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800116c:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <MX_I2C1_Init+0x50>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001172:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <MX_I2C1_Init+0x50>)
 8001174:	2200      	movs	r2, #0
 8001176:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001178:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <MX_I2C1_Init+0x50>)
 800117a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800117e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001180:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <MX_I2C1_Init+0x50>)
 8001182:	2200      	movs	r2, #0
 8001184:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001186:	4b09      	ldr	r3, [pc, #36]	; (80011ac <MX_I2C1_Init+0x50>)
 8001188:	2200      	movs	r2, #0
 800118a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800118c:	4b07      	ldr	r3, [pc, #28]	; (80011ac <MX_I2C1_Init+0x50>)
 800118e:	2200      	movs	r2, #0
 8001190:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <MX_I2C1_Init+0x50>)
 8001194:	2200      	movs	r2, #0
 8001196:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001198:	4804      	ldr	r0, [pc, #16]	; (80011ac <MX_I2C1_Init+0x50>)
 800119a:	f001 fad3 	bl	8002744 <HAL_I2C_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011a4:	f000 f85a 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	2000009c 	.word	0x2000009c
 80011b0:	40005400 	.word	0x40005400
 80011b4:	000186a0 	.word	0x000186a0

080011b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b088      	sub	sp, #32
 80011bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011be:	f107 030c 	add.w	r3, r7, #12
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
 80011cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	4b20      	ldr	r3, [pc, #128]	; (8001254 <MX_GPIO_Init+0x9c>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	4a1f      	ldr	r2, [pc, #124]	; (8001254 <MX_GPIO_Init+0x9c>)
 80011d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011dc:	6313      	str	r3, [r2, #48]	; 0x30
 80011de:	4b1d      	ldr	r3, [pc, #116]	; (8001254 <MX_GPIO_Init+0x9c>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	4b19      	ldr	r3, [pc, #100]	; (8001254 <MX_GPIO_Init+0x9c>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a18      	ldr	r2, [pc, #96]	; (8001254 <MX_GPIO_Init+0x9c>)
 80011f4:	f043 0308 	orr.w	r3, r3, #8
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b16      	ldr	r3, [pc, #88]	; (8001254 <MX_GPIO_Init+0x9c>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0308 	and.w	r3, r3, #8
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	603b      	str	r3, [r7, #0]
 800120a:	4b12      	ldr	r3, [pc, #72]	; (8001254 <MX_GPIO_Init+0x9c>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a11      	ldr	r2, [pc, #68]	; (8001254 <MX_GPIO_Init+0x9c>)
 8001210:	f043 0302 	orr.w	r3, r3, #2
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <MX_GPIO_Init+0x9c>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8001228:	480b      	ldr	r0, [pc, #44]	; (8001258 <MX_GPIO_Init+0xa0>)
 800122a:	f001 fa57 	bl	80026dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800122e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001232:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001234:	2301      	movs	r3, #1
 8001236:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123c:	2300      	movs	r3, #0
 800123e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001240:	f107 030c 	add.w	r3, r7, #12
 8001244:	4619      	mov	r1, r3
 8001246:	4804      	ldr	r0, [pc, #16]	; (8001258 <MX_GPIO_Init+0xa0>)
 8001248:	f001 f8ac 	bl	80023a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800124c:	bf00      	nop
 800124e:	3720      	adds	r7, #32
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40023800 	.word	0x40023800
 8001258:	40020c00 	.word	0x40020c00

0800125c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001260:	b672      	cpsid	i
}
 8001262:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001264:	e7fe      	b.n	8001264 <Error_Handler+0x8>
	...

08001268 <MPU6050_WriteRegister>:
#include "mpu6050.h"

static int timeout = 100;

HAL_StatusTypeDef MPU6050_WriteRegister(I2C_HandleTypeDef *hi2c, uint8_t writeAddress, uint8_t writeRegister, uint8_t writeValue)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af02      	add	r7, sp, #8
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	4608      	mov	r0, r1
 8001272:	4611      	mov	r1, r2
 8001274:	461a      	mov	r2, r3
 8001276:	4603      	mov	r3, r0
 8001278:	70fb      	strb	r3, [r7, #3]
 800127a:	460b      	mov	r3, r1
 800127c:	70bb      	strb	r3, [r7, #2]
 800127e:	4613      	mov	r3, r2
 8001280:	707b      	strb	r3, [r7, #1]
    uint8_t txData[2] = {writeRegister, writeValue};
 8001282:	78bb      	ldrb	r3, [r7, #2]
 8001284:	733b      	strb	r3, [r7, #12]
 8001286:	787b      	ldrb	r3, [r7, #1]
 8001288:	737b      	strb	r3, [r7, #13]
    return HAL_I2C_Master_Transmit(hi2c, writeAddress, txData, sizeof(txData), timeout);
 800128a:	78fb      	ldrb	r3, [r7, #3]
 800128c:	b299      	uxth	r1, r3
 800128e:	4b07      	ldr	r3, [pc, #28]	; (80012ac <MPU6050_WriteRegister+0x44>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f107 020c 	add.w	r2, r7, #12
 8001296:	9300      	str	r3, [sp, #0]
 8001298:	2302      	movs	r3, #2
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f001 fb96 	bl	80029cc <HAL_I2C_Master_Transmit>
 80012a0:	4603      	mov	r3, r0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000010 	.word	0x20000010

080012b0 <MPU6050_ReadRegister>:

HAL_StatusTypeDef MPU6050_ReadRegister(I2C_HandleTypeDef *hi2c, uint8_t readAddress, uint8_t readRegister, uint8_t *data, uint8_t size)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b088      	sub	sp, #32
 80012b4:	af04      	add	r7, sp, #16
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	607b      	str	r3, [r7, #4]
 80012ba:	460b      	mov	r3, r1
 80012bc:	72fb      	strb	r3, [r7, #11]
 80012be:	4613      	mov	r3, r2
 80012c0:	72bb      	strb	r3, [r7, #10]
    return HAL_I2C_Mem_Read(hi2c, readAddress, readRegister, 1, data, size, timeout);
 80012c2:	7afb      	ldrb	r3, [r7, #11]
 80012c4:	b299      	uxth	r1, r3
 80012c6:	7abb      	ldrb	r3, [r7, #10]
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	7e3b      	ldrb	r3, [r7, #24]
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	4807      	ldr	r0, [pc, #28]	; (80012ec <MPU6050_ReadRegister+0x3c>)
 80012d0:	6800      	ldr	r0, [r0, #0]
 80012d2:	9002      	str	r0, [sp, #8]
 80012d4:	9301      	str	r3, [sp, #4]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	2301      	movs	r3, #1
 80012dc:	68f8      	ldr	r0, [r7, #12]
 80012de:	f001 fc73 	bl	8002bc8 <HAL_I2C_Mem_Read>
 80012e2:	4603      	mov	r3, r0
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000010 	.word	0x20000010

080012f0 <MPU6050_Init>:

HAL_StatusTypeDef MPU6050_Init(I2C_HandleTypeDef *h12c)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af02      	add	r7, sp, #8
 80012f6:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef ret;
    uint8_t readData;

    ret = MPU6050_WriteRegister(h12c, WRITE_ADDR, PWR_MGMT_1, 0x00);
 80012f8:	2300      	movs	r3, #0
 80012fa:	226b      	movs	r2, #107	; 0x6b
 80012fc:	21d0      	movs	r1, #208	; 0xd0
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff ffb2 	bl	8001268 <MPU6050_WriteRegister>
 8001304:	4603      	mov	r3, r0
 8001306:	73fb      	strb	r3, [r7, #15]
    if(ret != HAL_OK) return ret;
 8001308:	7bfb      	ldrb	r3, [r7, #15]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MPU6050_Init+0x22>
 800130e:	7bfb      	ldrb	r3, [r7, #15]
 8001310:	e047      	b.n	80013a2 <MPU6050_Init+0xb2>

    ret = MPU6050_ReadRegister(h12c, READ_ADDR, WHO_AM_I, &readData, 1);
 8001312:	f107 030e 	add.w	r3, r7, #14
 8001316:	2201      	movs	r2, #1
 8001318:	9200      	str	r2, [sp, #0]
 800131a:	2275      	movs	r2, #117	; 0x75
 800131c:	21d1      	movs	r1, #209	; 0xd1
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f7ff ffc6 	bl	80012b0 <MPU6050_ReadRegister>
 8001324:	4603      	mov	r3, r0
 8001326:	73fb      	strb	r3, [r7, #15]
    if(ret != HAL_OK || readData != MPU6050_ADDR) return HAL_ERROR;
 8001328:	7bfb      	ldrb	r3, [r7, #15]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d102      	bne.n	8001334 <MPU6050_Init+0x44>
 800132e:	7bbb      	ldrb	r3, [r7, #14]
 8001330:	2b68      	cmp	r3, #104	; 0x68
 8001332:	d001      	beq.n	8001338 <MPU6050_Init+0x48>
 8001334:	2301      	movs	r3, #1
 8001336:	e034      	b.n	80013a2 <MPU6050_Init+0xb2>

    ret = MPU6050_WriteRegister(h12c, WRITE_ADDR, CONFIG, 0x03);
 8001338:	2303      	movs	r3, #3
 800133a:	221a      	movs	r2, #26
 800133c:	21d0      	movs	r1, #208	; 0xd0
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff ff92 	bl	8001268 <MPU6050_WriteRegister>
 8001344:	4603      	mov	r3, r0
 8001346:	73fb      	strb	r3, [r7, #15]
    if(ret != HAL_OK) return ret;
 8001348:	7bfb      	ldrb	r3, [r7, #15]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MPU6050_Init+0x62>
 800134e:	7bfb      	ldrb	r3, [r7, #15]
 8001350:	e027      	b.n	80013a2 <MPU6050_Init+0xb2>

    ret = MPU6050_WriteRegister(h12c, WRITE_ADDR, SMPRT_DIV, 9);
 8001352:	2309      	movs	r3, #9
 8001354:	2219      	movs	r2, #25
 8001356:	21d0      	movs	r1, #208	; 0xd0
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff ff85 	bl	8001268 <MPU6050_WriteRegister>
 800135e:	4603      	mov	r3, r0
 8001360:	73fb      	strb	r3, [r7, #15]
    if(ret != HAL_OK) return ret;
 8001362:	7bfb      	ldrb	r3, [r7, #15]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MPU6050_Init+0x7c>
 8001368:	7bfb      	ldrb	r3, [r7, #15]
 800136a:	e01a      	b.n	80013a2 <MPU6050_Init+0xb2>

    ret = MPU6050_WriteRegister(h12c, WRITE_ADDR, GYRO_CONFIG, 0x10);
 800136c:	2310      	movs	r3, #16
 800136e:	221b      	movs	r2, #27
 8001370:	21d0      	movs	r1, #208	; 0xd0
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff ff78 	bl	8001268 <MPU6050_WriteRegister>
 8001378:	4603      	mov	r3, r0
 800137a:	73fb      	strb	r3, [r7, #15]
    if(ret != HAL_OK) return ret;
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MPU6050_Init+0x96>
 8001382:	7bfb      	ldrb	r3, [r7, #15]
 8001384:	e00d      	b.n	80013a2 <MPU6050_Init+0xb2>

    ret = MPU6050_WriteRegister(h12c, WRITE_ADDR, ACCEL_CONFIG, 0x10);
 8001386:	2310      	movs	r3, #16
 8001388:	221c      	movs	r2, #28
 800138a:	21d0      	movs	r1, #208	; 0xd0
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff ff6b 	bl	8001268 <MPU6050_WriteRegister>
 8001392:	4603      	mov	r3, r0
 8001394:	73fb      	strb	r3, [r7, #15]
    if(ret != HAL_OK) return ret;
 8001396:	7bfb      	ldrb	r3, [r7, #15]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MPU6050_Init+0xb0>
 800139c:	7bfb      	ldrb	r3, [r7, #15]
 800139e:	e000      	b.n	80013a2 <MPU6050_Init+0xb2>

    return HAL_OK;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <MPU6050_READ_ACCEL_ALL_AXIS>:

HAL_StatusTypeDef MPU6050_READ_ACCEL_ALL_AXIS(I2C_HandleTypeDef *hi2c, int16_t *aX, int16_t *aY, int16_t *aZ)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b088      	sub	sp, #32
 80013ae:	af02      	add	r7, sp, #8
 80013b0:	60f8      	str	r0, [r7, #12]
 80013b2:	60b9      	str	r1, [r7, #8]
 80013b4:	607a      	str	r2, [r7, #4]
 80013b6:	603b      	str	r3, [r7, #0]
    HAL_StatusTypeDef ret;
    uint8_t accelData[6];

    ret = MPU6050_ReadRegister(hi2c, READ_ADDR, ACCEL_XOUT_H, accelData, 6);
 80013b8:	f107 0310 	add.w	r3, r7, #16
 80013bc:	2206      	movs	r2, #6
 80013be:	9200      	str	r2, [sp, #0]
 80013c0:	223b      	movs	r2, #59	; 0x3b
 80013c2:	21d1      	movs	r1, #209	; 0xd1
 80013c4:	68f8      	ldr	r0, [r7, #12]
 80013c6:	f7ff ff73 	bl	80012b0 <MPU6050_ReadRegister>
 80013ca:	4603      	mov	r3, r0
 80013cc:	75fb      	strb	r3, [r7, #23]
    if(ret != HAL_OK) return ret;
 80013ce:	7dfb      	ldrb	r3, [r7, #23]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MPU6050_READ_ACCEL_ALL_AXIS+0x2e>
 80013d4:	7dfb      	ldrb	r3, [r7, #23]
 80013d6:	e01b      	b.n	8001410 <MPU6050_READ_ACCEL_ALL_AXIS+0x66>

    *aX = (int16_t)(accelData[0] << 8 | accelData[1]);
 80013d8:	7c3b      	ldrb	r3, [r7, #16]
 80013da:	021b      	lsls	r3, r3, #8
 80013dc:	b21a      	sxth	r2, r3
 80013de:	7c7b      	ldrb	r3, [r7, #17]
 80013e0:	b21b      	sxth	r3, r3
 80013e2:	4313      	orrs	r3, r2
 80013e4:	b21a      	sxth	r2, r3
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	801a      	strh	r2, [r3, #0]
    *aY = (int16_t)(accelData[2] << 8 | accelData[3]);
 80013ea:	7cbb      	ldrb	r3, [r7, #18]
 80013ec:	021b      	lsls	r3, r3, #8
 80013ee:	b21a      	sxth	r2, r3
 80013f0:	7cfb      	ldrb	r3, [r7, #19]
 80013f2:	b21b      	sxth	r3, r3
 80013f4:	4313      	orrs	r3, r2
 80013f6:	b21a      	sxth	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	801a      	strh	r2, [r3, #0]
    *aZ = (int16_t)(accelData[4] << 8 | accelData[5]);
 80013fc:	7d3b      	ldrb	r3, [r7, #20]
 80013fe:	021b      	lsls	r3, r3, #8
 8001400:	b21a      	sxth	r2, r3
 8001402:	7d7b      	ldrb	r3, [r7, #21]
 8001404:	b21b      	sxth	r3, r3
 8001406:	4313      	orrs	r3, r2
 8001408:	b21a      	sxth	r2, r3
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	801a      	strh	r2, [r3, #0]

    return HAL_OK;
 800140e:	2300      	movs	r3, #0
}
 8001410:	4618      	mov	r0, r3
 8001412:	3718      	adds	r7, #24
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <MPU6050_READ_GYRO_ALL_AXIS>:

    return (int16_t)(data[0] << 8 | data[1]);
}

HAL_StatusTypeDef MPU6050_READ_GYRO_ALL_AXIS(I2C_HandleTypeDef *hi2c, int16_t *gX, int16_t *gY, int16_t *gZ)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b088      	sub	sp, #32
 800141c:	af02      	add	r7, sp, #8
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
 8001424:	603b      	str	r3, [r7, #0]
    HAL_StatusTypeDef ret;
    uint8_t gyroData[6];

    ret = MPU6050_ReadRegister(hi2c, READ_ADDR, GYRO_XOUT_H, gyroData, 6);
 8001426:	f107 0310 	add.w	r3, r7, #16
 800142a:	2206      	movs	r2, #6
 800142c:	9200      	str	r2, [sp, #0]
 800142e:	2243      	movs	r2, #67	; 0x43
 8001430:	21d1      	movs	r1, #209	; 0xd1
 8001432:	68f8      	ldr	r0, [r7, #12]
 8001434:	f7ff ff3c 	bl	80012b0 <MPU6050_ReadRegister>
 8001438:	4603      	mov	r3, r0
 800143a:	75fb      	strb	r3, [r7, #23]
    if(ret != HAL_OK) return ret;
 800143c:	7dfb      	ldrb	r3, [r7, #23]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MPU6050_READ_GYRO_ALL_AXIS+0x2e>
 8001442:	7dfb      	ldrb	r3, [r7, #23]
 8001444:	e01b      	b.n	800147e <MPU6050_READ_GYRO_ALL_AXIS+0x66>

    *gX = (int16_t)(gyroData[0] << 8 | gyroData[1]);
 8001446:	7c3b      	ldrb	r3, [r7, #16]
 8001448:	021b      	lsls	r3, r3, #8
 800144a:	b21a      	sxth	r2, r3
 800144c:	7c7b      	ldrb	r3, [r7, #17]
 800144e:	b21b      	sxth	r3, r3
 8001450:	4313      	orrs	r3, r2
 8001452:	b21a      	sxth	r2, r3
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	801a      	strh	r2, [r3, #0]
    *gY = (int16_t)(gyroData[2] << 8 | gyroData[3]);
 8001458:	7cbb      	ldrb	r3, [r7, #18]
 800145a:	021b      	lsls	r3, r3, #8
 800145c:	b21a      	sxth	r2, r3
 800145e:	7cfb      	ldrb	r3, [r7, #19]
 8001460:	b21b      	sxth	r3, r3
 8001462:	4313      	orrs	r3, r2
 8001464:	b21a      	sxth	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	801a      	strh	r2, [r3, #0]
    *gZ = (int16_t)(gyroData[4] << 8 | gyroData[5]);
 800146a:	7d3b      	ldrb	r3, [r7, #20]
 800146c:	021b      	lsls	r3, r3, #8
 800146e:	b21a      	sxth	r2, r3
 8001470:	7d7b      	ldrb	r3, [r7, #21]
 8001472:	b21b      	sxth	r3, r3
 8001474:	4313      	orrs	r3, r2
 8001476:	b21a      	sxth	r2, r3
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	801a      	strh	r2, [r3, #0]

    return HAL_OK;
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3718      	adds	r7, #24
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <MPU6050_READ_TEMP>:

    return (int16_t)(data[0] << 8 | data[1]);
}

int16_t MPU6050_READ_TEMP(I2C_HandleTypeDef *hi2c)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b086      	sub	sp, #24
 800148a:	af02      	add	r7, sp, #8
 800148c:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef ret;
    uint8_t tempRawData[2];

    ret = MPU6050_ReadRegister(hi2c, READ_ADDR, TEMP_OUT_H, tempRawData, 2);
 800148e:	f107 030c 	add.w	r3, r7, #12
 8001492:	2202      	movs	r2, #2
 8001494:	9200      	str	r2, [sp, #0]
 8001496:	2241      	movs	r2, #65	; 0x41
 8001498:	21d1      	movs	r1, #209	; 0xd1
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff ff08 	bl	80012b0 <MPU6050_ReadRegister>
 80014a0:	4603      	mov	r3, r0
 80014a2:	73fb      	strb	r3, [r7, #15]
    if(ret != HAL_OK) return 0;
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MPU6050_READ_TEMP+0x28>
 80014aa:	2300      	movs	r3, #0
 80014ac:	e006      	b.n	80014bc <MPU6050_READ_TEMP+0x36>

    return (int16_t)(tempRawData[0] << 8 | tempRawData[1]);
 80014ae:	7b3b      	ldrb	r3, [r7, #12]
 80014b0:	021b      	lsls	r3, r3, #8
 80014b2:	b21a      	sxth	r2, r3
 80014b4:	7b7b      	ldrb	r3, [r7, #13]
 80014b6:	b21b      	sxth	r3, r3
 80014b8:	4313      	orrs	r3, r2
 80014ba:	b21b      	sxth	r3, r3
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <MPU6050_CONVERT_ACCELL>:


HAL_StatusTypeDef MPU6050_CONVERT_ACCELL(I2C_HandleTypeDef *hi2c, float *ax_g, float *ay_g, float *az_g)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08a      	sub	sp, #40	; 0x28
 80014c8:	af02      	add	r7, sp, #8
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
 80014d0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef ret;
	uint8_t config_reg;
	int16_t raw_ax, raw_ay, raw_az;
	float scale;

	ret = MPU6050_ReadRegister(hi2c, READ_ADDR, ACCEL_CONFIG, &config_reg, 1);
 80014d2:	f107 0319 	add.w	r3, r7, #25
 80014d6:	2201      	movs	r2, #1
 80014d8:	9200      	str	r2, [sp, #0]
 80014da:	221c      	movs	r2, #28
 80014dc:	21d1      	movs	r1, #209	; 0xd1
 80014de:	68f8      	ldr	r0, [r7, #12]
 80014e0:	f7ff fee6 	bl	80012b0 <MPU6050_ReadRegister>
 80014e4:	4603      	mov	r3, r0
 80014e6:	76fb      	strb	r3, [r7, #27]
	if(ret != HAL_OK) return ret;
 80014e8:	7efb      	ldrb	r3, [r7, #27]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MPU6050_CONVERT_ACCELL+0x2e>
 80014ee:	7efb      	ldrb	r3, [r7, #27]
 80014f0:	e05e      	b.n	80015b0 <MPU6050_CONVERT_ACCELL+0xec>

	ret = MPU6050_READ_ACCEL_ALL_AXIS(hi2c, &raw_ax, &raw_ay, &raw_az);
 80014f2:	f107 0312 	add.w	r3, r7, #18
 80014f6:	f107 0214 	add.w	r2, r7, #20
 80014fa:	f107 0116 	add.w	r1, r7, #22
 80014fe:	68f8      	ldr	r0, [r7, #12]
 8001500:	f7ff ff53 	bl	80013aa <MPU6050_READ_ACCEL_ALL_AXIS>
 8001504:	4603      	mov	r3, r0
 8001506:	76fb      	strb	r3, [r7, #27]
	if(ret != HAL_OK) return ret;
 8001508:	7efb      	ldrb	r3, [r7, #27]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MPU6050_CONVERT_ACCELL+0x4e>
 800150e:	7efb      	ldrb	r3, [r7, #27]
 8001510:	e04e      	b.n	80015b0 <MPU6050_CONVERT_ACCELL+0xec>

	uint8_t afs_sel = (config_reg >> 3) & 0x03;
 8001512:	7e7b      	ldrb	r3, [r7, #25]
 8001514:	08db      	lsrs	r3, r3, #3
 8001516:	b2db      	uxtb	r3, r3
 8001518:	f003 0303 	and.w	r3, r3, #3
 800151c:	76bb      	strb	r3, [r7, #26]

	switch (afs_sel) {
 800151e:	7ebb      	ldrb	r3, [r7, #26]
 8001520:	2b03      	cmp	r3, #3
 8001522:	d81b      	bhi.n	800155c <MPU6050_CONVERT_ACCELL+0x98>
 8001524:	a201      	add	r2, pc, #4	; (adr r2, 800152c <MPU6050_CONVERT_ACCELL+0x68>)
 8001526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800152a:	bf00      	nop
 800152c:	0800153d 	.word	0x0800153d
 8001530:	08001545 	.word	0x08001545
 8001534:	0800154d 	.word	0x0800154d
 8001538:	08001555 	.word	0x08001555
		case 0:
			scale = 16384.0f;
 800153c:	f04f 438d 	mov.w	r3, #1182793728	; 0x46800000
 8001540:	61fb      	str	r3, [r7, #28]
			break;
 8001542:	e00d      	b.n	8001560 <MPU6050_CONVERT_ACCELL+0x9c>
		case 1:
			scale = 8192.0f;
 8001544:	f04f 438c 	mov.w	r3, #1174405120	; 0x46000000
 8001548:	61fb      	str	r3, [r7, #28]
			break;
 800154a:	e009      	b.n	8001560 <MPU6050_CONVERT_ACCELL+0x9c>
		case 2:
			scale = 4096.0f;
 800154c:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 8001550:	61fb      	str	r3, [r7, #28]
			break;
 8001552:	e005      	b.n	8001560 <MPU6050_CONVERT_ACCELL+0x9c>
		case 3:
			scale = 2048.0f;
 8001554:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 8001558:	61fb      	str	r3, [r7, #28]
			break;
 800155a:	e001      	b.n	8001560 <MPU6050_CONVERT_ACCELL+0x9c>
		default:
			return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e027      	b.n	80015b0 <MPU6050_CONVERT_ACCELL+0xec>
	}

	*ax_g = (float)raw_ax / scale;
 8001560:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001564:	ee07 3a90 	vmov	s15, r3
 8001568:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800156c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001570:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	edc3 7a00 	vstr	s15, [r3]
	*ay_g = (float)raw_ay / scale;
 800157a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800157e:	ee07 3a90 	vmov	s15, r3
 8001582:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001586:	ed97 7a07 	vldr	s14, [r7, #28]
 800158a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	edc3 7a00 	vstr	s15, [r3]
	*az_g = (float)raw_az / scale;
 8001594:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001598:	ee07 3a90 	vmov	s15, r3
 800159c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015a0:	ed97 7a07 	vldr	s14, [r7, #28]
 80015a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	edc3 7a00 	vstr	s15, [r3]

	return HAL_OK;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3720      	adds	r7, #32
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <MPU6050_CONVERT_GYRO>:

HAL_StatusTypeDef MPU6050_CONVERT_GYRO(I2C_HandleTypeDef *hi2c, float *gx_dps, float *gy_dps, float *gz_dps)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08a      	sub	sp, #40	; 0x28
 80015bc:	af02      	add	r7, sp, #8
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
 80015c4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef ret;
	uint8_t config_reg;
	int16_t raw_gx, raw_gy, raw_gz;
	float scale;

	ret = MPU6050_ReadRegister(hi2c, READ_ADDR, GYRO_CONFIG, &config_reg, 1);
 80015c6:	f107 0319 	add.w	r3, r7, #25
 80015ca:	2201      	movs	r2, #1
 80015cc:	9200      	str	r2, [sp, #0]
 80015ce:	221b      	movs	r2, #27
 80015d0:	21d1      	movs	r1, #209	; 0xd1
 80015d2:	68f8      	ldr	r0, [r7, #12]
 80015d4:	f7ff fe6c 	bl	80012b0 <MPU6050_ReadRegister>
 80015d8:	4603      	mov	r3, r0
 80015da:	76fb      	strb	r3, [r7, #27]
	if(ret != HAL_OK) return ret;
 80015dc:	7efb      	ldrb	r3, [r7, #27]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MPU6050_CONVERT_GYRO+0x2e>
 80015e2:	7efb      	ldrb	r3, [r7, #27]
 80015e4:	e05a      	b.n	800169c <MPU6050_CONVERT_GYRO+0xe4>

	ret = MPU6050_READ_GYRO_ALL_AXIS(hi2c, &raw_gx, &raw_gy, &raw_gz);
 80015e6:	f107 0312 	add.w	r3, r7, #18
 80015ea:	f107 0214 	add.w	r2, r7, #20
 80015ee:	f107 0116 	add.w	r1, r7, #22
 80015f2:	68f8      	ldr	r0, [r7, #12]
 80015f4:	f7ff ff10 	bl	8001418 <MPU6050_READ_GYRO_ALL_AXIS>
 80015f8:	4603      	mov	r3, r0
 80015fa:	76fb      	strb	r3, [r7, #27]
	if(ret != HAL_OK) return ret;
 80015fc:	7efb      	ldrb	r3, [r7, #27]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MPU6050_CONVERT_GYRO+0x4e>
 8001602:	7efb      	ldrb	r3, [r7, #27]
 8001604:	e04a      	b.n	800169c <MPU6050_CONVERT_GYRO+0xe4>

	uint8_t fs_sel = (config_reg >> 3) & 0x03;
 8001606:	7e7b      	ldrb	r3, [r7, #25]
 8001608:	08db      	lsrs	r3, r3, #3
 800160a:	b2db      	uxtb	r3, r3
 800160c:	f003 0303 	and.w	r3, r3, #3
 8001610:	76bb      	strb	r3, [r7, #26]

	switch (fs_sel) {
 8001612:	7ebb      	ldrb	r3, [r7, #26]
 8001614:	2b03      	cmp	r3, #3
 8001616:	d817      	bhi.n	8001648 <MPU6050_CONVERT_GYRO+0x90>
 8001618:	a201      	add	r2, pc, #4	; (adr r2, 8001620 <MPU6050_CONVERT_GYRO+0x68>)
 800161a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800161e:	bf00      	nop
 8001620:	08001631 	.word	0x08001631
 8001624:	08001637 	.word	0x08001637
 8001628:	0800163d 	.word	0x0800163d
 800162c:	08001643 	.word	0x08001643
		case 0:
			scale = 131.0f;
 8001630:	4b1c      	ldr	r3, [pc, #112]	; (80016a4 <MPU6050_CONVERT_GYRO+0xec>)
 8001632:	61fb      	str	r3, [r7, #28]
			break;
 8001634:	e00a      	b.n	800164c <MPU6050_CONVERT_GYRO+0x94>
		case 1:
			scale = 65.5f;
 8001636:	4b1c      	ldr	r3, [pc, #112]	; (80016a8 <MPU6050_CONVERT_GYRO+0xf0>)
 8001638:	61fb      	str	r3, [r7, #28]
			break;
 800163a:	e007      	b.n	800164c <MPU6050_CONVERT_GYRO+0x94>
		case 2:
			scale = 32.8f;
 800163c:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <MPU6050_CONVERT_GYRO+0xf4>)
 800163e:	61fb      	str	r3, [r7, #28]
			break;
 8001640:	e004      	b.n	800164c <MPU6050_CONVERT_GYRO+0x94>
		case 3:
			scale = 16.4f;
 8001642:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <MPU6050_CONVERT_GYRO+0xf8>)
 8001644:	61fb      	str	r3, [r7, #28]
			break;
 8001646:	e001      	b.n	800164c <MPU6050_CONVERT_GYRO+0x94>
		default:
			return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e027      	b.n	800169c <MPU6050_CONVERT_GYRO+0xe4>
	}

	*gx_dps = raw_gx / scale;
 800164c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001650:	ee07 3a90 	vmov	s15, r3
 8001654:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001658:	ed97 7a07 	vldr	s14, [r7, #28]
 800165c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	edc3 7a00 	vstr	s15, [r3]
	*gy_dps = raw_gy / scale;
 8001666:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800166a:	ee07 3a90 	vmov	s15, r3
 800166e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001672:	ed97 7a07 	vldr	s14, [r7, #28]
 8001676:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	edc3 7a00 	vstr	s15, [r3]
	*gz_dps = raw_gz / scale;
 8001680:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001684:	ee07 3a90 	vmov	s15, r3
 8001688:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800168c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001690:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	edc3 7a00 	vstr	s15, [r3]

	return HAL_OK;
 800169a:	2300      	movs	r3, #0
}
 800169c:	4618      	mov	r0, r3
 800169e:	3720      	adds	r7, #32
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	43030000 	.word	0x43030000
 80016a8:	42830000 	.word	0x42830000
 80016ac:	42033333 	.word	0x42033333
 80016b0:	41833333 	.word	0x41833333

080016b4 <MPU6050_CONVERT_TEMP>:

HAL_StatusTypeDef MPU6050_CONVERT_TEMP(I2C_HandleTypeDef *hi2c, float *temp)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
	int16_t raw_temp;

	raw_temp = MPU6050_READ_TEMP(hi2c);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff fee1 	bl	8001486 <MPU6050_READ_TEMP>
 80016c4:	4603      	mov	r3, r0
 80016c6:	81fb      	strh	r3, [r7, #14]
	if(raw_temp == INT16_MIN) return HAL_ERROR;
 80016c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016cc:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80016d0:	d101      	bne.n	80016d6 <MPU6050_CONVERT_TEMP+0x22>
 80016d2:	2301      	movs	r3, #1
 80016d4:	e011      	b.n	80016fa <MPU6050_CONVERT_TEMP+0x46>

	*temp = (float)(raw_temp / 340.0f) + 36.53f;
 80016d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016da:	ee07 3a90 	vmov	s15, r3
 80016de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016e2:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001704 <MPU6050_CONVERT_TEMP+0x50>
 80016e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016ea:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001708 <MPU6050_CONVERT_TEMP+0x54>
 80016ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	edc3 7a00 	vstr	s15, [r3]

	return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	43aa0000 	.word	0x43aa0000
 8001708:	42121eb8 	.word	0x42121eb8

0800170c <Offset_Calibration_Accel>:


void Offset_Calibration_Accel(I2C_HandleTypeDef *hi2c, SensorOffset_t *offset)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08a      	sub	sp, #40	; 0x28
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
	float totalAccelMeasurementX = 0, totalAccelMeasurementY = 0, totalAccelMeasurementZ = 0;
 8001716:	f04f 0300 	mov.w	r3, #0
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
 800171c:	f04f 0300 	mov.w	r3, #0
 8001720:	623b      	str	r3, [r7, #32]
 8001722:	f04f 0300 	mov.w	r3, #0
 8001726:	61fb      	str	r3, [r7, #28]
	float ax, ay, az;


	for (int i = 0 ; i < CALIBRATION_SAMPLE_COUNT; i++)
 8001728:	2300      	movs	r3, #0
 800172a:	61bb      	str	r3, [r7, #24]
 800172c:	e026      	b.n	800177c <Offset_Calibration_Accel+0x70>
	{
		MPU6050_CONVERT_ACCELL(hi2c, &ax, &ay, &az);
 800172e:	f107 030c 	add.w	r3, r7, #12
 8001732:	f107 0210 	add.w	r2, r7, #16
 8001736:	f107 0114 	add.w	r1, r7, #20
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7ff fec2 	bl	80014c4 <MPU6050_CONVERT_ACCELL>

		totalAccelMeasurementX += ax;
 8001740:	edd7 7a05 	vldr	s15, [r7, #20]
 8001744:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001748:	ee77 7a27 	vadd.f32	s15, s14, s15
 800174c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

		totalAccelMeasurementY += ay;
 8001750:	edd7 7a04 	vldr	s15, [r7, #16]
 8001754:	ed97 7a08 	vldr	s14, [r7, #32]
 8001758:	ee77 7a27 	vadd.f32	s15, s14, s15
 800175c:	edc7 7a08 	vstr	s15, [r7, #32]

		totalAccelMeasurementZ += az;
 8001760:	edd7 7a03 	vldr	s15, [r7, #12]
 8001764:	ed97 7a07 	vldr	s14, [r7, #28]
 8001768:	ee77 7a27 	vadd.f32	s15, s14, s15
 800176c:	edc7 7a07 	vstr	s15, [r7, #28]

		HAL_Delay(2);
 8001770:	2002      	movs	r0, #2
 8001772:	f000 fd0d 	bl	8002190 <HAL_Delay>
	for (int i = 0 ; i < CALIBRATION_SAMPLE_COUNT; i++)
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	3301      	adds	r3, #1
 800177a:	61bb      	str	r3, [r7, #24]
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001782:	dbd4      	blt.n	800172e <Offset_Calibration_Accel+0x22>
	}

	offset->ax = totalAccelMeasurementX / CALIBRATION_SAMPLE_COUNT;
 8001784:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001788:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80017c4 <Offset_Calibration_Accel+0xb8>
 800178c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	edc3 7a00 	vstr	s15, [r3]
	offset->ay = totalAccelMeasurementY / CALIBRATION_SAMPLE_COUNT;
 8001796:	ed97 7a08 	vldr	s14, [r7, #32]
 800179a:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80017c4 <Offset_Calibration_Accel+0xb8>
 800179e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	edc3 7a01 	vstr	s15, [r3, #4]
	offset->az = totalAccelMeasurementZ / CALIBRATION_SAMPLE_COUNT;
 80017a8:	ed97 7a07 	vldr	s14, [r7, #28]
 80017ac:	eddf 6a05 	vldr	s13, [pc, #20]	; 80017c4 <Offset_Calibration_Accel+0xb8>
 80017b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80017ba:	bf00      	nop
 80017bc:	3728      	adds	r7, #40	; 0x28
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	43fa0000 	.word	0x43fa0000

080017c8 <Offset_Calibration_Gyro>:

void Offset_Calibration_Gyro(I2C_HandleTypeDef *hi2c, SensorOffset_t *offset)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b08a      	sub	sp, #40	; 0x28
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
	float totalGyroMeasurementX = 0, totalGyroMeasurementY = 0, totalGyroMeasurementZ = 0;
 80017d2:	f04f 0300 	mov.w	r3, #0
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
 80017d8:	f04f 0300 	mov.w	r3, #0
 80017dc:	623b      	str	r3, [r7, #32]
 80017de:	f04f 0300 	mov.w	r3, #0
 80017e2:	61fb      	str	r3, [r7, #28]
	float gx, gy, gz;

		for (int i = 0 ; i < CALIBRATION_SAMPLE_COUNT; i++)
 80017e4:	2300      	movs	r3, #0
 80017e6:	61bb      	str	r3, [r7, #24]
 80017e8:	e026      	b.n	8001838 <Offset_Calibration_Gyro+0x70>
		{
			MPU6050_CONVERT_GYRO(hi2c, &gx, &gy, &gz);
 80017ea:	f107 030c 	add.w	r3, r7, #12
 80017ee:	f107 0210 	add.w	r2, r7, #16
 80017f2:	f107 0114 	add.w	r1, r7, #20
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff fede 	bl	80015b8 <MPU6050_CONVERT_GYRO>

			totalGyroMeasurementX += gx;
 80017fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001800:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001804:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001808:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

			totalGyroMeasurementY += gy;
 800180c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001810:	ed97 7a08 	vldr	s14, [r7, #32]
 8001814:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001818:	edc7 7a08 	vstr	s15, [r7, #32]

			totalGyroMeasurementZ += gz;
 800181c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001820:	ed97 7a07 	vldr	s14, [r7, #28]
 8001824:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001828:	edc7 7a07 	vstr	s15, [r7, #28]

			HAL_Delay(2);
 800182c:	2002      	movs	r0, #2
 800182e:	f000 fcaf 	bl	8002190 <HAL_Delay>
		for (int i = 0 ; i < CALIBRATION_SAMPLE_COUNT; i++)
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	3301      	adds	r3, #1
 8001836:	61bb      	str	r3, [r7, #24]
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800183e:	dbd4      	blt.n	80017ea <Offset_Calibration_Gyro+0x22>
		}

		offset->gx = totalGyroMeasurementX / CALIBRATION_SAMPLE_COUNT;
 8001840:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001844:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001880 <Offset_Calibration_Gyro+0xb8>
 8001848:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	edc3 7a03 	vstr	s15, [r3, #12]
		offset->gy = totalGyroMeasurementY / CALIBRATION_SAMPLE_COUNT;
 8001852:	ed97 7a08 	vldr	s14, [r7, #32]
 8001856:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001880 <Offset_Calibration_Gyro+0xb8>
 800185a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	edc3 7a04 	vstr	s15, [r3, #16]
		offset->gz = totalGyroMeasurementZ / CALIBRATION_SAMPLE_COUNT;
 8001864:	ed97 7a07 	vldr	s14, [r7, #28]
 8001868:	eddf 6a05 	vldr	s13, [pc, #20]	; 8001880 <Offset_Calibration_Gyro+0xb8>
 800186c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8001876:	bf00      	nop
 8001878:	3728      	adds	r7, #40	; 0x28
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	43fa0000 	.word	0x43fa0000

08001884 <Offset_Calibration_All>:

void Offset_Calibration_All(I2C_HandleTypeDef *hi2c, SensorOffset_t *offset)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
	Offset_Calibration_Accel(hi2c, offset);
 800188e:	6839      	ldr	r1, [r7, #0]
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7ff ff3b 	bl	800170c <Offset_Calibration_Accel>
	Offset_Calibration_Gyro(hi2c, offset);
 8001896:	6839      	ldr	r1, [r7, #0]
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff ff95 	bl	80017c8 <Offset_Calibration_Gyro>
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <MPU6050_GET_REAL_ACCEL>:

HAL_StatusTypeDef MPU6050_GET_REAL_ACCEL(I2C_HandleTypeDef *h12c, SensorOffset_t *offset, float *realAx, float *realAy, float *realAz)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b088      	sub	sp, #32
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	60f8      	str	r0, [r7, #12]
 80018ae:	60b9      	str	r1, [r7, #8]
 80018b0:	607a      	str	r2, [r7, #4]
 80018b2:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef ret;
	float raw_ax, raw_ay, raw_az;

	ret = MPU6050_CONVERT_ACCELL(h12c, &raw_ax, &raw_ay, &raw_az);
 80018b4:	f107 0310 	add.w	r3, r7, #16
 80018b8:	f107 0214 	add.w	r2, r7, #20
 80018bc:	f107 0118 	add.w	r1, r7, #24
 80018c0:	68f8      	ldr	r0, [r7, #12]
 80018c2:	f7ff fdff 	bl	80014c4 <MPU6050_CONVERT_ACCELL>
 80018c6:	4603      	mov	r3, r0
 80018c8:	77fb      	strb	r3, [r7, #31]
	if(ret != HAL_OK) return ret;
 80018ca:	7ffb      	ldrb	r3, [r7, #31]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MPU6050_GET_REAL_ACCEL+0x2e>
 80018d0:	7ffb      	ldrb	r3, [r7, #31]
 80018d2:	e01e      	b.n	8001912 <MPU6050_GET_REAL_ACCEL+0x6c>

	*realAx = raw_ax - offset->ax;
 80018d4:	ed97 7a06 	vldr	s14, [r7, #24]
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	edd3 7a00 	vldr	s15, [r3]
 80018de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	edc3 7a00 	vstr	s15, [r3]
	*realAy = raw_ay - offset->ay;
 80018e8:	ed97 7a05 	vldr	s14, [r7, #20]
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80018f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	edc3 7a00 	vstr	s15, [r3]
	*realAz = raw_az - offset->az;
 80018fc:	ed97 7a04 	vldr	s14, [r7, #16]
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	edd3 7a02 	vldr	s15, [r3, #8]
 8001906:	ee77 7a67 	vsub.f32	s15, s14, s15
 800190a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800190c:	edc3 7a00 	vstr	s15, [r3]

	return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3720      	adds	r7, #32
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <MPU6050_GET_REAL_GYRO>:

HAL_StatusTypeDef MPU6050_GET_REAL_GYRO(I2C_HandleTypeDef *h12c, SensorOffset_t *offset, float *realGx, float *realGy, float *realGz)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b088      	sub	sp, #32
 800191e:	af00      	add	r7, sp, #0
 8001920:	60f8      	str	r0, [r7, #12]
 8001922:	60b9      	str	r1, [r7, #8]
 8001924:	607a      	str	r2, [r7, #4]
 8001926:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef ret;
	float raw_gx, raw_gy, raw_gz;

	ret = MPU6050_CONVERT_GYRO(h12c, &raw_gx, &raw_gy, &raw_gz);
 8001928:	f107 0310 	add.w	r3, r7, #16
 800192c:	f107 0214 	add.w	r2, r7, #20
 8001930:	f107 0118 	add.w	r1, r7, #24
 8001934:	68f8      	ldr	r0, [r7, #12]
 8001936:	f7ff fe3f 	bl	80015b8 <MPU6050_CONVERT_GYRO>
 800193a:	4603      	mov	r3, r0
 800193c:	77fb      	strb	r3, [r7, #31]
	if(ret != HAL_OK) return ret;
 800193e:	7ffb      	ldrb	r3, [r7, #31]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MPU6050_GET_REAL_GYRO+0x2e>
 8001944:	7ffb      	ldrb	r3, [r7, #31]
 8001946:	e01e      	b.n	8001986 <MPU6050_GET_REAL_GYRO+0x6c>

	*realGx = raw_gx - offset->gx;
 8001948:	ed97 7a06 	vldr	s14, [r7, #24]
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001952:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	edc3 7a00 	vstr	s15, [r3]
	*realGy = raw_gy - offset->gy;
 800195c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	edd3 7a04 	vldr	s15, [r3, #16]
 8001966:	ee77 7a67 	vsub.f32	s15, s14, s15
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	edc3 7a00 	vstr	s15, [r3]
	*realGz = raw_gz - offset->gz;
 8001970:	ed97 7a04 	vldr	s14, [r7, #16]
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	edd3 7a05 	vldr	s15, [r3, #20]
 800197a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800197e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001980:	edc3 7a00 	vstr	s15, [r3]

	return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3720      	adds	r7, #32
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
	...

08001990 <GET_ANGLE_WITH_ACCELL>:

HAL_StatusTypeDef GET_ANGLE_WITH_ACCELL(I2C_HandleTypeDef *h12c, SensorOffset_t *offset, double *roll_degree, double *pitch_degree)
{
 8001990:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001994:	b090      	sub	sp, #64	; 0x40
 8001996:	af02      	add	r7, sp, #8
 8001998:	60f8      	str	r0, [r7, #12]
 800199a:	60b9      	str	r1, [r7, #8]
 800199c:	607a      	str	r2, [r7, #4]
 800199e:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef ret;
	float realAx, realAy, realAz;
	double radian_roll, radian_pitch;

	ret = MPU6050_GET_REAL_ACCEL(h12c, offset, &realAx, &realAy, &realAz);
 80019a0:	f107 0118 	add.w	r1, r7, #24
 80019a4:	f107 021c 	add.w	r2, r7, #28
 80019a8:	f107 0314 	add.w	r3, r7, #20
 80019ac:	9300      	str	r3, [sp, #0]
 80019ae:	460b      	mov	r3, r1
 80019b0:	68b9      	ldr	r1, [r7, #8]
 80019b2:	68f8      	ldr	r0, [r7, #12]
 80019b4:	f7ff ff77 	bl	80018a6 <MPU6050_GET_REAL_ACCEL>
 80019b8:	4603      	mov	r3, r0
 80019ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if(ret != HAL_OK) return ret;
 80019be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d002      	beq.n	80019cc <GET_ANGLE_WITH_ACCELL+0x3c>
 80019c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80019ca:	e06f      	b.n	8001aac <GET_ANGLE_WITH_ACCELL+0x11c>

	radian_roll = (double)atan2(realAy, realAz) ;
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7fe fd5e 	bl	8000490 <__aeabi_f2d>
 80019d4:	4604      	mov	r4, r0
 80019d6:	460d      	mov	r5, r1
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7fe fd58 	bl	8000490 <__aeabi_f2d>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	ec43 2b11 	vmov	d1, r2, r3
 80019e8:	ec45 4b10 	vmov	d0, r4, r5
 80019ec:	f002 fc3e 	bl	800426c <atan2>
 80019f0:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28

	radian_pitch = (double)atan2(-realAx, sqrt(pow(realAy , 2) + pow(realAz, 2)));
 80019f4:	edd7 7a07 	vldr	s15, [r7, #28]
 80019f8:	eef1 7a67 	vneg.f32	s15, s15
 80019fc:	ee17 3a90 	vmov	r3, s15
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7fe fd45 	bl	8000490 <__aeabi_f2d>
 8001a06:	4604      	mov	r4, r0
 8001a08:	460d      	mov	r5, r1
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7fe fd3f 	bl	8000490 <__aeabi_f2d>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	ed9f 1b28 	vldr	d1, [pc, #160]	; 8001ab8 <GET_ANGLE_WITH_ACCELL+0x128>
 8001a1a:	ec43 2b10 	vmov	d0, r2, r3
 8001a1e:	f002 fc27 	bl	8004270 <pow>
 8001a22:	ec59 8b10 	vmov	r8, r9, d0
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7fe fd31 	bl	8000490 <__aeabi_f2d>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	460b      	mov	r3, r1
 8001a32:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8001ab8 <GET_ANGLE_WITH_ACCELL+0x128>
 8001a36:	ec43 2b10 	vmov	d0, r2, r3
 8001a3a:	f002 fc19 	bl	8004270 <pow>
 8001a3e:	ec53 2b10 	vmov	r2, r3, d0
 8001a42:	4640      	mov	r0, r8
 8001a44:	4649      	mov	r1, r9
 8001a46:	f7fe fbc5 	bl	80001d4 <__adddf3>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	ec43 2b17 	vmov	d7, r2, r3
 8001a52:	eeb0 0a47 	vmov.f32	s0, s14
 8001a56:	eef0 0a67 	vmov.f32	s1, s15
 8001a5a:	f002 fc79 	bl	8004350 <sqrt>
 8001a5e:	eeb0 7a40 	vmov.f32	s14, s0
 8001a62:	eef0 7a60 	vmov.f32	s15, s1
 8001a66:	eeb0 1a47 	vmov.f32	s2, s14
 8001a6a:	eef0 1a67 	vmov.f32	s3, s15
 8001a6e:	ec45 4b10 	vmov	d0, r4, r5
 8001a72:	f002 fbfb 	bl	800426c <atan2>
 8001a76:	ed87 0b08 	vstr	d0, [r7, #32]

	*roll_degree = radian_roll * (180.0f / M_PI);
 8001a7a:	a311      	add	r3, pc, #68	; (adr r3, 8001ac0 <GET_ANGLE_WITH_ACCELL+0x130>)
 8001a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a80:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a84:	f7fe fd5c 	bl	8000540 <__aeabi_dmul>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	6879      	ldr	r1, [r7, #4]
 8001a8e:	e9c1 2300 	strd	r2, r3, [r1]

	*pitch_degree = radian_pitch * (180.0f / M_PI);
 8001a92:	a30b      	add	r3, pc, #44	; (adr r3, 8001ac0 <GET_ANGLE_WITH_ACCELL+0x130>)
 8001a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a98:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a9c:	f7fe fd50 	bl	8000540 <__aeabi_dmul>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	6839      	ldr	r1, [r7, #0]
 8001aa6:	e9c1 2300 	strd	r2, r3, [r1]

	return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3738      	adds	r7, #56	; 0x38
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ab6:	bf00      	nop
 8001ab8:	00000000 	.word	0x00000000
 8001abc:	40000000 	.word	0x40000000
 8001ac0:	1a63c1f8 	.word	0x1a63c1f8
 8001ac4:	404ca5dc 	.word	0x404ca5dc

08001ac8 <GET_ANGLE_WITH_GYRO>:

HAL_StatusTypeDef GET_ANGLE_WITH_GYRO(I2C_HandleTypeDef *hi2c, SensorOffset_t *offset, AngleState_t *angle)
{
 8001ac8:	b5b0      	push	{r4, r5, r7, lr}
 8001aca:	b08c      	sub	sp, #48	; 0x30
 8001acc:	af02      	add	r7, sp, #8
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef ret;
	float realGx, realGy, realGz;
	uint32_t current_time, delta_time;

	ret = MPU6050_GET_REAL_GYRO(hi2c, offset, &realGx, &realGy, &realGz);
 8001ad4:	f107 0114 	add.w	r1, r7, #20
 8001ad8:	f107 0218 	add.w	r2, r7, #24
 8001adc:	f107 0310 	add.w	r3, r7, #16
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	68b9      	ldr	r1, [r7, #8]
 8001ae6:	68f8      	ldr	r0, [r7, #12]
 8001ae8:	f7ff ff17 	bl	800191a <MPU6050_GET_REAL_GYRO>
 8001aec:	4603      	mov	r3, r0
 8001aee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if(ret != HAL_OK) return ret;
 8001af2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d002      	beq.n	8001b00 <GET_ANGLE_WITH_GYRO+0x38>
 8001afa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001afe:	e059      	b.n	8001bb4 <GET_ANGLE_WITH_GYRO+0xec>

	current_time = HAL_GetTick();
 8001b00:	f000 fb3a 	bl	8002178 <HAL_GetTick>
 8001b04:	6238      	str	r0, [r7, #32]
	delta_time = (current_time - angle->previous_time) / 1000.0f;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a1b      	ldr	r3, [r3, #32]
 8001b0a:	6a3a      	ldr	r2, [r7, #32]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	ee07 3a90 	vmov	s15, r3
 8001b12:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b16:	eddf 6a29 	vldr	s13, [pc, #164]	; 8001bbc <GET_ANGLE_WITH_GYRO+0xf4>
 8001b1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b22:	ee17 3a90 	vmov	r3, s15
 8001b26:	61fb      	str	r3, [r7, #28]

	angle->roll  = angle->previous_roll  + (realGx * delta_time);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	ee07 3a90 	vmov	s15, r3
 8001b34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b38:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b40:	ee17 0a90 	vmov	r0, s15
 8001b44:	f7fe fca4 	bl	8000490 <__aeabi_f2d>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	4620      	mov	r0, r4
 8001b4e:	4629      	mov	r1, r5
 8001b50:	f7fe fb40 	bl	80001d4 <__adddf3>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	6879      	ldr	r1, [r7, #4]
 8001b5a:	e9c1 2300 	strd	r2, r3, [r1]
	angle->pitch = angle->previous_pitch + (realGy * delta_time);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	ee07 3a90 	vmov	s15, r3
 8001b6a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b6e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b76:	ee17 0a90 	vmov	r0, s15
 8001b7a:	f7fe fc89 	bl	8000490 <__aeabi_f2d>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	4620      	mov	r0, r4
 8001b84:	4629      	mov	r1, r5
 8001b86:	f7fe fb25 	bl	80001d4 <__adddf3>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	e9c1 2302 	strd	r2, r3, [r1, #8]

	angle->previous_roll = angle->roll;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    angle->previous_pitch = angle->pitch;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001ba6:	6879      	ldr	r1, [r7, #4]
 8001ba8:	e9c1 2306 	strd	r2, r3, [r1, #24]
    angle->previous_time = current_time;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a3a      	ldr	r2, [r7, #32]
 8001bb0:	621a      	str	r2, [r3, #32]

    return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3728      	adds	r7, #40	; 0x28
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bdb0      	pop	{r4, r5, r7, pc}
 8001bbc:	447a0000 	.word	0x447a0000

08001bc0 <Kalman_Init>:

void Kalman_Init(KalmanState_t *kalman,	double angle, float bias, float Q_angle,float Q_bias,
float R_measure, float P[2][2])
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08a      	sub	sp, #40	; 0x28
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	61f8      	str	r0, [r7, #28]
 8001bc8:	ed87 0b04 	vstr	d0, [r7, #16]
 8001bcc:	ed87 1a06 	vstr	s2, [r7, #24]
 8001bd0:	edc7 1a03 	vstr	s3, [r7, #12]
 8001bd4:	ed87 2a02 	vstr	s4, [r7, #8]
 8001bd8:	edc7 2a01 	vstr	s5, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
	kalman->angle = angle;
 8001bde:	69f9      	ldr	r1, [r7, #28]
 8001be0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001be4:	e9c1 2300 	strd	r2, r3, [r1]

	kalman->bias = bias;
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	611a      	str	r2, [r3, #16]

	kalman->Q_angle = Q_angle;
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	68fa      	ldr	r2, [r7, #12]
 8001bf2:	615a      	str	r2, [r3, #20]

	kalman->Q_bias = Q_bias;
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	68ba      	ldr	r2, [r7, #8]
 8001bf8:	619a      	str	r2, [r3, #24]

	kalman->R_measure = R_measure;
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	61da      	str	r2, [r3, #28]

	kalman->previous_time = HAL_GetTick();
 8001c00:	f000 faba 	bl	8002178 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	631a      	str	r2, [r3, #48]	; 0x30

	for(int i = 0 ; i < 2; i++)
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c0e:	e01c      	b.n	8001c4a <Kalman_Init+0x8a>
	{
		for(int j = 0; j < 2; j++)
 8001c10:	2300      	movs	r3, #0
 8001c12:	623b      	str	r3, [r7, #32]
 8001c14:	e013      	b.n	8001c3e <Kalman_Init+0x7e>
		{
			kalman->P[i][j] = P[i][j];
 8001c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	441a      	add	r2, r3
 8001c1e:	6a3b      	ldr	r3, [r7, #32]
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4413      	add	r3, r2
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	69f9      	ldr	r1, [r7, #28]
 8001c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2a:	0058      	lsls	r0, r3, #1
 8001c2c:	6a3b      	ldr	r3, [r7, #32]
 8001c2e:	4403      	add	r3, r0
 8001c30:	3308      	adds	r3, #8
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	440b      	add	r3, r1
 8001c36:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < 2; j++)
 8001c38:	6a3b      	ldr	r3, [r7, #32]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	623b      	str	r3, [r7, #32]
 8001c3e:	6a3b      	ldr	r3, [r7, #32]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	dde8      	ble.n	8001c16 <Kalman_Init+0x56>
	for(int i = 0 ; i < 2; i++)
 8001c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c46:	3301      	adds	r3, #1
 8001c48:	627b      	str	r3, [r7, #36]	; 0x24
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	dddf      	ble.n	8001c10 <Kalman_Init+0x50>
		}
	}
}
 8001c50:	bf00      	nop
 8001c52:	bf00      	nop
 8001c54:	3728      	adds	r7, #40	; 0x28
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
	...

08001c5c <Kalman_Prediction>:

// Kalman filtresi tahmin aşaması
double Kalman_Prediction(KalmanState_t *kalman, I2C_HandleTypeDef *hi2c, double *angle_out, float gx_dps)
{
 8001c5c:	b5b0      	push	{r4, r5, r7, lr}
 8001c5e:	b088      	sub	sp, #32
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
 8001c68:	ed87 0a00 	vstr	s0, [r7]
	uint32_t current_time;
	float rate, dt;

	current_time = HAL_GetTick();
 8001c6c:	f000 fa84 	bl	8002178 <HAL_GetTick>
 8001c70:	61f8      	str	r0, [r7, #28]

	dt = (float)(current_time - kalman->previous_time) / 1000.0f;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	69fa      	ldr	r2, [r7, #28]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	ee07 3a90 	vmov	s15, r3
 8001c7e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c82:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001da4 <Kalman_Prediction+0x148>
 8001c86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c8a:	edc7 7a06 	vstr	s15, [r7, #24]

	rate = gx_dps - kalman->bias;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c94:	ed97 7a00 	vldr	s14, [r7]
 8001c98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c9c:	edc7 7a05 	vstr	s15, [r7, #20]

	kalman->angle = kalman->previous_angle + (dt * rate);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001ca6:	ed97 7a06 	vldr	s14, [r7, #24]
 8001caa:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cb2:	ee17 0a90 	vmov	r0, s15
 8001cb6:	f7fe fbeb 	bl	8000490 <__aeabi_f2d>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	4620      	mov	r0, r4
 8001cc0:	4629      	mov	r1, r5
 8001cc2:	f7fe fa87 	bl	80001d4 <__adddf3>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	68f9      	ldr	r1, [r7, #12]
 8001ccc:	e9c1 2300 	strd	r2, r3, [r1]

	kalman->P[0][0] += dt * (dt*kalman->P[1][1] - kalman->P[0][1] - kalman->P[1][0] + kalman->Q_angle);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	ed93 7a08 	vldr	s14, [r3, #32]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8001cdc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ce0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001cea:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001cf4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	edd3 7a05 	vldr	s15, [r3, #20]
 8001cfe:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001d02:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	edc3 7a08 	vstr	s15, [r3, #32]
	kalman->P[0][1] -= dt * kalman->P[1][1];
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8001d20:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	kalman->P[1][0] -= dt * kalman->P[1][1];
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8001d3e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	kalman->P[1][1] += kalman->Q_bias * dt;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	edd3 6a06 	vldr	s13, [r3, #24]
 8001d5c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	kalman->previous_time = current_time;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	69fa      	ldr	r2, [r7, #28]
 8001d72:	631a      	str	r2, [r3, #48]	; 0x30
	kalman->previous_angle = kalman->angle;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7a:	68f9      	ldr	r1, [r7, #12]
 8001d7c:	e9c1 2302 	strd	r2, r3, [r1, #8]

	*angle_out = kalman->angle;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	e9c1 2300 	strd	r2, r3, [r1]
	return *angle_out;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d92:	ec43 2b17 	vmov	d7, r2, r3

}
 8001d96:	eeb0 0a47 	vmov.f32	s0, s14
 8001d9a:	eef0 0a67 	vmov.f32	s1, s15
 8001d9e:	3720      	adds	r7, #32
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bdb0      	pop	{r4, r5, r7, pc}
 8001da4:	447a0000 	.word	0x447a0000

08001da8 <Kalman_Update>:

// Kalman filtresi güncelleme aşaması
double Kalman_Update(I2C_HandleTypeDef *hi2c, KalmanState_t *kalman, SensorOffset_t *offset, double *angle_out, float measured_angle)
{
 8001da8:	b5b0      	push	{r4, r5, r7, lr}
 8001daa:	b08c      	sub	sp, #48	; 0x30
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6178      	str	r0, [r7, #20]
 8001db0:	6139      	str	r1, [r7, #16]
 8001db2:	60fa      	str	r2, [r7, #12]
 8001db4:	60bb      	str	r3, [r7, #8]
 8001db6:	ed87 0a01 	vstr	s0, [r7, #4]
	float y, S;

	y = measured_angle - kalman->angle;       // Tahmin ile ölçüm arasındaki fark.
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7fe fb68 	bl	8000490 <__aeabi_f2d>
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc6:	f7fe fa03 	bl	80001d0 <__aeabi_dsub>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
 8001dce:	4610      	mov	r0, r2
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	f7fe fe65 	bl	8000aa0 <__aeabi_d2f>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	62fb      	str	r3, [r7, #44]	; 0x2c

	S = kalman->P[0][0] + kalman->R_measure;  //
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	ed93 7a08 	vldr	s14, [r3, #32]
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	edd3 7a07 	vldr	s15, [r3, #28]
 8001de6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dea:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	float K[2];
	K[0] = kalman->P[0][0] / S;
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	edd3 6a08 	vldr	s13, [r3, #32]
 8001df4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001df8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dfc:	edc7 7a06 	vstr	s15, [r7, #24]
	K[1] = kalman->P[1][0] / S;
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8001e06:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001e0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e0e:	edc7 7a07 	vstr	s15, [r7, #28]

	kalman->angle += K[0] * y;               // açıyı düzeltmek için kazanç
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001e18:	ed97 7a06 	vldr	s14, [r7, #24]
 8001e1c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001e20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e24:	ee17 0a90 	vmov	r0, s15
 8001e28:	f7fe fb32 	bl	8000490 <__aeabi_f2d>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	4620      	mov	r0, r4
 8001e32:	4629      	mov	r1, r5
 8001e34:	f7fe f9ce 	bl	80001d4 <__adddf3>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	6939      	ldr	r1, [r7, #16]
 8001e3e:	e9c1 2300 	strd	r2, r3, [r1]
	kalman->bias  += K[1] * y;               // bias düzeltmesi için kazanç
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	ed93 7a04 	vldr	s14, [r3, #16]
 8001e48:	edd7 6a07 	vldr	s13, [r7, #28]
 8001e4c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001e50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	edc3 7a04 	vstr	s15, [r3, #16]

	float P00_temp = kalman->P[0][0];
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	6a1b      	ldr	r3, [r3, #32]
 8001e62:	627b      	str	r3, [r7, #36]	; 0x24
	float P01_temp = kalman->P[0][1];
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e68:	623b      	str	r3, [r7, #32]

	kalman->P[0][0] -= K[0] * P00_temp;
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	ed93 7a08 	vldr	s14, [r3, #32]
 8001e70:	edd7 6a06 	vldr	s13, [r7, #24]
 8001e74:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001e78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	edc3 7a08 	vstr	s15, [r3, #32]
	kalman->P[0][1] -= K[0] * P01_temp;
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001e8c:	edd7 6a06 	vldr	s13, [r7, #24]
 8001e90:	edd7 7a08 	vldr	s15, [r7, #32]
 8001e94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	kalman->P[1][0] -= K[1] * P00_temp;
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001ea8:	edd7 6a07 	vldr	s13, [r7, #28]
 8001eac:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001eb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	kalman->P[1][1] -= K[1] * P01_temp;
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001ec4:	edd7 6a07 	vldr	s13, [r7, #28]
 8001ec8:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ecc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ed0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	*angle_out = kalman->angle;
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee0:	68b9      	ldr	r1, [r7, #8]
 8001ee2:	e9c1 2300 	strd	r2, r3, [r1]

	return *angle_out;
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eec:	ec43 2b17 	vmov	d7, r2, r3
}
 8001ef0:	eeb0 0a47 	vmov.f32	s0, s14
 8001ef4:	eef0 0a67 	vmov.f32	s1, s15
 8001ef8:	3730      	adds	r7, #48	; 0x30
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001f00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	607b      	str	r3, [r7, #4]
 8001f0a:	4b10      	ldr	r3, [pc, #64]	; (8001f4c <HAL_MspInit+0x4c>)
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0e:	4a0f      	ldr	r2, [pc, #60]	; (8001f4c <HAL_MspInit+0x4c>)
 8001f10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f14:	6453      	str	r3, [r2, #68]	; 0x44
 8001f16:	4b0d      	ldr	r3, [pc, #52]	; (8001f4c <HAL_MspInit+0x4c>)
 8001f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f1e:	607b      	str	r3, [r7, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	603b      	str	r3, [r7, #0]
 8001f26:	4b09      	ldr	r3, [pc, #36]	; (8001f4c <HAL_MspInit+0x4c>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	4a08      	ldr	r2, [pc, #32]	; (8001f4c <HAL_MspInit+0x4c>)
 8001f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f30:	6413      	str	r3, [r2, #64]	; 0x40
 8001f32:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <HAL_MspInit+0x4c>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3a:	603b      	str	r3, [r7, #0]
 8001f3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	40023800 	.word	0x40023800

08001f50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08a      	sub	sp, #40	; 0x28
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f58:	f107 0314 	add.w	r3, r7, #20
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
 8001f66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a19      	ldr	r2, [pc, #100]	; (8001fd4 <HAL_I2C_MspInit+0x84>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d12b      	bne.n	8001fca <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	613b      	str	r3, [r7, #16]
 8001f76:	4b18      	ldr	r3, [pc, #96]	; (8001fd8 <HAL_I2C_MspInit+0x88>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	4a17      	ldr	r2, [pc, #92]	; (8001fd8 <HAL_I2C_MspInit+0x88>)
 8001f7c:	f043 0302 	orr.w	r3, r3, #2
 8001f80:	6313      	str	r3, [r2, #48]	; 0x30
 8001f82:	4b15      	ldr	r3, [pc, #84]	; (8001fd8 <HAL_I2C_MspInit+0x88>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	613b      	str	r3, [r7, #16]
 8001f8c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f8e:	23c0      	movs	r3, #192	; 0xc0
 8001f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f92:	2312      	movs	r3, #18
 8001f94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f9e:	2304      	movs	r3, #4
 8001fa0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa2:	f107 0314 	add.w	r3, r7, #20
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	480c      	ldr	r0, [pc, #48]	; (8001fdc <HAL_I2C_MspInit+0x8c>)
 8001faa:	f000 f9fb 	bl	80023a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <HAL_I2C_MspInit+0x88>)
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	4a08      	ldr	r2, [pc, #32]	; (8001fd8 <HAL_I2C_MspInit+0x88>)
 8001fb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001fbe:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <HAL_I2C_MspInit+0x88>)
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001fca:	bf00      	nop
 8001fcc:	3728      	adds	r7, #40	; 0x28
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40005400 	.word	0x40005400
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	40020400 	.word	0x40020400

08001fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fe4:	e7fe      	b.n	8001fe4 <NMI_Handler+0x4>

08001fe6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fea:	e7fe      	b.n	8001fea <HardFault_Handler+0x4>

08001fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ff0:	e7fe      	b.n	8001ff0 <MemManage_Handler+0x4>

08001ff2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ff6:	e7fe      	b.n	8001ff6 <BusFault_Handler+0x4>

08001ff8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ffc:	e7fe      	b.n	8001ffc <UsageFault_Handler+0x4>

08001ffe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ffe:	b480      	push	{r7}
 8002000:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800201a:	b480      	push	{r7}
 800201c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800202c:	f000 f890 	bl	8002150 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002030:	bf00      	nop
 8002032:	bd80      	pop	{r7, pc}

08002034 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002038:	4b06      	ldr	r3, [pc, #24]	; (8002054 <SystemInit+0x20>)
 800203a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800203e:	4a05      	ldr	r2, [pc, #20]	; (8002054 <SystemInit+0x20>)
 8002040:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002044:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002058:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002090 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800205c:	480d      	ldr	r0, [pc, #52]	; (8002094 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800205e:	490e      	ldr	r1, [pc, #56]	; (8002098 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002060:	4a0e      	ldr	r2, [pc, #56]	; (800209c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002062:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002064:	e002      	b.n	800206c <LoopCopyDataInit>

08002066 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002066:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002068:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800206a:	3304      	adds	r3, #4

0800206c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800206c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800206e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002070:	d3f9      	bcc.n	8002066 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002072:	4a0b      	ldr	r2, [pc, #44]	; (80020a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002074:	4c0b      	ldr	r4, [pc, #44]	; (80020a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002076:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002078:	e001      	b.n	800207e <LoopFillZerobss>

0800207a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800207a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800207c:	3204      	adds	r2, #4

0800207e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800207e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002080:	d3fb      	bcc.n	800207a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002082:	f7ff ffd7 	bl	8002034 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002086:	f002 f8cd 	bl	8004224 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800208a:	f7fe ff01 	bl	8000e90 <main>
  bx  lr    
 800208e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002090:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002094:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002098:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800209c:	080056f8 	.word	0x080056f8
  ldr r2, =_sbss
 80020a0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80020a4:	20000344 	.word	0x20000344

080020a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020a8:	e7fe      	b.n	80020a8 <ADC_IRQHandler>
	...

080020ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020b0:	4b0e      	ldr	r3, [pc, #56]	; (80020ec <HAL_Init+0x40>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a0d      	ldr	r2, [pc, #52]	; (80020ec <HAL_Init+0x40>)
 80020b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020bc:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <HAL_Init+0x40>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a0a      	ldr	r2, [pc, #40]	; (80020ec <HAL_Init+0x40>)
 80020c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020c8:	4b08      	ldr	r3, [pc, #32]	; (80020ec <HAL_Init+0x40>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a07      	ldr	r2, [pc, #28]	; (80020ec <HAL_Init+0x40>)
 80020ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020d4:	2003      	movs	r0, #3
 80020d6:	f000 f931 	bl	800233c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020da:	200f      	movs	r0, #15
 80020dc:	f000 f808 	bl	80020f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020e0:	f7ff ff0e 	bl	8001f00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	40023c00 	.word	0x40023c00

080020f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020f8:	4b12      	ldr	r3, [pc, #72]	; (8002144 <HAL_InitTick+0x54>)
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	4b12      	ldr	r3, [pc, #72]	; (8002148 <HAL_InitTick+0x58>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	4619      	mov	r1, r3
 8002102:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002106:	fbb3 f3f1 	udiv	r3, r3, r1
 800210a:	fbb2 f3f3 	udiv	r3, r2, r3
 800210e:	4618      	mov	r0, r3
 8002110:	f000 f93b 	bl	800238a <HAL_SYSTICK_Config>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e00e      	b.n	800213c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b0f      	cmp	r3, #15
 8002122:	d80a      	bhi.n	800213a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002124:	2200      	movs	r2, #0
 8002126:	6879      	ldr	r1, [r7, #4]
 8002128:	f04f 30ff 	mov.w	r0, #4294967295
 800212c:	f000 f911 	bl	8002352 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002130:	4a06      	ldr	r2, [pc, #24]	; (800214c <HAL_InitTick+0x5c>)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002136:	2300      	movs	r3, #0
 8002138:	e000      	b.n	800213c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
}
 800213c:	4618      	mov	r0, r3
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	20000014 	.word	0x20000014
 8002148:	2000001c 	.word	0x2000001c
 800214c:	20000018 	.word	0x20000018

08002150 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002154:	4b06      	ldr	r3, [pc, #24]	; (8002170 <HAL_IncTick+0x20>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	461a      	mov	r2, r3
 800215a:	4b06      	ldr	r3, [pc, #24]	; (8002174 <HAL_IncTick+0x24>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4413      	add	r3, r2
 8002160:	4a04      	ldr	r2, [pc, #16]	; (8002174 <HAL_IncTick+0x24>)
 8002162:	6013      	str	r3, [r2, #0]
}
 8002164:	bf00      	nop
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	2000001c 	.word	0x2000001c
 8002174:	20000208 	.word	0x20000208

08002178 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  return uwTick;
 800217c:	4b03      	ldr	r3, [pc, #12]	; (800218c <HAL_GetTick+0x14>)
 800217e:	681b      	ldr	r3, [r3, #0]
}
 8002180:	4618      	mov	r0, r3
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	20000208 	.word	0x20000208

08002190 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002198:	f7ff ffee 	bl	8002178 <HAL_GetTick>
 800219c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a8:	d005      	beq.n	80021b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021aa:	4b0a      	ldr	r3, [pc, #40]	; (80021d4 <HAL_Delay+0x44>)
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	461a      	mov	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	4413      	add	r3, r2
 80021b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021b6:	bf00      	nop
 80021b8:	f7ff ffde 	bl	8002178 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d8f7      	bhi.n	80021b8 <HAL_Delay+0x28>
  {
  }
}
 80021c8:	bf00      	nop
 80021ca:	bf00      	nop
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	2000001c 	.word	0x2000001c

080021d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021e8:	4b0c      	ldr	r3, [pc, #48]	; (800221c <__NVIC_SetPriorityGrouping+0x44>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021f4:	4013      	ands	r3, r2
 80021f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002200:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002208:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800220a:	4a04      	ldr	r2, [pc, #16]	; (800221c <__NVIC_SetPriorityGrouping+0x44>)
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	60d3      	str	r3, [r2, #12]
}
 8002210:	bf00      	nop
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	e000ed00 	.word	0xe000ed00

08002220 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002224:	4b04      	ldr	r3, [pc, #16]	; (8002238 <__NVIC_GetPriorityGrouping+0x18>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	0a1b      	lsrs	r3, r3, #8
 800222a:	f003 0307 	and.w	r3, r3, #7
}
 800222e:	4618      	mov	r0, r3
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	e000ed00 	.word	0xe000ed00

0800223c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	6039      	str	r1, [r7, #0]
 8002246:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224c:	2b00      	cmp	r3, #0
 800224e:	db0a      	blt.n	8002266 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	b2da      	uxtb	r2, r3
 8002254:	490c      	ldr	r1, [pc, #48]	; (8002288 <__NVIC_SetPriority+0x4c>)
 8002256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225a:	0112      	lsls	r2, r2, #4
 800225c:	b2d2      	uxtb	r2, r2
 800225e:	440b      	add	r3, r1
 8002260:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002264:	e00a      	b.n	800227c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	b2da      	uxtb	r2, r3
 800226a:	4908      	ldr	r1, [pc, #32]	; (800228c <__NVIC_SetPriority+0x50>)
 800226c:	79fb      	ldrb	r3, [r7, #7]
 800226e:	f003 030f 	and.w	r3, r3, #15
 8002272:	3b04      	subs	r3, #4
 8002274:	0112      	lsls	r2, r2, #4
 8002276:	b2d2      	uxtb	r2, r2
 8002278:	440b      	add	r3, r1
 800227a:	761a      	strb	r2, [r3, #24]
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	e000e100 	.word	0xe000e100
 800228c:	e000ed00 	.word	0xe000ed00

08002290 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002290:	b480      	push	{r7}
 8002292:	b089      	sub	sp, #36	; 0x24
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f003 0307 	and.w	r3, r3, #7
 80022a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	f1c3 0307 	rsb	r3, r3, #7
 80022aa:	2b04      	cmp	r3, #4
 80022ac:	bf28      	it	cs
 80022ae:	2304      	movcs	r3, #4
 80022b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	3304      	adds	r3, #4
 80022b6:	2b06      	cmp	r3, #6
 80022b8:	d902      	bls.n	80022c0 <NVIC_EncodePriority+0x30>
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	3b03      	subs	r3, #3
 80022be:	e000      	b.n	80022c2 <NVIC_EncodePriority+0x32>
 80022c0:	2300      	movs	r3, #0
 80022c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c4:	f04f 32ff 	mov.w	r2, #4294967295
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43da      	mvns	r2, r3
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	401a      	ands	r2, r3
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022d8:	f04f 31ff 	mov.w	r1, #4294967295
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	fa01 f303 	lsl.w	r3, r1, r3
 80022e2:	43d9      	mvns	r1, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e8:	4313      	orrs	r3, r2
         );
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3724      	adds	r7, #36	; 0x24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
	...

080022f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	3b01      	subs	r3, #1
 8002304:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002308:	d301      	bcc.n	800230e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800230a:	2301      	movs	r3, #1
 800230c:	e00f      	b.n	800232e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800230e:	4a0a      	ldr	r2, [pc, #40]	; (8002338 <SysTick_Config+0x40>)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3b01      	subs	r3, #1
 8002314:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002316:	210f      	movs	r1, #15
 8002318:	f04f 30ff 	mov.w	r0, #4294967295
 800231c:	f7ff ff8e 	bl	800223c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002320:	4b05      	ldr	r3, [pc, #20]	; (8002338 <SysTick_Config+0x40>)
 8002322:	2200      	movs	r2, #0
 8002324:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002326:	4b04      	ldr	r3, [pc, #16]	; (8002338 <SysTick_Config+0x40>)
 8002328:	2207      	movs	r2, #7
 800232a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	e000e010 	.word	0xe000e010

0800233c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f7ff ff47 	bl	80021d8 <__NVIC_SetPriorityGrouping>
}
 800234a:	bf00      	nop
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002352:	b580      	push	{r7, lr}
 8002354:	b086      	sub	sp, #24
 8002356:	af00      	add	r7, sp, #0
 8002358:	4603      	mov	r3, r0
 800235a:	60b9      	str	r1, [r7, #8]
 800235c:	607a      	str	r2, [r7, #4]
 800235e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002360:	2300      	movs	r3, #0
 8002362:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002364:	f7ff ff5c 	bl	8002220 <__NVIC_GetPriorityGrouping>
 8002368:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	68b9      	ldr	r1, [r7, #8]
 800236e:	6978      	ldr	r0, [r7, #20]
 8002370:	f7ff ff8e 	bl	8002290 <NVIC_EncodePriority>
 8002374:	4602      	mov	r2, r0
 8002376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800237a:	4611      	mov	r1, r2
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff ff5d 	bl	800223c <__NVIC_SetPriority>
}
 8002382:	bf00      	nop
 8002384:	3718      	adds	r7, #24
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b082      	sub	sp, #8
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7ff ffb0 	bl	80022f8 <SysTick_Config>
 8002398:	4603      	mov	r3, r0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
	...

080023a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b089      	sub	sp, #36	; 0x24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023b2:	2300      	movs	r3, #0
 80023b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ba:	2300      	movs	r3, #0
 80023bc:	61fb      	str	r3, [r7, #28]
 80023be:	e16b      	b.n	8002698 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023c0:	2201      	movs	r2, #1
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	4013      	ands	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	429a      	cmp	r2, r3
 80023da:	f040 815a 	bne.w	8002692 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f003 0303 	and.w	r3, r3, #3
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d005      	beq.n	80023f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d130      	bne.n	8002458 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	2203      	movs	r2, #3
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	43db      	mvns	r3, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4013      	ands	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	68da      	ldr	r2, [r3, #12]
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4313      	orrs	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800242c:	2201      	movs	r2, #1
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4013      	ands	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	091b      	lsrs	r3, r3, #4
 8002442:	f003 0201 	and.w	r2, r3, #1
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4313      	orrs	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f003 0303 	and.w	r3, r3, #3
 8002460:	2b03      	cmp	r3, #3
 8002462:	d017      	beq.n	8002494 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	2203      	movs	r2, #3
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4013      	ands	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4313      	orrs	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f003 0303 	and.w	r3, r3, #3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d123      	bne.n	80024e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	08da      	lsrs	r2, r3, #3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3208      	adds	r2, #8
 80024a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	220f      	movs	r2, #15
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4013      	ands	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	691a      	ldr	r2, [r3, #16]
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	08da      	lsrs	r2, r3, #3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	3208      	adds	r2, #8
 80024e2:	69b9      	ldr	r1, [r7, #24]
 80024e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	2203      	movs	r2, #3
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	43db      	mvns	r3, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4013      	ands	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f003 0203 	and.w	r2, r3, #3
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4313      	orrs	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002524:	2b00      	cmp	r3, #0
 8002526:	f000 80b4 	beq.w	8002692 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	4b60      	ldr	r3, [pc, #384]	; (80026b0 <HAL_GPIO_Init+0x30c>)
 8002530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002532:	4a5f      	ldr	r2, [pc, #380]	; (80026b0 <HAL_GPIO_Init+0x30c>)
 8002534:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002538:	6453      	str	r3, [r2, #68]	; 0x44
 800253a:	4b5d      	ldr	r3, [pc, #372]	; (80026b0 <HAL_GPIO_Init+0x30c>)
 800253c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002546:	4a5b      	ldr	r2, [pc, #364]	; (80026b4 <HAL_GPIO_Init+0x310>)
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	089b      	lsrs	r3, r3, #2
 800254c:	3302      	adds	r3, #2
 800254e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002552:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f003 0303 	and.w	r3, r3, #3
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	220f      	movs	r2, #15
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	43db      	mvns	r3, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4013      	ands	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a52      	ldr	r2, [pc, #328]	; (80026b8 <HAL_GPIO_Init+0x314>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d02b      	beq.n	80025ca <HAL_GPIO_Init+0x226>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a51      	ldr	r2, [pc, #324]	; (80026bc <HAL_GPIO_Init+0x318>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d025      	beq.n	80025c6 <HAL_GPIO_Init+0x222>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a50      	ldr	r2, [pc, #320]	; (80026c0 <HAL_GPIO_Init+0x31c>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d01f      	beq.n	80025c2 <HAL_GPIO_Init+0x21e>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a4f      	ldr	r2, [pc, #316]	; (80026c4 <HAL_GPIO_Init+0x320>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d019      	beq.n	80025be <HAL_GPIO_Init+0x21a>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a4e      	ldr	r2, [pc, #312]	; (80026c8 <HAL_GPIO_Init+0x324>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d013      	beq.n	80025ba <HAL_GPIO_Init+0x216>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a4d      	ldr	r2, [pc, #308]	; (80026cc <HAL_GPIO_Init+0x328>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d00d      	beq.n	80025b6 <HAL_GPIO_Init+0x212>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a4c      	ldr	r2, [pc, #304]	; (80026d0 <HAL_GPIO_Init+0x32c>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d007      	beq.n	80025b2 <HAL_GPIO_Init+0x20e>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a4b      	ldr	r2, [pc, #300]	; (80026d4 <HAL_GPIO_Init+0x330>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d101      	bne.n	80025ae <HAL_GPIO_Init+0x20a>
 80025aa:	2307      	movs	r3, #7
 80025ac:	e00e      	b.n	80025cc <HAL_GPIO_Init+0x228>
 80025ae:	2308      	movs	r3, #8
 80025b0:	e00c      	b.n	80025cc <HAL_GPIO_Init+0x228>
 80025b2:	2306      	movs	r3, #6
 80025b4:	e00a      	b.n	80025cc <HAL_GPIO_Init+0x228>
 80025b6:	2305      	movs	r3, #5
 80025b8:	e008      	b.n	80025cc <HAL_GPIO_Init+0x228>
 80025ba:	2304      	movs	r3, #4
 80025bc:	e006      	b.n	80025cc <HAL_GPIO_Init+0x228>
 80025be:	2303      	movs	r3, #3
 80025c0:	e004      	b.n	80025cc <HAL_GPIO_Init+0x228>
 80025c2:	2302      	movs	r3, #2
 80025c4:	e002      	b.n	80025cc <HAL_GPIO_Init+0x228>
 80025c6:	2301      	movs	r3, #1
 80025c8:	e000      	b.n	80025cc <HAL_GPIO_Init+0x228>
 80025ca:	2300      	movs	r3, #0
 80025cc:	69fa      	ldr	r2, [r7, #28]
 80025ce:	f002 0203 	and.w	r2, r2, #3
 80025d2:	0092      	lsls	r2, r2, #2
 80025d4:	4093      	lsls	r3, r2
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	4313      	orrs	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025dc:	4935      	ldr	r1, [pc, #212]	; (80026b4 <HAL_GPIO_Init+0x310>)
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	089b      	lsrs	r3, r3, #2
 80025e2:	3302      	adds	r3, #2
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025ea:	4b3b      	ldr	r3, [pc, #236]	; (80026d8 <HAL_GPIO_Init+0x334>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	43db      	mvns	r3, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4013      	ands	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	4313      	orrs	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800260e:	4a32      	ldr	r2, [pc, #200]	; (80026d8 <HAL_GPIO_Init+0x334>)
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002614:	4b30      	ldr	r3, [pc, #192]	; (80026d8 <HAL_GPIO_Init+0x334>)
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	43db      	mvns	r3, r3
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4013      	ands	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d003      	beq.n	8002638 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	4313      	orrs	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002638:	4a27      	ldr	r2, [pc, #156]	; (80026d8 <HAL_GPIO_Init+0x334>)
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800263e:	4b26      	ldr	r3, [pc, #152]	; (80026d8 <HAL_GPIO_Init+0x334>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	43db      	mvns	r3, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4013      	ands	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	4313      	orrs	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002662:	4a1d      	ldr	r2, [pc, #116]	; (80026d8 <HAL_GPIO_Init+0x334>)
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002668:	4b1b      	ldr	r3, [pc, #108]	; (80026d8 <HAL_GPIO_Init+0x334>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	43db      	mvns	r3, r3
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4013      	ands	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	4313      	orrs	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800268c:	4a12      	ldr	r2, [pc, #72]	; (80026d8 <HAL_GPIO_Init+0x334>)
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	3301      	adds	r3, #1
 8002696:	61fb      	str	r3, [r7, #28]
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	2b0f      	cmp	r3, #15
 800269c:	f67f ae90 	bls.w	80023c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026a0:	bf00      	nop
 80026a2:	bf00      	nop
 80026a4:	3724      	adds	r7, #36	; 0x24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	40023800 	.word	0x40023800
 80026b4:	40013800 	.word	0x40013800
 80026b8:	40020000 	.word	0x40020000
 80026bc:	40020400 	.word	0x40020400
 80026c0:	40020800 	.word	0x40020800
 80026c4:	40020c00 	.word	0x40020c00
 80026c8:	40021000 	.word	0x40021000
 80026cc:	40021400 	.word	0x40021400
 80026d0:	40021800 	.word	0x40021800
 80026d4:	40021c00 	.word	0x40021c00
 80026d8:	40013c00 	.word	0x40013c00

080026dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	460b      	mov	r3, r1
 80026e6:	807b      	strh	r3, [r7, #2]
 80026e8:	4613      	mov	r3, r2
 80026ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026ec:	787b      	ldrb	r3, [r7, #1]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026f2:	887a      	ldrh	r2, [r7, #2]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026f8:	e003      	b.n	8002702 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026fa:	887b      	ldrh	r3, [r7, #2]
 80026fc:	041a      	lsls	r2, r3, #16
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	619a      	str	r2, [r3, #24]
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800270e:	b480      	push	{r7}
 8002710:	b085      	sub	sp, #20
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
 8002716:	460b      	mov	r3, r1
 8002718:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002720:	887a      	ldrh	r2, [r7, #2]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	4013      	ands	r3, r2
 8002726:	041a      	lsls	r2, r3, #16
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	43d9      	mvns	r1, r3
 800272c:	887b      	ldrh	r3, [r7, #2]
 800272e:	400b      	ands	r3, r1
 8002730:	431a      	orrs	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	619a      	str	r2, [r3, #24]
}
 8002736:	bf00      	nop
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
	...

08002744 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e12b      	b.n	80029ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d106      	bne.n	8002770 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7ff fbf0 	bl	8001f50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2224      	movs	r2, #36	; 0x24
 8002774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f022 0201 	bic.w	r2, r2, #1
 8002786:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002796:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027a8:	f001 fd1a 	bl	80041e0 <HAL_RCC_GetPCLK1Freq>
 80027ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	4a81      	ldr	r2, [pc, #516]	; (80029b8 <HAL_I2C_Init+0x274>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d807      	bhi.n	80027c8 <HAL_I2C_Init+0x84>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	4a80      	ldr	r2, [pc, #512]	; (80029bc <HAL_I2C_Init+0x278>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	bf94      	ite	ls
 80027c0:	2301      	movls	r3, #1
 80027c2:	2300      	movhi	r3, #0
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	e006      	b.n	80027d6 <HAL_I2C_Init+0x92>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	4a7d      	ldr	r2, [pc, #500]	; (80029c0 <HAL_I2C_Init+0x27c>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	bf94      	ite	ls
 80027d0:	2301      	movls	r3, #1
 80027d2:	2300      	movhi	r3, #0
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e0e7      	b.n	80029ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	4a78      	ldr	r2, [pc, #480]	; (80029c4 <HAL_I2C_Init+0x280>)
 80027e2:	fba2 2303 	umull	r2, r3, r2, r3
 80027e6:	0c9b      	lsrs	r3, r3, #18
 80027e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68ba      	ldr	r2, [r7, #8]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6a1b      	ldr	r3, [r3, #32]
 8002804:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	4a6a      	ldr	r2, [pc, #424]	; (80029b8 <HAL_I2C_Init+0x274>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d802      	bhi.n	8002818 <HAL_I2C_Init+0xd4>
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	3301      	adds	r3, #1
 8002816:	e009      	b.n	800282c <HAL_I2C_Init+0xe8>
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800281e:	fb02 f303 	mul.w	r3, r2, r3
 8002822:	4a69      	ldr	r2, [pc, #420]	; (80029c8 <HAL_I2C_Init+0x284>)
 8002824:	fba2 2303 	umull	r2, r3, r2, r3
 8002828:	099b      	lsrs	r3, r3, #6
 800282a:	3301      	adds	r3, #1
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6812      	ldr	r2, [r2, #0]
 8002830:	430b      	orrs	r3, r1
 8002832:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800283e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	495c      	ldr	r1, [pc, #368]	; (80029b8 <HAL_I2C_Init+0x274>)
 8002848:	428b      	cmp	r3, r1
 800284a:	d819      	bhi.n	8002880 <HAL_I2C_Init+0x13c>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	1e59      	subs	r1, r3, #1
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	fbb1 f3f3 	udiv	r3, r1, r3
 800285a:	1c59      	adds	r1, r3, #1
 800285c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002860:	400b      	ands	r3, r1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00a      	beq.n	800287c <HAL_I2C_Init+0x138>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	1e59      	subs	r1, r3, #1
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	fbb1 f3f3 	udiv	r3, r1, r3
 8002874:	3301      	adds	r3, #1
 8002876:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800287a:	e051      	b.n	8002920 <HAL_I2C_Init+0x1dc>
 800287c:	2304      	movs	r3, #4
 800287e:	e04f      	b.n	8002920 <HAL_I2C_Init+0x1dc>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d111      	bne.n	80028ac <HAL_I2C_Init+0x168>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	1e58      	subs	r0, r3, #1
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6859      	ldr	r1, [r3, #4]
 8002890:	460b      	mov	r3, r1
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	440b      	add	r3, r1
 8002896:	fbb0 f3f3 	udiv	r3, r0, r3
 800289a:	3301      	adds	r3, #1
 800289c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	bf0c      	ite	eq
 80028a4:	2301      	moveq	r3, #1
 80028a6:	2300      	movne	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	e012      	b.n	80028d2 <HAL_I2C_Init+0x18e>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	1e58      	subs	r0, r3, #1
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6859      	ldr	r1, [r3, #4]
 80028b4:	460b      	mov	r3, r1
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	440b      	add	r3, r1
 80028ba:	0099      	lsls	r1, r3, #2
 80028bc:	440b      	add	r3, r1
 80028be:	fbb0 f3f3 	udiv	r3, r0, r3
 80028c2:	3301      	adds	r3, #1
 80028c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	bf0c      	ite	eq
 80028cc:	2301      	moveq	r3, #1
 80028ce:	2300      	movne	r3, #0
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <HAL_I2C_Init+0x196>
 80028d6:	2301      	movs	r3, #1
 80028d8:	e022      	b.n	8002920 <HAL_I2C_Init+0x1dc>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10e      	bne.n	8002900 <HAL_I2C_Init+0x1bc>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	1e58      	subs	r0, r3, #1
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6859      	ldr	r1, [r3, #4]
 80028ea:	460b      	mov	r3, r1
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	440b      	add	r3, r1
 80028f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80028f4:	3301      	adds	r3, #1
 80028f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028fe:	e00f      	b.n	8002920 <HAL_I2C_Init+0x1dc>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	1e58      	subs	r0, r3, #1
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6859      	ldr	r1, [r3, #4]
 8002908:	460b      	mov	r3, r1
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	0099      	lsls	r1, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	fbb0 f3f3 	udiv	r3, r0, r3
 8002916:	3301      	adds	r3, #1
 8002918:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800291c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	6809      	ldr	r1, [r1, #0]
 8002924:	4313      	orrs	r3, r2
 8002926:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69da      	ldr	r2, [r3, #28]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	431a      	orrs	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	430a      	orrs	r2, r1
 8002942:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800294e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	6911      	ldr	r1, [r2, #16]
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	68d2      	ldr	r2, [r2, #12]
 800295a:	4311      	orrs	r1, r2
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	6812      	ldr	r2, [r2, #0]
 8002960:	430b      	orrs	r3, r1
 8002962:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	695a      	ldr	r2, [r3, #20]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	431a      	orrs	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	430a      	orrs	r2, r1
 800297e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f042 0201 	orr.w	r2, r2, #1
 800298e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2220      	movs	r2, #32
 800299a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	000186a0 	.word	0x000186a0
 80029bc:	001e847f 	.word	0x001e847f
 80029c0:	003d08ff 	.word	0x003d08ff
 80029c4:	431bde83 	.word	0x431bde83
 80029c8:	10624dd3 	.word	0x10624dd3

080029cc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b088      	sub	sp, #32
 80029d0:	af02      	add	r7, sp, #8
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	607a      	str	r2, [r7, #4]
 80029d6:	461a      	mov	r2, r3
 80029d8:	460b      	mov	r3, r1
 80029da:	817b      	strh	r3, [r7, #10]
 80029dc:	4613      	mov	r3, r2
 80029de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029e0:	f7ff fbca 	bl	8002178 <HAL_GetTick>
 80029e4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b20      	cmp	r3, #32
 80029f0:	f040 80e0 	bne.w	8002bb4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	2319      	movs	r3, #25
 80029fa:	2201      	movs	r2, #1
 80029fc:	4970      	ldr	r1, [pc, #448]	; (8002bc0 <HAL_I2C_Master_Transmit+0x1f4>)
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f000 fda0 	bl	8003544 <I2C_WaitOnFlagUntilTimeout>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	e0d3      	b.n	8002bb6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d101      	bne.n	8002a1c <HAL_I2C_Master_Transmit+0x50>
 8002a18:	2302      	movs	r3, #2
 8002a1a:	e0cc      	b.n	8002bb6 <HAL_I2C_Master_Transmit+0x1ea>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d007      	beq.n	8002a42 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f042 0201 	orr.w	r2, r2, #1
 8002a40:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a50:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2221      	movs	r2, #33	; 0x21
 8002a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2210      	movs	r2, #16
 8002a5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	893a      	ldrh	r2, [r7, #8]
 8002a72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	4a50      	ldr	r2, [pc, #320]	; (8002bc4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002a82:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a84:	8979      	ldrh	r1, [r7, #10]
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	6a3a      	ldr	r2, [r7, #32]
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f000 fbf0 	bl	8003270 <I2C_MasterRequestWrite>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e08d      	b.n	8002bb6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	613b      	str	r3, [r7, #16]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	613b      	str	r3, [r7, #16]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	613b      	str	r3, [r7, #16]
 8002aae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ab0:	e066      	b.n	8002b80 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	6a39      	ldr	r1, [r7, #32]
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f000 fe1a 	bl	80036f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00d      	beq.n	8002ade <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	d107      	bne.n	8002ada <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ad8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e06b      	b.n	8002bb6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae2:	781a      	ldrb	r2, [r3, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aee:	1c5a      	adds	r2, r3, #1
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	3b01      	subs	r3, #1
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b06:	3b01      	subs	r3, #1
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b04      	cmp	r3, #4
 8002b1a:	d11b      	bne.n	8002b54 <HAL_I2C_Master_Transmit+0x188>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d017      	beq.n	8002b54 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b28:	781a      	ldrb	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b34:	1c5a      	adds	r2, r3, #1
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	3b01      	subs	r3, #1
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	6a39      	ldr	r1, [r7, #32]
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	f000 fe0a 	bl	8003772 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00d      	beq.n	8002b80 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b68:	2b04      	cmp	r3, #4
 8002b6a:	d107      	bne.n	8002b7c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b7a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e01a      	b.n	8002bb6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d194      	bne.n	8002ab2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	e000      	b.n	8002bb6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002bb4:	2302      	movs	r3, #2
  }
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3718      	adds	r7, #24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	00100002 	.word	0x00100002
 8002bc4:	ffff0000 	.word	0xffff0000

08002bc8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b08c      	sub	sp, #48	; 0x30
 8002bcc:	af02      	add	r7, sp, #8
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	4608      	mov	r0, r1
 8002bd2:	4611      	mov	r1, r2
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	817b      	strh	r3, [r7, #10]
 8002bda:	460b      	mov	r3, r1
 8002bdc:	813b      	strh	r3, [r7, #8]
 8002bde:	4613      	mov	r3, r2
 8002be0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002be2:	f7ff fac9 	bl	8002178 <HAL_GetTick>
 8002be6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b20      	cmp	r3, #32
 8002bf2:	f040 8208 	bne.w	8003006 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	9300      	str	r3, [sp, #0]
 8002bfa:	2319      	movs	r3, #25
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	497b      	ldr	r1, [pc, #492]	; (8002dec <HAL_I2C_Mem_Read+0x224>)
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f000 fc9f 	bl	8003544 <I2C_WaitOnFlagUntilTimeout>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	e1fb      	b.n	8003008 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d101      	bne.n	8002c1e <HAL_I2C_Mem_Read+0x56>
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	e1f4      	b.n	8003008 <HAL_I2C_Mem_Read+0x440>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d007      	beq.n	8002c44 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f042 0201 	orr.w	r2, r2, #1
 8002c42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2222      	movs	r2, #34	; 0x22
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2240      	movs	r2, #64	; 0x40
 8002c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002c74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4a5b      	ldr	r2, [pc, #364]	; (8002df0 <HAL_I2C_Mem_Read+0x228>)
 8002c84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c86:	88f8      	ldrh	r0, [r7, #6]
 8002c88:	893a      	ldrh	r2, [r7, #8]
 8002c8a:	8979      	ldrh	r1, [r7, #10]
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8e:	9301      	str	r3, [sp, #4]
 8002c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	4603      	mov	r3, r0
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f000 fb6c 	bl	8003374 <I2C_RequestMemoryRead>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e1b0      	b.n	8003008 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d113      	bne.n	8002cd6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cae:	2300      	movs	r3, #0
 8002cb0:	623b      	str	r3, [r7, #32]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	623b      	str	r3, [r7, #32]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	623b      	str	r3, [r7, #32]
 8002cc2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	e184      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d11b      	bne.n	8002d16 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61fb      	str	r3, [r7, #28]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	61fb      	str	r3, [r7, #28]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	61fb      	str	r3, [r7, #28]
 8002d02:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	e164      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d11b      	bne.n	8002d56 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d2c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61bb      	str	r3, [r7, #24]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	61bb      	str	r3, [r7, #24]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	61bb      	str	r3, [r7, #24]
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	e144      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d56:	2300      	movs	r3, #0
 8002d58:	617b      	str	r3, [r7, #20]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	617b      	str	r3, [r7, #20]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	617b      	str	r3, [r7, #20]
 8002d6a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002d6c:	e138      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d72:	2b03      	cmp	r3, #3
 8002d74:	f200 80f1 	bhi.w	8002f5a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d123      	bne.n	8002dc8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f000 fd35 	bl	80037f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e139      	b.n	8003008 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	691a      	ldr	r2, [r3, #16]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9e:	b2d2      	uxtb	r2, r2
 8002da0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da6:	1c5a      	adds	r2, r3, #1
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002dc6:	e10b      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d14e      	bne.n	8002e6e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	4906      	ldr	r1, [pc, #24]	; (8002df4 <HAL_I2C_Mem_Read+0x22c>)
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f000 fbb2 	bl	8003544 <I2C_WaitOnFlagUntilTimeout>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d008      	beq.n	8002df8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e10e      	b.n	8003008 <HAL_I2C_Mem_Read+0x440>
 8002dea:	bf00      	nop
 8002dec:	00100002 	.word	0x00100002
 8002df0:	ffff0000 	.word	0xffff0000
 8002df4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	691a      	ldr	r2, [r3, #16]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e12:	b2d2      	uxtb	r2, r2
 8002e14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	1c5a      	adds	r2, r3, #1
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e24:	3b01      	subs	r3, #1
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	3b01      	subs	r3, #1
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	691a      	ldr	r2, [r3, #16]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e44:	b2d2      	uxtb	r2, r2
 8002e46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	1c5a      	adds	r2, r3, #1
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e56:	3b01      	subs	r3, #1
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	3b01      	subs	r3, #1
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e6c:	e0b8      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e74:	2200      	movs	r2, #0
 8002e76:	4966      	ldr	r1, [pc, #408]	; (8003010 <HAL_I2C_Mem_Read+0x448>)
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f000 fb63 	bl	8003544 <I2C_WaitOnFlagUntilTimeout>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e0bf      	b.n	8003008 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	691a      	ldr	r2, [r3, #16]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea2:	b2d2      	uxtb	r2, r2
 8002ea4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eaa:	1c5a      	adds	r2, r3, #1
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	494f      	ldr	r1, [pc, #316]	; (8003010 <HAL_I2C_Mem_Read+0x448>)
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f000 fb35 	bl	8003544 <I2C_WaitOnFlagUntilTimeout>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e091      	b.n	8003008 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ef2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	691a      	ldr	r2, [r3, #16]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efe:	b2d2      	uxtb	r2, r2
 8002f00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f06:	1c5a      	adds	r2, r3, #1
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f10:	3b01      	subs	r3, #1
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	691a      	ldr	r2, [r3, #16]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f30:	b2d2      	uxtb	r2, r2
 8002f32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f38:	1c5a      	adds	r2, r3, #1
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f42:	3b01      	subs	r3, #1
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	3b01      	subs	r3, #1
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f58:	e042      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f5c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f000 fc48 	bl	80037f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e04c      	b.n	8003008 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	691a      	ldr	r2, [r3, #16]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f78:	b2d2      	uxtb	r2, r2
 8002f7a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	1c5a      	adds	r2, r3, #1
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	f003 0304 	and.w	r3, r3, #4
 8002faa:	2b04      	cmp	r3, #4
 8002fac:	d118      	bne.n	8002fe0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	691a      	ldr	r2, [r3, #16]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	b2d2      	uxtb	r2, r2
 8002fba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	1c5a      	adds	r2, r3, #1
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f47f aec2 	bne.w	8002d6e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2220      	movs	r2, #32
 8002fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003002:	2300      	movs	r3, #0
 8003004:	e000      	b.n	8003008 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003006:	2302      	movs	r3, #2
  }
}
 8003008:	4618      	mov	r0, r3
 800300a:	3728      	adds	r7, #40	; 0x28
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	00010004 	.word	0x00010004

08003014 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b08a      	sub	sp, #40	; 0x28
 8003018:	af02      	add	r7, sp, #8
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	607a      	str	r2, [r7, #4]
 800301e:	603b      	str	r3, [r7, #0]
 8003020:	460b      	mov	r3, r1
 8003022:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003024:	f7ff f8a8 	bl	8002178 <HAL_GetTick>
 8003028:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800302a:	2300      	movs	r3, #0
 800302c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b20      	cmp	r3, #32
 8003038:	f040 8111 	bne.w	800325e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	9300      	str	r3, [sp, #0]
 8003040:	2319      	movs	r3, #25
 8003042:	2201      	movs	r2, #1
 8003044:	4988      	ldr	r1, [pc, #544]	; (8003268 <HAL_I2C_IsDeviceReady+0x254>)
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f000 fa7c 	bl	8003544 <I2C_WaitOnFlagUntilTimeout>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003052:	2302      	movs	r3, #2
 8003054:	e104      	b.n	8003260 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800305c:	2b01      	cmp	r3, #1
 800305e:	d101      	bne.n	8003064 <HAL_I2C_IsDeviceReady+0x50>
 8003060:	2302      	movs	r3, #2
 8003062:	e0fd      	b.n	8003260 <HAL_I2C_IsDeviceReady+0x24c>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b01      	cmp	r3, #1
 8003078:	d007      	beq.n	800308a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f042 0201 	orr.w	r2, r2, #1
 8003088:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003098:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2224      	movs	r2, #36	; 0x24
 800309e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	4a70      	ldr	r2, [pc, #448]	; (800326c <HAL_I2C_IsDeviceReady+0x258>)
 80030ac:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030bc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	9300      	str	r3, [sp, #0]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 fa3a 	bl	8003544 <I2C_WaitOnFlagUntilTimeout>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00d      	beq.n	80030f2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030e4:	d103      	bne.n	80030ee <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030ec:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e0b6      	b.n	8003260 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030f2:	897b      	ldrh	r3, [r7, #10]
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	461a      	mov	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003100:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003102:	f7ff f839 	bl	8002178 <HAL_GetTick>
 8003106:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b02      	cmp	r3, #2
 8003114:	bf0c      	ite	eq
 8003116:	2301      	moveq	r3, #1
 8003118:	2300      	movne	r3, #0
 800311a:	b2db      	uxtb	r3, r3
 800311c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800312c:	bf0c      	ite	eq
 800312e:	2301      	moveq	r3, #1
 8003130:	2300      	movne	r3, #0
 8003132:	b2db      	uxtb	r3, r3
 8003134:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003136:	e025      	b.n	8003184 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003138:	f7ff f81e 	bl	8002178 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	429a      	cmp	r2, r3
 8003146:	d302      	bcc.n	800314e <HAL_I2C_IsDeviceReady+0x13a>
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d103      	bne.n	8003156 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	22a0      	movs	r2, #160	; 0xa0
 8003152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b02      	cmp	r3, #2
 8003162:	bf0c      	ite	eq
 8003164:	2301      	moveq	r3, #1
 8003166:	2300      	movne	r3, #0
 8003168:	b2db      	uxtb	r3, r3
 800316a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003176:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800317a:	bf0c      	ite	eq
 800317c:	2301      	moveq	r3, #1
 800317e:	2300      	movne	r3, #0
 8003180:	b2db      	uxtb	r3, r3
 8003182:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2ba0      	cmp	r3, #160	; 0xa0
 800318e:	d005      	beq.n	800319c <HAL_I2C_IsDeviceReady+0x188>
 8003190:	7dfb      	ldrb	r3, [r7, #23]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d102      	bne.n	800319c <HAL_I2C_IsDeviceReady+0x188>
 8003196:	7dbb      	ldrb	r3, [r7, #22]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0cd      	beq.n	8003138 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2220      	movs	r2, #32
 80031a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d129      	bne.n	8003206 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031c0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031c2:	2300      	movs	r3, #0
 80031c4:	613b      	str	r3, [r7, #16]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	613b      	str	r3, [r7, #16]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	613b      	str	r3, [r7, #16]
 80031d6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	2319      	movs	r3, #25
 80031de:	2201      	movs	r2, #1
 80031e0:	4921      	ldr	r1, [pc, #132]	; (8003268 <HAL_I2C_IsDeviceReady+0x254>)
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f000 f9ae 	bl	8003544 <I2C_WaitOnFlagUntilTimeout>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e036      	b.n	8003260 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2220      	movs	r2, #32
 80031f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003202:	2300      	movs	r3, #0
 8003204:	e02c      	b.n	8003260 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003214:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800321e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	2319      	movs	r3, #25
 8003226:	2201      	movs	r2, #1
 8003228:	490f      	ldr	r1, [pc, #60]	; (8003268 <HAL_I2C_IsDeviceReady+0x254>)
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f000 f98a 	bl	8003544 <I2C_WaitOnFlagUntilTimeout>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e012      	b.n	8003260 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	3301      	adds	r3, #1
 800323e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	429a      	cmp	r2, r3
 8003246:	f4ff af32 	bcc.w	80030ae <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2220      	movs	r2, #32
 800324e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e000      	b.n	8003260 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800325e:	2302      	movs	r3, #2
  }
}
 8003260:	4618      	mov	r0, r3
 8003262:	3720      	adds	r7, #32
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	00100002 	.word	0x00100002
 800326c:	ffff0000 	.word	0xffff0000

08003270 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b088      	sub	sp, #32
 8003274:	af02      	add	r7, sp, #8
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	607a      	str	r2, [r7, #4]
 800327a:	603b      	str	r3, [r7, #0]
 800327c:	460b      	mov	r3, r1
 800327e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003284:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	2b08      	cmp	r3, #8
 800328a:	d006      	beq.n	800329a <I2C_MasterRequestWrite+0x2a>
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d003      	beq.n	800329a <I2C_MasterRequestWrite+0x2a>
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003298:	d108      	bne.n	80032ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032a8:	601a      	str	r2, [r3, #0]
 80032aa:	e00b      	b.n	80032c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b0:	2b12      	cmp	r3, #18
 80032b2:	d107      	bne.n	80032c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f000 f937 	bl	8003544 <I2C_WaitOnFlagUntilTimeout>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00d      	beq.n	80032f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032ea:	d103      	bne.n	80032f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e035      	b.n	8003364 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003300:	d108      	bne.n	8003314 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003302:	897b      	ldrh	r3, [r7, #10]
 8003304:	b2db      	uxtb	r3, r3
 8003306:	461a      	mov	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003310:	611a      	str	r2, [r3, #16]
 8003312:	e01b      	b.n	800334c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003314:	897b      	ldrh	r3, [r7, #10]
 8003316:	11db      	asrs	r3, r3, #7
 8003318:	b2db      	uxtb	r3, r3
 800331a:	f003 0306 	and.w	r3, r3, #6
 800331e:	b2db      	uxtb	r3, r3
 8003320:	f063 030f 	orn	r3, r3, #15
 8003324:	b2da      	uxtb	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	490e      	ldr	r1, [pc, #56]	; (800336c <I2C_MasterRequestWrite+0xfc>)
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f000 f95d 	bl	80035f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e010      	b.n	8003364 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003342:	897b      	ldrh	r3, [r7, #10]
 8003344:	b2da      	uxtb	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	4907      	ldr	r1, [pc, #28]	; (8003370 <I2C_MasterRequestWrite+0x100>)
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f000 f94d 	bl	80035f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e000      	b.n	8003364 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3718      	adds	r7, #24
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	00010008 	.word	0x00010008
 8003370:	00010002 	.word	0x00010002

08003374 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b088      	sub	sp, #32
 8003378:	af02      	add	r7, sp, #8
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	4608      	mov	r0, r1
 800337e:	4611      	mov	r1, r2
 8003380:	461a      	mov	r2, r3
 8003382:	4603      	mov	r3, r0
 8003384:	817b      	strh	r3, [r7, #10]
 8003386:	460b      	mov	r3, r1
 8003388:	813b      	strh	r3, [r7, #8]
 800338a:	4613      	mov	r3, r2
 800338c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800339c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	6a3b      	ldr	r3, [r7, #32]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f000 f8c2 	bl	8003544 <I2C_WaitOnFlagUntilTimeout>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00d      	beq.n	80033e2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033d4:	d103      	bne.n	80033de <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e0aa      	b.n	8003538 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033e2:	897b      	ldrh	r3, [r7, #10]
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	461a      	mov	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f4:	6a3a      	ldr	r2, [r7, #32]
 80033f6:	4952      	ldr	r1, [pc, #328]	; (8003540 <I2C_RequestMemoryRead+0x1cc>)
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 f8fa 	bl	80035f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e097      	b.n	8003538 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003408:	2300      	movs	r3, #0
 800340a:	617b      	str	r3, [r7, #20]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	617b      	str	r3, [r7, #20]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	617b      	str	r3, [r7, #20]
 800341c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800341e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003420:	6a39      	ldr	r1, [r7, #32]
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f000 f964 	bl	80036f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00d      	beq.n	800344a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	2b04      	cmp	r3, #4
 8003434:	d107      	bne.n	8003446 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003444:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e076      	b.n	8003538 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800344a:	88fb      	ldrh	r3, [r7, #6]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d105      	bne.n	800345c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003450:	893b      	ldrh	r3, [r7, #8]
 8003452:	b2da      	uxtb	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	611a      	str	r2, [r3, #16]
 800345a:	e021      	b.n	80034a0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800345c:	893b      	ldrh	r3, [r7, #8]
 800345e:	0a1b      	lsrs	r3, r3, #8
 8003460:	b29b      	uxth	r3, r3
 8003462:	b2da      	uxtb	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800346a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800346c:	6a39      	ldr	r1, [r7, #32]
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f000 f93e 	bl	80036f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00d      	beq.n	8003496 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347e:	2b04      	cmp	r3, #4
 8003480:	d107      	bne.n	8003492 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003490:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e050      	b.n	8003538 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003496:	893b      	ldrh	r3, [r7, #8]
 8003498:	b2da      	uxtb	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a2:	6a39      	ldr	r1, [r7, #32]
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f000 f923 	bl	80036f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00d      	beq.n	80034cc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b4:	2b04      	cmp	r3, #4
 80034b6:	d107      	bne.n	80034c8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034c6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e035      	b.n	8003538 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034da:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 f82b 	bl	8003544 <I2C_WaitOnFlagUntilTimeout>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00d      	beq.n	8003510 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003502:	d103      	bne.n	800350c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f44f 7200 	mov.w	r2, #512	; 0x200
 800350a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e013      	b.n	8003538 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003510:	897b      	ldrh	r3, [r7, #10]
 8003512:	b2db      	uxtb	r3, r3
 8003514:	f043 0301 	orr.w	r3, r3, #1
 8003518:	b2da      	uxtb	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003522:	6a3a      	ldr	r2, [r7, #32]
 8003524:	4906      	ldr	r1, [pc, #24]	; (8003540 <I2C_RequestMemoryRead+0x1cc>)
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f000 f863 	bl	80035f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e000      	b.n	8003538 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3718      	adds	r7, #24
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	00010002 	.word	0x00010002

08003544 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	603b      	str	r3, [r7, #0]
 8003550:	4613      	mov	r3, r2
 8003552:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003554:	e025      	b.n	80035a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800355c:	d021      	beq.n	80035a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800355e:	f7fe fe0b 	bl	8002178 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	429a      	cmp	r2, r3
 800356c:	d302      	bcc.n	8003574 <I2C_WaitOnFlagUntilTimeout+0x30>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d116      	bne.n	80035a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2220      	movs	r2, #32
 800357e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	f043 0220 	orr.w	r2, r3, #32
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e023      	b.n	80035ea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	0c1b      	lsrs	r3, r3, #16
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d10d      	bne.n	80035c8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	43da      	mvns	r2, r3
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	4013      	ands	r3, r2
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	bf0c      	ite	eq
 80035be:	2301      	moveq	r3, #1
 80035c0:	2300      	movne	r3, #0
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	461a      	mov	r2, r3
 80035c6:	e00c      	b.n	80035e2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	43da      	mvns	r2, r3
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	4013      	ands	r3, r2
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	bf0c      	ite	eq
 80035da:	2301      	moveq	r3, #1
 80035dc:	2300      	movne	r3, #0
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	461a      	mov	r2, r3
 80035e2:	79fb      	ldrb	r3, [r7, #7]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d0b6      	beq.n	8003556 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b084      	sub	sp, #16
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	60f8      	str	r0, [r7, #12]
 80035fa:	60b9      	str	r1, [r7, #8]
 80035fc:	607a      	str	r2, [r7, #4]
 80035fe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003600:	e051      	b.n	80036a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800360c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003610:	d123      	bne.n	800365a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003620:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800362a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2220      	movs	r2, #32
 8003636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	f043 0204 	orr.w	r2, r3, #4
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e046      	b.n	80036e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003660:	d021      	beq.n	80036a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003662:	f7fe fd89 	bl	8002178 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	429a      	cmp	r2, r3
 8003670:	d302      	bcc.n	8003678 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d116      	bne.n	80036a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2220      	movs	r2, #32
 8003682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	f043 0220 	orr.w	r2, r3, #32
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e020      	b.n	80036e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	0c1b      	lsrs	r3, r3, #16
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d10c      	bne.n	80036ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	43da      	mvns	r2, r3
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	4013      	ands	r3, r2
 80036bc:	b29b      	uxth	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	bf14      	ite	ne
 80036c2:	2301      	movne	r3, #1
 80036c4:	2300      	moveq	r3, #0
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	e00b      	b.n	80036e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	43da      	mvns	r2, r3
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	4013      	ands	r3, r2
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	2b00      	cmp	r3, #0
 80036da:	bf14      	ite	ne
 80036dc:	2301      	movne	r3, #1
 80036de:	2300      	moveq	r3, #0
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d18d      	bne.n	8003602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036fc:	e02d      	b.n	800375a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f000 f8ce 	bl	80038a0 <I2C_IsAcknowledgeFailed>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e02d      	b.n	800376a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003714:	d021      	beq.n	800375a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003716:	f7fe fd2f 	bl	8002178 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	429a      	cmp	r2, r3
 8003724:	d302      	bcc.n	800372c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d116      	bne.n	800375a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2220      	movs	r2, #32
 8003736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	f043 0220 	orr.w	r2, r3, #32
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e007      	b.n	800376a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	695b      	ldr	r3, [r3, #20]
 8003760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003764:	2b80      	cmp	r3, #128	; 0x80
 8003766:	d1ca      	bne.n	80036fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b084      	sub	sp, #16
 8003776:	af00      	add	r7, sp, #0
 8003778:	60f8      	str	r0, [r7, #12]
 800377a:	60b9      	str	r1, [r7, #8]
 800377c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800377e:	e02d      	b.n	80037dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f000 f88d 	bl	80038a0 <I2C_IsAcknowledgeFailed>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e02d      	b.n	80037ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003796:	d021      	beq.n	80037dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003798:	f7fe fcee 	bl	8002178 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	68ba      	ldr	r2, [r7, #8]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d302      	bcc.n	80037ae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d116      	bne.n	80037dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2220      	movs	r2, #32
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c8:	f043 0220 	orr.w	r2, r3, #32
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e007      	b.n	80037ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	f003 0304 	and.w	r3, r3, #4
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d1ca      	bne.n	8003780 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003800:	e042      	b.n	8003888 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	f003 0310 	and.w	r3, r3, #16
 800380c:	2b10      	cmp	r3, #16
 800380e:	d119      	bne.n	8003844 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f06f 0210 	mvn.w	r2, #16
 8003818:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2220      	movs	r2, #32
 8003824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e029      	b.n	8003898 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003844:	f7fe fc98 	bl	8002178 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	68ba      	ldr	r2, [r7, #8]
 8003850:	429a      	cmp	r2, r3
 8003852:	d302      	bcc.n	800385a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d116      	bne.n	8003888 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2220      	movs	r2, #32
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003874:	f043 0220 	orr.w	r2, r3, #32
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e007      	b.n	8003898 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003892:	2b40      	cmp	r3, #64	; 0x40
 8003894:	d1b5      	bne.n	8003802 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038b6:	d11b      	bne.n	80038f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2220      	movs	r2, #32
 80038cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038dc:	f043 0204 	orr.w	r2, r3, #4
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e000      	b.n	80038f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
	...

08003900 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e267      	b.n	8003de2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b00      	cmp	r3, #0
 800391c:	d075      	beq.n	8003a0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800391e:	4b88      	ldr	r3, [pc, #544]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f003 030c 	and.w	r3, r3, #12
 8003926:	2b04      	cmp	r3, #4
 8003928:	d00c      	beq.n	8003944 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800392a:	4b85      	ldr	r3, [pc, #532]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003932:	2b08      	cmp	r3, #8
 8003934:	d112      	bne.n	800395c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003936:	4b82      	ldr	r3, [pc, #520]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800393e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003942:	d10b      	bne.n	800395c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003944:	4b7e      	ldr	r3, [pc, #504]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d05b      	beq.n	8003a08 <HAL_RCC_OscConfig+0x108>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d157      	bne.n	8003a08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e242      	b.n	8003de2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003964:	d106      	bne.n	8003974 <HAL_RCC_OscConfig+0x74>
 8003966:	4b76      	ldr	r3, [pc, #472]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a75      	ldr	r2, [pc, #468]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 800396c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003970:	6013      	str	r3, [r2, #0]
 8003972:	e01d      	b.n	80039b0 <HAL_RCC_OscConfig+0xb0>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800397c:	d10c      	bne.n	8003998 <HAL_RCC_OscConfig+0x98>
 800397e:	4b70      	ldr	r3, [pc, #448]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a6f      	ldr	r2, [pc, #444]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003984:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003988:	6013      	str	r3, [r2, #0]
 800398a:	4b6d      	ldr	r3, [pc, #436]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a6c      	ldr	r2, [pc, #432]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003994:	6013      	str	r3, [r2, #0]
 8003996:	e00b      	b.n	80039b0 <HAL_RCC_OscConfig+0xb0>
 8003998:	4b69      	ldr	r3, [pc, #420]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a68      	ldr	r2, [pc, #416]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 800399e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039a2:	6013      	str	r3, [r2, #0]
 80039a4:	4b66      	ldr	r3, [pc, #408]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a65      	ldr	r2, [pc, #404]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 80039aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d013      	beq.n	80039e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b8:	f7fe fbde 	bl	8002178 <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039be:	e008      	b.n	80039d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039c0:	f7fe fbda 	bl	8002178 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b64      	cmp	r3, #100	; 0x64
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e207      	b.n	8003de2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039d2:	4b5b      	ldr	r3, [pc, #364]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d0f0      	beq.n	80039c0 <HAL_RCC_OscConfig+0xc0>
 80039de:	e014      	b.n	8003a0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e0:	f7fe fbca 	bl	8002178 <HAL_GetTick>
 80039e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039e6:	e008      	b.n	80039fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039e8:	f7fe fbc6 	bl	8002178 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b64      	cmp	r3, #100	; 0x64
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e1f3      	b.n	8003de2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039fa:	4b51      	ldr	r3, [pc, #324]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1f0      	bne.n	80039e8 <HAL_RCC_OscConfig+0xe8>
 8003a06:	e000      	b.n	8003a0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d063      	beq.n	8003ade <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a16:	4b4a      	ldr	r3, [pc, #296]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 030c 	and.w	r3, r3, #12
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00b      	beq.n	8003a3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a22:	4b47      	ldr	r3, [pc, #284]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a2a:	2b08      	cmp	r3, #8
 8003a2c:	d11c      	bne.n	8003a68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a2e:	4b44      	ldr	r3, [pc, #272]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d116      	bne.n	8003a68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a3a:	4b41      	ldr	r3, [pc, #260]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d005      	beq.n	8003a52 <HAL_RCC_OscConfig+0x152>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d001      	beq.n	8003a52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e1c7      	b.n	8003de2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a52:	4b3b      	ldr	r3, [pc, #236]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	4937      	ldr	r1, [pc, #220]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a66:	e03a      	b.n	8003ade <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d020      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a70:	4b34      	ldr	r3, [pc, #208]	; (8003b44 <HAL_RCC_OscConfig+0x244>)
 8003a72:	2201      	movs	r2, #1
 8003a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a76:	f7fe fb7f 	bl	8002178 <HAL_GetTick>
 8003a7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a7c:	e008      	b.n	8003a90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a7e:	f7fe fb7b 	bl	8002178 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d901      	bls.n	8003a90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e1a8      	b.n	8003de2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a90:	4b2b      	ldr	r3, [pc, #172]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d0f0      	beq.n	8003a7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a9c:	4b28      	ldr	r3, [pc, #160]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	00db      	lsls	r3, r3, #3
 8003aaa:	4925      	ldr	r1, [pc, #148]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	600b      	str	r3, [r1, #0]
 8003ab0:	e015      	b.n	8003ade <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ab2:	4b24      	ldr	r3, [pc, #144]	; (8003b44 <HAL_RCC_OscConfig+0x244>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab8:	f7fe fb5e 	bl	8002178 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ac0:	f7fe fb5a 	bl	8002178 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e187      	b.n	8003de2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ad2:	4b1b      	ldr	r3, [pc, #108]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1f0      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0308 	and.w	r3, r3, #8
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d036      	beq.n	8003b58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d016      	beq.n	8003b20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003af2:	4b15      	ldr	r3, [pc, #84]	; (8003b48 <HAL_RCC_OscConfig+0x248>)
 8003af4:	2201      	movs	r2, #1
 8003af6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af8:	f7fe fb3e 	bl	8002178 <HAL_GetTick>
 8003afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003afe:	e008      	b.n	8003b12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b00:	f7fe fb3a 	bl	8002178 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e167      	b.n	8003de2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b12:	4b0b      	ldr	r3, [pc, #44]	; (8003b40 <HAL_RCC_OscConfig+0x240>)
 8003b14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d0f0      	beq.n	8003b00 <HAL_RCC_OscConfig+0x200>
 8003b1e:	e01b      	b.n	8003b58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b20:	4b09      	ldr	r3, [pc, #36]	; (8003b48 <HAL_RCC_OscConfig+0x248>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b26:	f7fe fb27 	bl	8002178 <HAL_GetTick>
 8003b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b2c:	e00e      	b.n	8003b4c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b2e:	f7fe fb23 	bl	8002178 <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d907      	bls.n	8003b4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e150      	b.n	8003de2 <HAL_RCC_OscConfig+0x4e2>
 8003b40:	40023800 	.word	0x40023800
 8003b44:	42470000 	.word	0x42470000
 8003b48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b4c:	4b88      	ldr	r3, [pc, #544]	; (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003b4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1ea      	bne.n	8003b2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0304 	and.w	r3, r3, #4
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 8097 	beq.w	8003c94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b66:	2300      	movs	r3, #0
 8003b68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b6a:	4b81      	ldr	r3, [pc, #516]	; (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10f      	bne.n	8003b96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b76:	2300      	movs	r3, #0
 8003b78:	60bb      	str	r3, [r7, #8]
 8003b7a:	4b7d      	ldr	r3, [pc, #500]	; (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	4a7c      	ldr	r2, [pc, #496]	; (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b84:	6413      	str	r3, [r2, #64]	; 0x40
 8003b86:	4b7a      	ldr	r3, [pc, #488]	; (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b8e:	60bb      	str	r3, [r7, #8]
 8003b90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b92:	2301      	movs	r3, #1
 8003b94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b96:	4b77      	ldr	r3, [pc, #476]	; (8003d74 <HAL_RCC_OscConfig+0x474>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d118      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ba2:	4b74      	ldr	r3, [pc, #464]	; (8003d74 <HAL_RCC_OscConfig+0x474>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a73      	ldr	r2, [pc, #460]	; (8003d74 <HAL_RCC_OscConfig+0x474>)
 8003ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bae:	f7fe fae3 	bl	8002178 <HAL_GetTick>
 8003bb2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb4:	e008      	b.n	8003bc8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bb6:	f7fe fadf 	bl	8002178 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d901      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e10c      	b.n	8003de2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc8:	4b6a      	ldr	r3, [pc, #424]	; (8003d74 <HAL_RCC_OscConfig+0x474>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d0f0      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d106      	bne.n	8003bea <HAL_RCC_OscConfig+0x2ea>
 8003bdc:	4b64      	ldr	r3, [pc, #400]	; (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be0:	4a63      	ldr	r2, [pc, #396]	; (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003be2:	f043 0301 	orr.w	r3, r3, #1
 8003be6:	6713      	str	r3, [r2, #112]	; 0x70
 8003be8:	e01c      	b.n	8003c24 <HAL_RCC_OscConfig+0x324>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	2b05      	cmp	r3, #5
 8003bf0:	d10c      	bne.n	8003c0c <HAL_RCC_OscConfig+0x30c>
 8003bf2:	4b5f      	ldr	r3, [pc, #380]	; (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf6:	4a5e      	ldr	r2, [pc, #376]	; (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003bf8:	f043 0304 	orr.w	r3, r3, #4
 8003bfc:	6713      	str	r3, [r2, #112]	; 0x70
 8003bfe:	4b5c      	ldr	r3, [pc, #368]	; (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c02:	4a5b      	ldr	r2, [pc, #364]	; (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003c04:	f043 0301 	orr.w	r3, r3, #1
 8003c08:	6713      	str	r3, [r2, #112]	; 0x70
 8003c0a:	e00b      	b.n	8003c24 <HAL_RCC_OscConfig+0x324>
 8003c0c:	4b58      	ldr	r3, [pc, #352]	; (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c10:	4a57      	ldr	r2, [pc, #348]	; (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003c12:	f023 0301 	bic.w	r3, r3, #1
 8003c16:	6713      	str	r3, [r2, #112]	; 0x70
 8003c18:	4b55      	ldr	r3, [pc, #340]	; (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1c:	4a54      	ldr	r2, [pc, #336]	; (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003c1e:	f023 0304 	bic.w	r3, r3, #4
 8003c22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d015      	beq.n	8003c58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c2c:	f7fe faa4 	bl	8002178 <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c32:	e00a      	b.n	8003c4a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c34:	f7fe faa0 	bl	8002178 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e0cb      	b.n	8003de2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c4a:	4b49      	ldr	r3, [pc, #292]	; (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d0ee      	beq.n	8003c34 <HAL_RCC_OscConfig+0x334>
 8003c56:	e014      	b.n	8003c82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c58:	f7fe fa8e 	bl	8002178 <HAL_GetTick>
 8003c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c5e:	e00a      	b.n	8003c76 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c60:	f7fe fa8a 	bl	8002178 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e0b5      	b.n	8003de2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c76:	4b3e      	ldr	r3, [pc, #248]	; (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1ee      	bne.n	8003c60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c82:	7dfb      	ldrb	r3, [r7, #23]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d105      	bne.n	8003c94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c88:	4b39      	ldr	r3, [pc, #228]	; (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8c:	4a38      	ldr	r2, [pc, #224]	; (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003c8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f000 80a1 	beq.w	8003de0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c9e:	4b34      	ldr	r3, [pc, #208]	; (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f003 030c 	and.w	r3, r3, #12
 8003ca6:	2b08      	cmp	r3, #8
 8003ca8:	d05c      	beq.n	8003d64 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d141      	bne.n	8003d36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cb2:	4b31      	ldr	r3, [pc, #196]	; (8003d78 <HAL_RCC_OscConfig+0x478>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb8:	f7fe fa5e 	bl	8002178 <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cbe:	e008      	b.n	8003cd2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cc0:	f7fe fa5a 	bl	8002178 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e087      	b.n	8003de2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cd2:	4b27      	ldr	r3, [pc, #156]	; (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1f0      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	69da      	ldr	r2, [r3, #28]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cec:	019b      	lsls	r3, r3, #6
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf4:	085b      	lsrs	r3, r3, #1
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	041b      	lsls	r3, r3, #16
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d00:	061b      	lsls	r3, r3, #24
 8003d02:	491b      	ldr	r1, [pc, #108]	; (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d08:	4b1b      	ldr	r3, [pc, #108]	; (8003d78 <HAL_RCC_OscConfig+0x478>)
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d0e:	f7fe fa33 	bl	8002178 <HAL_GetTick>
 8003d12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d14:	e008      	b.n	8003d28 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d16:	f7fe fa2f 	bl	8002178 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d901      	bls.n	8003d28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e05c      	b.n	8003de2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d28:	4b11      	ldr	r3, [pc, #68]	; (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0f0      	beq.n	8003d16 <HAL_RCC_OscConfig+0x416>
 8003d34:	e054      	b.n	8003de0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d36:	4b10      	ldr	r3, [pc, #64]	; (8003d78 <HAL_RCC_OscConfig+0x478>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d3c:	f7fe fa1c 	bl	8002178 <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d42:	e008      	b.n	8003d56 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d44:	f7fe fa18 	bl	8002178 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e045      	b.n	8003de2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d56:	4b06      	ldr	r3, [pc, #24]	; (8003d70 <HAL_RCC_OscConfig+0x470>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1f0      	bne.n	8003d44 <HAL_RCC_OscConfig+0x444>
 8003d62:	e03d      	b.n	8003de0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d107      	bne.n	8003d7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e038      	b.n	8003de2 <HAL_RCC_OscConfig+0x4e2>
 8003d70:	40023800 	.word	0x40023800
 8003d74:	40007000 	.word	0x40007000
 8003d78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d7c:	4b1b      	ldr	r3, [pc, #108]	; (8003dec <HAL_RCC_OscConfig+0x4ec>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d028      	beq.n	8003ddc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d121      	bne.n	8003ddc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d11a      	bne.n	8003ddc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003dac:	4013      	ands	r3, r2
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003db2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d111      	bne.n	8003ddc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc2:	085b      	lsrs	r3, r3, #1
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d107      	bne.n	8003ddc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d001      	beq.n	8003de0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e000      	b.n	8003de2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3718      	adds	r7, #24
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	40023800 	.word	0x40023800

08003df0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d101      	bne.n	8003e04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e0cc      	b.n	8003f9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e04:	4b68      	ldr	r3, [pc, #416]	; (8003fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0307 	and.w	r3, r3, #7
 8003e0c:	683a      	ldr	r2, [r7, #0]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d90c      	bls.n	8003e2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e12:	4b65      	ldr	r3, [pc, #404]	; (8003fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	b2d2      	uxtb	r2, r2
 8003e18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e1a:	4b63      	ldr	r3, [pc, #396]	; (8003fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0307 	and.w	r3, r3, #7
 8003e22:	683a      	ldr	r2, [r7, #0]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d001      	beq.n	8003e2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e0b8      	b.n	8003f9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d020      	beq.n	8003e7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0304 	and.w	r3, r3, #4
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d005      	beq.n	8003e50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e44:	4b59      	ldr	r3, [pc, #356]	; (8003fac <HAL_RCC_ClockConfig+0x1bc>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	4a58      	ldr	r2, [pc, #352]	; (8003fac <HAL_RCC_ClockConfig+0x1bc>)
 8003e4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0308 	and.w	r3, r3, #8
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d005      	beq.n	8003e68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e5c:	4b53      	ldr	r3, [pc, #332]	; (8003fac <HAL_RCC_ClockConfig+0x1bc>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	4a52      	ldr	r2, [pc, #328]	; (8003fac <HAL_RCC_ClockConfig+0x1bc>)
 8003e62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e68:	4b50      	ldr	r3, [pc, #320]	; (8003fac <HAL_RCC_ClockConfig+0x1bc>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	494d      	ldr	r1, [pc, #308]	; (8003fac <HAL_RCC_ClockConfig+0x1bc>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d044      	beq.n	8003f10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d107      	bne.n	8003e9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e8e:	4b47      	ldr	r3, [pc, #284]	; (8003fac <HAL_RCC_ClockConfig+0x1bc>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d119      	bne.n	8003ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e07f      	b.n	8003f9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d003      	beq.n	8003eae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eaa:	2b03      	cmp	r3, #3
 8003eac:	d107      	bne.n	8003ebe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eae:	4b3f      	ldr	r3, [pc, #252]	; (8003fac <HAL_RCC_ClockConfig+0x1bc>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d109      	bne.n	8003ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e06f      	b.n	8003f9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ebe:	4b3b      	ldr	r3, [pc, #236]	; (8003fac <HAL_RCC_ClockConfig+0x1bc>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e067      	b.n	8003f9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ece:	4b37      	ldr	r3, [pc, #220]	; (8003fac <HAL_RCC_ClockConfig+0x1bc>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f023 0203 	bic.w	r2, r3, #3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	4934      	ldr	r1, [pc, #208]	; (8003fac <HAL_RCC_ClockConfig+0x1bc>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ee0:	f7fe f94a 	bl	8002178 <HAL_GetTick>
 8003ee4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ee6:	e00a      	b.n	8003efe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ee8:	f7fe f946 	bl	8002178 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e04f      	b.n	8003f9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003efe:	4b2b      	ldr	r3, [pc, #172]	; (8003fac <HAL_RCC_ClockConfig+0x1bc>)
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f003 020c 	and.w	r2, r3, #12
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d1eb      	bne.n	8003ee8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f10:	4b25      	ldr	r3, [pc, #148]	; (8003fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0307 	and.w	r3, r3, #7
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d20c      	bcs.n	8003f38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f1e:	4b22      	ldr	r3, [pc, #136]	; (8003fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f20:	683a      	ldr	r2, [r7, #0]
 8003f22:	b2d2      	uxtb	r2, r2
 8003f24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f26:	4b20      	ldr	r3, [pc, #128]	; (8003fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0307 	and.w	r3, r3, #7
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d001      	beq.n	8003f38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e032      	b.n	8003f9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0304 	and.w	r3, r3, #4
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d008      	beq.n	8003f56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f44:	4b19      	ldr	r3, [pc, #100]	; (8003fac <HAL_RCC_ClockConfig+0x1bc>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	4916      	ldr	r1, [pc, #88]	; (8003fac <HAL_RCC_ClockConfig+0x1bc>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0308 	and.w	r3, r3, #8
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d009      	beq.n	8003f76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f62:	4b12      	ldr	r3, [pc, #72]	; (8003fac <HAL_RCC_ClockConfig+0x1bc>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	490e      	ldr	r1, [pc, #56]	; (8003fac <HAL_RCC_ClockConfig+0x1bc>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f76:	f000 f821 	bl	8003fbc <HAL_RCC_GetSysClockFreq>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	4b0b      	ldr	r3, [pc, #44]	; (8003fac <HAL_RCC_ClockConfig+0x1bc>)
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	091b      	lsrs	r3, r3, #4
 8003f82:	f003 030f 	and.w	r3, r3, #15
 8003f86:	490a      	ldr	r1, [pc, #40]	; (8003fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f88:	5ccb      	ldrb	r3, [r1, r3]
 8003f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f8e:	4a09      	ldr	r2, [pc, #36]	; (8003fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f92:	4b09      	ldr	r3, [pc, #36]	; (8003fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7fe f8aa 	bl	80020f0 <HAL_InitTick>

  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	40023c00 	.word	0x40023c00
 8003fac:	40023800 	.word	0x40023800
 8003fb0:	08005630 	.word	0x08005630
 8003fb4:	20000014 	.word	0x20000014
 8003fb8:	20000018 	.word	0x20000018

08003fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fc0:	b094      	sub	sp, #80	; 0x50
 8003fc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	647b      	str	r3, [r7, #68]	; 0x44
 8003fc8:	2300      	movs	r3, #0
 8003fca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fcc:	2300      	movs	r3, #0
 8003fce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fd4:	4b79      	ldr	r3, [pc, #484]	; (80041bc <HAL_RCC_GetSysClockFreq+0x200>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f003 030c 	and.w	r3, r3, #12
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d00d      	beq.n	8003ffc <HAL_RCC_GetSysClockFreq+0x40>
 8003fe0:	2b08      	cmp	r3, #8
 8003fe2:	f200 80e1 	bhi.w	80041a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d002      	beq.n	8003ff0 <HAL_RCC_GetSysClockFreq+0x34>
 8003fea:	2b04      	cmp	r3, #4
 8003fec:	d003      	beq.n	8003ff6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003fee:	e0db      	b.n	80041a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ff0:	4b73      	ldr	r3, [pc, #460]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ff2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003ff4:	e0db      	b.n	80041ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ff6:	4b73      	ldr	r3, [pc, #460]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003ff8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ffa:	e0d8      	b.n	80041ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ffc:	4b6f      	ldr	r3, [pc, #444]	; (80041bc <HAL_RCC_GetSysClockFreq+0x200>)
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004004:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004006:	4b6d      	ldr	r3, [pc, #436]	; (80041bc <HAL_RCC_GetSysClockFreq+0x200>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d063      	beq.n	80040da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004012:	4b6a      	ldr	r3, [pc, #424]	; (80041bc <HAL_RCC_GetSysClockFreq+0x200>)
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	099b      	lsrs	r3, r3, #6
 8004018:	2200      	movs	r2, #0
 800401a:	63bb      	str	r3, [r7, #56]	; 0x38
 800401c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800401e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004024:	633b      	str	r3, [r7, #48]	; 0x30
 8004026:	2300      	movs	r3, #0
 8004028:	637b      	str	r3, [r7, #52]	; 0x34
 800402a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800402e:	4622      	mov	r2, r4
 8004030:	462b      	mov	r3, r5
 8004032:	f04f 0000 	mov.w	r0, #0
 8004036:	f04f 0100 	mov.w	r1, #0
 800403a:	0159      	lsls	r1, r3, #5
 800403c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004040:	0150      	lsls	r0, r2, #5
 8004042:	4602      	mov	r2, r0
 8004044:	460b      	mov	r3, r1
 8004046:	4621      	mov	r1, r4
 8004048:	1a51      	subs	r1, r2, r1
 800404a:	6139      	str	r1, [r7, #16]
 800404c:	4629      	mov	r1, r5
 800404e:	eb63 0301 	sbc.w	r3, r3, r1
 8004052:	617b      	str	r3, [r7, #20]
 8004054:	f04f 0200 	mov.w	r2, #0
 8004058:	f04f 0300 	mov.w	r3, #0
 800405c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004060:	4659      	mov	r1, fp
 8004062:	018b      	lsls	r3, r1, #6
 8004064:	4651      	mov	r1, sl
 8004066:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800406a:	4651      	mov	r1, sl
 800406c:	018a      	lsls	r2, r1, #6
 800406e:	4651      	mov	r1, sl
 8004070:	ebb2 0801 	subs.w	r8, r2, r1
 8004074:	4659      	mov	r1, fp
 8004076:	eb63 0901 	sbc.w	r9, r3, r1
 800407a:	f04f 0200 	mov.w	r2, #0
 800407e:	f04f 0300 	mov.w	r3, #0
 8004082:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004086:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800408a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800408e:	4690      	mov	r8, r2
 8004090:	4699      	mov	r9, r3
 8004092:	4623      	mov	r3, r4
 8004094:	eb18 0303 	adds.w	r3, r8, r3
 8004098:	60bb      	str	r3, [r7, #8]
 800409a:	462b      	mov	r3, r5
 800409c:	eb49 0303 	adc.w	r3, r9, r3
 80040a0:	60fb      	str	r3, [r7, #12]
 80040a2:	f04f 0200 	mov.w	r2, #0
 80040a6:	f04f 0300 	mov.w	r3, #0
 80040aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80040ae:	4629      	mov	r1, r5
 80040b0:	024b      	lsls	r3, r1, #9
 80040b2:	4621      	mov	r1, r4
 80040b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040b8:	4621      	mov	r1, r4
 80040ba:	024a      	lsls	r2, r1, #9
 80040bc:	4610      	mov	r0, r2
 80040be:	4619      	mov	r1, r3
 80040c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040c2:	2200      	movs	r2, #0
 80040c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80040c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040cc:	f7fc fd38 	bl	8000b40 <__aeabi_uldivmod>
 80040d0:	4602      	mov	r2, r0
 80040d2:	460b      	mov	r3, r1
 80040d4:	4613      	mov	r3, r2
 80040d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040d8:	e058      	b.n	800418c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040da:	4b38      	ldr	r3, [pc, #224]	; (80041bc <HAL_RCC_GetSysClockFreq+0x200>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	099b      	lsrs	r3, r3, #6
 80040e0:	2200      	movs	r2, #0
 80040e2:	4618      	mov	r0, r3
 80040e4:	4611      	mov	r1, r2
 80040e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80040ea:	623b      	str	r3, [r7, #32]
 80040ec:	2300      	movs	r3, #0
 80040ee:	627b      	str	r3, [r7, #36]	; 0x24
 80040f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80040f4:	4642      	mov	r2, r8
 80040f6:	464b      	mov	r3, r9
 80040f8:	f04f 0000 	mov.w	r0, #0
 80040fc:	f04f 0100 	mov.w	r1, #0
 8004100:	0159      	lsls	r1, r3, #5
 8004102:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004106:	0150      	lsls	r0, r2, #5
 8004108:	4602      	mov	r2, r0
 800410a:	460b      	mov	r3, r1
 800410c:	4641      	mov	r1, r8
 800410e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004112:	4649      	mov	r1, r9
 8004114:	eb63 0b01 	sbc.w	fp, r3, r1
 8004118:	f04f 0200 	mov.w	r2, #0
 800411c:	f04f 0300 	mov.w	r3, #0
 8004120:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004124:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004128:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800412c:	ebb2 040a 	subs.w	r4, r2, sl
 8004130:	eb63 050b 	sbc.w	r5, r3, fp
 8004134:	f04f 0200 	mov.w	r2, #0
 8004138:	f04f 0300 	mov.w	r3, #0
 800413c:	00eb      	lsls	r3, r5, #3
 800413e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004142:	00e2      	lsls	r2, r4, #3
 8004144:	4614      	mov	r4, r2
 8004146:	461d      	mov	r5, r3
 8004148:	4643      	mov	r3, r8
 800414a:	18e3      	adds	r3, r4, r3
 800414c:	603b      	str	r3, [r7, #0]
 800414e:	464b      	mov	r3, r9
 8004150:	eb45 0303 	adc.w	r3, r5, r3
 8004154:	607b      	str	r3, [r7, #4]
 8004156:	f04f 0200 	mov.w	r2, #0
 800415a:	f04f 0300 	mov.w	r3, #0
 800415e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004162:	4629      	mov	r1, r5
 8004164:	028b      	lsls	r3, r1, #10
 8004166:	4621      	mov	r1, r4
 8004168:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800416c:	4621      	mov	r1, r4
 800416e:	028a      	lsls	r2, r1, #10
 8004170:	4610      	mov	r0, r2
 8004172:	4619      	mov	r1, r3
 8004174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004176:	2200      	movs	r2, #0
 8004178:	61bb      	str	r3, [r7, #24]
 800417a:	61fa      	str	r2, [r7, #28]
 800417c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004180:	f7fc fcde 	bl	8000b40 <__aeabi_uldivmod>
 8004184:	4602      	mov	r2, r0
 8004186:	460b      	mov	r3, r1
 8004188:	4613      	mov	r3, r2
 800418a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800418c:	4b0b      	ldr	r3, [pc, #44]	; (80041bc <HAL_RCC_GetSysClockFreq+0x200>)
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	0c1b      	lsrs	r3, r3, #16
 8004192:	f003 0303 	and.w	r3, r3, #3
 8004196:	3301      	adds	r3, #1
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800419c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800419e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041a6:	e002      	b.n	80041ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041a8:	4b05      	ldr	r3, [pc, #20]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80041aa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3750      	adds	r7, #80	; 0x50
 80041b4:	46bd      	mov	sp, r7
 80041b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041ba:	bf00      	nop
 80041bc:	40023800 	.word	0x40023800
 80041c0:	00f42400 	.word	0x00f42400
 80041c4:	007a1200 	.word	0x007a1200

080041c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041c8:	b480      	push	{r7}
 80041ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041cc:	4b03      	ldr	r3, [pc, #12]	; (80041dc <HAL_RCC_GetHCLKFreq+0x14>)
 80041ce:	681b      	ldr	r3, [r3, #0]
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	20000014 	.word	0x20000014

080041e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041e4:	f7ff fff0 	bl	80041c8 <HAL_RCC_GetHCLKFreq>
 80041e8:	4602      	mov	r2, r0
 80041ea:	4b05      	ldr	r3, [pc, #20]	; (8004200 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	0a9b      	lsrs	r3, r3, #10
 80041f0:	f003 0307 	and.w	r3, r3, #7
 80041f4:	4903      	ldr	r1, [pc, #12]	; (8004204 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041f6:	5ccb      	ldrb	r3, [r1, r3]
 80041f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	40023800 	.word	0x40023800
 8004204:	08005640 	.word	0x08005640

08004208 <memset>:
 8004208:	4402      	add	r2, r0
 800420a:	4603      	mov	r3, r0
 800420c:	4293      	cmp	r3, r2
 800420e:	d100      	bne.n	8004212 <memset+0xa>
 8004210:	4770      	bx	lr
 8004212:	f803 1b01 	strb.w	r1, [r3], #1
 8004216:	e7f9      	b.n	800420c <memset+0x4>

08004218 <__errno>:
 8004218:	4b01      	ldr	r3, [pc, #4]	; (8004220 <__errno+0x8>)
 800421a:	6818      	ldr	r0, [r3, #0]
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	2000006c 	.word	0x2000006c

08004224 <__libc_init_array>:
 8004224:	b570      	push	{r4, r5, r6, lr}
 8004226:	4d0d      	ldr	r5, [pc, #52]	; (800425c <__libc_init_array+0x38>)
 8004228:	4c0d      	ldr	r4, [pc, #52]	; (8004260 <__libc_init_array+0x3c>)
 800422a:	1b64      	subs	r4, r4, r5
 800422c:	10a4      	asrs	r4, r4, #2
 800422e:	2600      	movs	r6, #0
 8004230:	42a6      	cmp	r6, r4
 8004232:	d109      	bne.n	8004248 <__libc_init_array+0x24>
 8004234:	4d0b      	ldr	r5, [pc, #44]	; (8004264 <__libc_init_array+0x40>)
 8004236:	4c0c      	ldr	r4, [pc, #48]	; (8004268 <__libc_init_array+0x44>)
 8004238:	f001 f9ec 	bl	8005614 <_init>
 800423c:	1b64      	subs	r4, r4, r5
 800423e:	10a4      	asrs	r4, r4, #2
 8004240:	2600      	movs	r6, #0
 8004242:	42a6      	cmp	r6, r4
 8004244:	d105      	bne.n	8004252 <__libc_init_array+0x2e>
 8004246:	bd70      	pop	{r4, r5, r6, pc}
 8004248:	f855 3b04 	ldr.w	r3, [r5], #4
 800424c:	4798      	blx	r3
 800424e:	3601      	adds	r6, #1
 8004250:	e7ee      	b.n	8004230 <__libc_init_array+0xc>
 8004252:	f855 3b04 	ldr.w	r3, [r5], #4
 8004256:	4798      	blx	r3
 8004258:	3601      	adds	r6, #1
 800425a:	e7f2      	b.n	8004242 <__libc_init_array+0x1e>
 800425c:	080056f0 	.word	0x080056f0
 8004260:	080056f0 	.word	0x080056f0
 8004264:	080056f0 	.word	0x080056f0
 8004268:	080056f4 	.word	0x080056f4

0800426c <atan2>:
 800426c:	f000 b984 	b.w	8004578 <__ieee754_atan2>

08004270 <pow>:
 8004270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004272:	ed2d 8b02 	vpush	{d8}
 8004276:	eeb0 8a40 	vmov.f32	s16, s0
 800427a:	eef0 8a60 	vmov.f32	s17, s1
 800427e:	ec55 4b11 	vmov	r4, r5, d1
 8004282:	f000 fa41 	bl	8004708 <__ieee754_pow>
 8004286:	4622      	mov	r2, r4
 8004288:	462b      	mov	r3, r5
 800428a:	4620      	mov	r0, r4
 800428c:	4629      	mov	r1, r5
 800428e:	ec57 6b10 	vmov	r6, r7, d0
 8004292:	f7fc fbef 	bl	8000a74 <__aeabi_dcmpun>
 8004296:	2800      	cmp	r0, #0
 8004298:	d13b      	bne.n	8004312 <pow+0xa2>
 800429a:	ec51 0b18 	vmov	r0, r1, d8
 800429e:	2200      	movs	r2, #0
 80042a0:	2300      	movs	r3, #0
 80042a2:	f7fc fbb5 	bl	8000a10 <__aeabi_dcmpeq>
 80042a6:	b1b8      	cbz	r0, 80042d8 <pow+0x68>
 80042a8:	2200      	movs	r2, #0
 80042aa:	2300      	movs	r3, #0
 80042ac:	4620      	mov	r0, r4
 80042ae:	4629      	mov	r1, r5
 80042b0:	f7fc fbae 	bl	8000a10 <__aeabi_dcmpeq>
 80042b4:	2800      	cmp	r0, #0
 80042b6:	d146      	bne.n	8004346 <pow+0xd6>
 80042b8:	ec45 4b10 	vmov	d0, r4, r5
 80042bc:	f000 f874 	bl	80043a8 <finite>
 80042c0:	b338      	cbz	r0, 8004312 <pow+0xa2>
 80042c2:	2200      	movs	r2, #0
 80042c4:	2300      	movs	r3, #0
 80042c6:	4620      	mov	r0, r4
 80042c8:	4629      	mov	r1, r5
 80042ca:	f7fc fbab 	bl	8000a24 <__aeabi_dcmplt>
 80042ce:	b300      	cbz	r0, 8004312 <pow+0xa2>
 80042d0:	f7ff ffa2 	bl	8004218 <__errno>
 80042d4:	2322      	movs	r3, #34	; 0x22
 80042d6:	e01b      	b.n	8004310 <pow+0xa0>
 80042d8:	ec47 6b10 	vmov	d0, r6, r7
 80042dc:	f000 f864 	bl	80043a8 <finite>
 80042e0:	b9e0      	cbnz	r0, 800431c <pow+0xac>
 80042e2:	eeb0 0a48 	vmov.f32	s0, s16
 80042e6:	eef0 0a68 	vmov.f32	s1, s17
 80042ea:	f000 f85d 	bl	80043a8 <finite>
 80042ee:	b1a8      	cbz	r0, 800431c <pow+0xac>
 80042f0:	ec45 4b10 	vmov	d0, r4, r5
 80042f4:	f000 f858 	bl	80043a8 <finite>
 80042f8:	b180      	cbz	r0, 800431c <pow+0xac>
 80042fa:	4632      	mov	r2, r6
 80042fc:	463b      	mov	r3, r7
 80042fe:	4630      	mov	r0, r6
 8004300:	4639      	mov	r1, r7
 8004302:	f7fc fbb7 	bl	8000a74 <__aeabi_dcmpun>
 8004306:	2800      	cmp	r0, #0
 8004308:	d0e2      	beq.n	80042d0 <pow+0x60>
 800430a:	f7ff ff85 	bl	8004218 <__errno>
 800430e:	2321      	movs	r3, #33	; 0x21
 8004310:	6003      	str	r3, [r0, #0]
 8004312:	ecbd 8b02 	vpop	{d8}
 8004316:	ec47 6b10 	vmov	d0, r6, r7
 800431a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800431c:	2200      	movs	r2, #0
 800431e:	2300      	movs	r3, #0
 8004320:	4630      	mov	r0, r6
 8004322:	4639      	mov	r1, r7
 8004324:	f7fc fb74 	bl	8000a10 <__aeabi_dcmpeq>
 8004328:	2800      	cmp	r0, #0
 800432a:	d0f2      	beq.n	8004312 <pow+0xa2>
 800432c:	eeb0 0a48 	vmov.f32	s0, s16
 8004330:	eef0 0a68 	vmov.f32	s1, s17
 8004334:	f000 f838 	bl	80043a8 <finite>
 8004338:	2800      	cmp	r0, #0
 800433a:	d0ea      	beq.n	8004312 <pow+0xa2>
 800433c:	ec45 4b10 	vmov	d0, r4, r5
 8004340:	f000 f832 	bl	80043a8 <finite>
 8004344:	e7c3      	b.n	80042ce <pow+0x5e>
 8004346:	4f01      	ldr	r7, [pc, #4]	; (800434c <pow+0xdc>)
 8004348:	2600      	movs	r6, #0
 800434a:	e7e2      	b.n	8004312 <pow+0xa2>
 800434c:	3ff00000 	.word	0x3ff00000

08004350 <sqrt>:
 8004350:	b538      	push	{r3, r4, r5, lr}
 8004352:	ed2d 8b02 	vpush	{d8}
 8004356:	ec55 4b10 	vmov	r4, r5, d0
 800435a:	f000 f831 	bl	80043c0 <__ieee754_sqrt>
 800435e:	4622      	mov	r2, r4
 8004360:	462b      	mov	r3, r5
 8004362:	4620      	mov	r0, r4
 8004364:	4629      	mov	r1, r5
 8004366:	eeb0 8a40 	vmov.f32	s16, s0
 800436a:	eef0 8a60 	vmov.f32	s17, s1
 800436e:	f7fc fb81 	bl	8000a74 <__aeabi_dcmpun>
 8004372:	b990      	cbnz	r0, 800439a <sqrt+0x4a>
 8004374:	2200      	movs	r2, #0
 8004376:	2300      	movs	r3, #0
 8004378:	4620      	mov	r0, r4
 800437a:	4629      	mov	r1, r5
 800437c:	f7fc fb52 	bl	8000a24 <__aeabi_dcmplt>
 8004380:	b158      	cbz	r0, 800439a <sqrt+0x4a>
 8004382:	f7ff ff49 	bl	8004218 <__errno>
 8004386:	2321      	movs	r3, #33	; 0x21
 8004388:	6003      	str	r3, [r0, #0]
 800438a:	2200      	movs	r2, #0
 800438c:	2300      	movs	r3, #0
 800438e:	4610      	mov	r0, r2
 8004390:	4619      	mov	r1, r3
 8004392:	f7fc f9ff 	bl	8000794 <__aeabi_ddiv>
 8004396:	ec41 0b18 	vmov	d8, r0, r1
 800439a:	eeb0 0a48 	vmov.f32	s0, s16
 800439e:	eef0 0a68 	vmov.f32	s1, s17
 80043a2:	ecbd 8b02 	vpop	{d8}
 80043a6:	bd38      	pop	{r3, r4, r5, pc}

080043a8 <finite>:
 80043a8:	b082      	sub	sp, #8
 80043aa:	ed8d 0b00 	vstr	d0, [sp]
 80043ae:	9801      	ldr	r0, [sp, #4]
 80043b0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80043b4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80043b8:	0fc0      	lsrs	r0, r0, #31
 80043ba:	b002      	add	sp, #8
 80043bc:	4770      	bx	lr
	...

080043c0 <__ieee754_sqrt>:
 80043c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043c4:	ec55 4b10 	vmov	r4, r5, d0
 80043c8:	4e67      	ldr	r6, [pc, #412]	; (8004568 <__ieee754_sqrt+0x1a8>)
 80043ca:	43ae      	bics	r6, r5
 80043cc:	ee10 0a10 	vmov	r0, s0
 80043d0:	ee10 2a10 	vmov	r2, s0
 80043d4:	4629      	mov	r1, r5
 80043d6:	462b      	mov	r3, r5
 80043d8:	d10d      	bne.n	80043f6 <__ieee754_sqrt+0x36>
 80043da:	f7fc f8b1 	bl	8000540 <__aeabi_dmul>
 80043de:	4602      	mov	r2, r0
 80043e0:	460b      	mov	r3, r1
 80043e2:	4620      	mov	r0, r4
 80043e4:	4629      	mov	r1, r5
 80043e6:	f7fb fef5 	bl	80001d4 <__adddf3>
 80043ea:	4604      	mov	r4, r0
 80043ec:	460d      	mov	r5, r1
 80043ee:	ec45 4b10 	vmov	d0, r4, r5
 80043f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043f6:	2d00      	cmp	r5, #0
 80043f8:	dc0b      	bgt.n	8004412 <__ieee754_sqrt+0x52>
 80043fa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80043fe:	4326      	orrs	r6, r4
 8004400:	d0f5      	beq.n	80043ee <__ieee754_sqrt+0x2e>
 8004402:	b135      	cbz	r5, 8004412 <__ieee754_sqrt+0x52>
 8004404:	f7fb fee4 	bl	80001d0 <__aeabi_dsub>
 8004408:	4602      	mov	r2, r0
 800440a:	460b      	mov	r3, r1
 800440c:	f7fc f9c2 	bl	8000794 <__aeabi_ddiv>
 8004410:	e7eb      	b.n	80043ea <__ieee754_sqrt+0x2a>
 8004412:	1509      	asrs	r1, r1, #20
 8004414:	f000 808d 	beq.w	8004532 <__ieee754_sqrt+0x172>
 8004418:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800441c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8004420:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004424:	07c9      	lsls	r1, r1, #31
 8004426:	bf5c      	itt	pl
 8004428:	005b      	lslpl	r3, r3, #1
 800442a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800442e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004432:	bf58      	it	pl
 8004434:	0052      	lslpl	r2, r2, #1
 8004436:	2500      	movs	r5, #0
 8004438:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800443c:	1076      	asrs	r6, r6, #1
 800443e:	0052      	lsls	r2, r2, #1
 8004440:	f04f 0e16 	mov.w	lr, #22
 8004444:	46ac      	mov	ip, r5
 8004446:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800444a:	eb0c 0001 	add.w	r0, ip, r1
 800444e:	4298      	cmp	r0, r3
 8004450:	bfde      	ittt	le
 8004452:	1a1b      	suble	r3, r3, r0
 8004454:	eb00 0c01 	addle.w	ip, r0, r1
 8004458:	186d      	addle	r5, r5, r1
 800445a:	005b      	lsls	r3, r3, #1
 800445c:	f1be 0e01 	subs.w	lr, lr, #1
 8004460:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8004464:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8004468:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800446c:	d1ed      	bne.n	800444a <__ieee754_sqrt+0x8a>
 800446e:	4674      	mov	r4, lr
 8004470:	2720      	movs	r7, #32
 8004472:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004476:	4563      	cmp	r3, ip
 8004478:	eb01 000e 	add.w	r0, r1, lr
 800447c:	dc02      	bgt.n	8004484 <__ieee754_sqrt+0xc4>
 800447e:	d113      	bne.n	80044a8 <__ieee754_sqrt+0xe8>
 8004480:	4290      	cmp	r0, r2
 8004482:	d811      	bhi.n	80044a8 <__ieee754_sqrt+0xe8>
 8004484:	2800      	cmp	r0, #0
 8004486:	eb00 0e01 	add.w	lr, r0, r1
 800448a:	da57      	bge.n	800453c <__ieee754_sqrt+0x17c>
 800448c:	f1be 0f00 	cmp.w	lr, #0
 8004490:	db54      	blt.n	800453c <__ieee754_sqrt+0x17c>
 8004492:	f10c 0801 	add.w	r8, ip, #1
 8004496:	eba3 030c 	sub.w	r3, r3, ip
 800449a:	4290      	cmp	r0, r2
 800449c:	bf88      	it	hi
 800449e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80044a2:	1a12      	subs	r2, r2, r0
 80044a4:	440c      	add	r4, r1
 80044a6:	46c4      	mov	ip, r8
 80044a8:	005b      	lsls	r3, r3, #1
 80044aa:	3f01      	subs	r7, #1
 80044ac:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80044b0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80044b4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80044b8:	d1dd      	bne.n	8004476 <__ieee754_sqrt+0xb6>
 80044ba:	4313      	orrs	r3, r2
 80044bc:	d01b      	beq.n	80044f6 <__ieee754_sqrt+0x136>
 80044be:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800456c <__ieee754_sqrt+0x1ac>
 80044c2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8004570 <__ieee754_sqrt+0x1b0>
 80044c6:	e9da 0100 	ldrd	r0, r1, [sl]
 80044ca:	e9db 2300 	ldrd	r2, r3, [fp]
 80044ce:	f7fb fe7f 	bl	80001d0 <__aeabi_dsub>
 80044d2:	e9da 8900 	ldrd	r8, r9, [sl]
 80044d6:	4602      	mov	r2, r0
 80044d8:	460b      	mov	r3, r1
 80044da:	4640      	mov	r0, r8
 80044dc:	4649      	mov	r1, r9
 80044de:	f7fc faab 	bl	8000a38 <__aeabi_dcmple>
 80044e2:	b140      	cbz	r0, 80044f6 <__ieee754_sqrt+0x136>
 80044e4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80044e8:	e9da 0100 	ldrd	r0, r1, [sl]
 80044ec:	e9db 2300 	ldrd	r2, r3, [fp]
 80044f0:	d126      	bne.n	8004540 <__ieee754_sqrt+0x180>
 80044f2:	3501      	adds	r5, #1
 80044f4:	463c      	mov	r4, r7
 80044f6:	106a      	asrs	r2, r5, #1
 80044f8:	0863      	lsrs	r3, r4, #1
 80044fa:	07e9      	lsls	r1, r5, #31
 80044fc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8004500:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8004504:	bf48      	it	mi
 8004506:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800450a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800450e:	461c      	mov	r4, r3
 8004510:	e76d      	b.n	80043ee <__ieee754_sqrt+0x2e>
 8004512:	0ad3      	lsrs	r3, r2, #11
 8004514:	3815      	subs	r0, #21
 8004516:	0552      	lsls	r2, r2, #21
 8004518:	2b00      	cmp	r3, #0
 800451a:	d0fa      	beq.n	8004512 <__ieee754_sqrt+0x152>
 800451c:	02dc      	lsls	r4, r3, #11
 800451e:	d50a      	bpl.n	8004536 <__ieee754_sqrt+0x176>
 8004520:	f1c1 0420 	rsb	r4, r1, #32
 8004524:	fa22 f404 	lsr.w	r4, r2, r4
 8004528:	1e4d      	subs	r5, r1, #1
 800452a:	408a      	lsls	r2, r1
 800452c:	4323      	orrs	r3, r4
 800452e:	1b41      	subs	r1, r0, r5
 8004530:	e772      	b.n	8004418 <__ieee754_sqrt+0x58>
 8004532:	4608      	mov	r0, r1
 8004534:	e7f0      	b.n	8004518 <__ieee754_sqrt+0x158>
 8004536:	005b      	lsls	r3, r3, #1
 8004538:	3101      	adds	r1, #1
 800453a:	e7ef      	b.n	800451c <__ieee754_sqrt+0x15c>
 800453c:	46e0      	mov	r8, ip
 800453e:	e7aa      	b.n	8004496 <__ieee754_sqrt+0xd6>
 8004540:	f7fb fe48 	bl	80001d4 <__adddf3>
 8004544:	e9da 8900 	ldrd	r8, r9, [sl]
 8004548:	4602      	mov	r2, r0
 800454a:	460b      	mov	r3, r1
 800454c:	4640      	mov	r0, r8
 800454e:	4649      	mov	r1, r9
 8004550:	f7fc fa68 	bl	8000a24 <__aeabi_dcmplt>
 8004554:	b120      	cbz	r0, 8004560 <__ieee754_sqrt+0x1a0>
 8004556:	1ca0      	adds	r0, r4, #2
 8004558:	bf08      	it	eq
 800455a:	3501      	addeq	r5, #1
 800455c:	3402      	adds	r4, #2
 800455e:	e7ca      	b.n	80044f6 <__ieee754_sqrt+0x136>
 8004560:	3401      	adds	r4, #1
 8004562:	f024 0401 	bic.w	r4, r4, #1
 8004566:	e7c6      	b.n	80044f6 <__ieee754_sqrt+0x136>
 8004568:	7ff00000 	.word	0x7ff00000
 800456c:	20000070 	.word	0x20000070
 8004570:	20000078 	.word	0x20000078
 8004574:	00000000 	.word	0x00000000

08004578 <__ieee754_atan2>:
 8004578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800457c:	ec57 6b11 	vmov	r6, r7, d1
 8004580:	4273      	negs	r3, r6
 8004582:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8004700 <__ieee754_atan2+0x188>
 8004586:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800458a:	4333      	orrs	r3, r6
 800458c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8004590:	4543      	cmp	r3, r8
 8004592:	ec51 0b10 	vmov	r0, r1, d0
 8004596:	ee11 5a10 	vmov	r5, s2
 800459a:	d80a      	bhi.n	80045b2 <__ieee754_atan2+0x3a>
 800459c:	4244      	negs	r4, r0
 800459e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80045a2:	4304      	orrs	r4, r0
 80045a4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80045a8:	4544      	cmp	r4, r8
 80045aa:	ee10 9a10 	vmov	r9, s0
 80045ae:	468e      	mov	lr, r1
 80045b0:	d907      	bls.n	80045c2 <__ieee754_atan2+0x4a>
 80045b2:	4632      	mov	r2, r6
 80045b4:	463b      	mov	r3, r7
 80045b6:	f7fb fe0d 	bl	80001d4 <__adddf3>
 80045ba:	ec41 0b10 	vmov	d0, r0, r1
 80045be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045c2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80045c6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80045ca:	4334      	orrs	r4, r6
 80045cc:	d103      	bne.n	80045d6 <__ieee754_atan2+0x5e>
 80045ce:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045d2:	f000 bdc5 	b.w	8005160 <atan>
 80045d6:	17bc      	asrs	r4, r7, #30
 80045d8:	f004 0402 	and.w	r4, r4, #2
 80045dc:	ea53 0909 	orrs.w	r9, r3, r9
 80045e0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80045e4:	d107      	bne.n	80045f6 <__ieee754_atan2+0x7e>
 80045e6:	2c02      	cmp	r4, #2
 80045e8:	d05f      	beq.n	80046aa <__ieee754_atan2+0x132>
 80045ea:	2c03      	cmp	r4, #3
 80045ec:	d1e5      	bne.n	80045ba <__ieee754_atan2+0x42>
 80045ee:	a140      	add	r1, pc, #256	; (adr r1, 80046f0 <__ieee754_atan2+0x178>)
 80045f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80045f4:	e7e1      	b.n	80045ba <__ieee754_atan2+0x42>
 80045f6:	4315      	orrs	r5, r2
 80045f8:	d106      	bne.n	8004608 <__ieee754_atan2+0x90>
 80045fa:	f1be 0f00 	cmp.w	lr, #0
 80045fe:	da5f      	bge.n	80046c0 <__ieee754_atan2+0x148>
 8004600:	a13d      	add	r1, pc, #244	; (adr r1, 80046f8 <__ieee754_atan2+0x180>)
 8004602:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004606:	e7d8      	b.n	80045ba <__ieee754_atan2+0x42>
 8004608:	4542      	cmp	r2, r8
 800460a:	d10f      	bne.n	800462c <__ieee754_atan2+0xb4>
 800460c:	4293      	cmp	r3, r2
 800460e:	f104 34ff 	add.w	r4, r4, #4294967295
 8004612:	d107      	bne.n	8004624 <__ieee754_atan2+0xac>
 8004614:	2c02      	cmp	r4, #2
 8004616:	d84c      	bhi.n	80046b2 <__ieee754_atan2+0x13a>
 8004618:	4b33      	ldr	r3, [pc, #204]	; (80046e8 <__ieee754_atan2+0x170>)
 800461a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800461e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004622:	e7ca      	b.n	80045ba <__ieee754_atan2+0x42>
 8004624:	2c02      	cmp	r4, #2
 8004626:	d848      	bhi.n	80046ba <__ieee754_atan2+0x142>
 8004628:	4b30      	ldr	r3, [pc, #192]	; (80046ec <__ieee754_atan2+0x174>)
 800462a:	e7f6      	b.n	800461a <__ieee754_atan2+0xa2>
 800462c:	4543      	cmp	r3, r8
 800462e:	d0e4      	beq.n	80045fa <__ieee754_atan2+0x82>
 8004630:	1a9b      	subs	r3, r3, r2
 8004632:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8004636:	ea4f 5223 	mov.w	r2, r3, asr #20
 800463a:	da1e      	bge.n	800467a <__ieee754_atan2+0x102>
 800463c:	2f00      	cmp	r7, #0
 800463e:	da01      	bge.n	8004644 <__ieee754_atan2+0xcc>
 8004640:	323c      	adds	r2, #60	; 0x3c
 8004642:	db1e      	blt.n	8004682 <__ieee754_atan2+0x10a>
 8004644:	4632      	mov	r2, r6
 8004646:	463b      	mov	r3, r7
 8004648:	f7fc f8a4 	bl	8000794 <__aeabi_ddiv>
 800464c:	ec41 0b10 	vmov	d0, r0, r1
 8004650:	f000 ff26 	bl	80054a0 <fabs>
 8004654:	f000 fd84 	bl	8005160 <atan>
 8004658:	ec51 0b10 	vmov	r0, r1, d0
 800465c:	2c01      	cmp	r4, #1
 800465e:	d013      	beq.n	8004688 <__ieee754_atan2+0x110>
 8004660:	2c02      	cmp	r4, #2
 8004662:	d015      	beq.n	8004690 <__ieee754_atan2+0x118>
 8004664:	2c00      	cmp	r4, #0
 8004666:	d0a8      	beq.n	80045ba <__ieee754_atan2+0x42>
 8004668:	a317      	add	r3, pc, #92	; (adr r3, 80046c8 <__ieee754_atan2+0x150>)
 800466a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466e:	f7fb fdaf 	bl	80001d0 <__aeabi_dsub>
 8004672:	a317      	add	r3, pc, #92	; (adr r3, 80046d0 <__ieee754_atan2+0x158>)
 8004674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004678:	e014      	b.n	80046a4 <__ieee754_atan2+0x12c>
 800467a:	a117      	add	r1, pc, #92	; (adr r1, 80046d8 <__ieee754_atan2+0x160>)
 800467c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004680:	e7ec      	b.n	800465c <__ieee754_atan2+0xe4>
 8004682:	2000      	movs	r0, #0
 8004684:	2100      	movs	r1, #0
 8004686:	e7e9      	b.n	800465c <__ieee754_atan2+0xe4>
 8004688:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800468c:	4619      	mov	r1, r3
 800468e:	e794      	b.n	80045ba <__ieee754_atan2+0x42>
 8004690:	a30d      	add	r3, pc, #52	; (adr r3, 80046c8 <__ieee754_atan2+0x150>)
 8004692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004696:	f7fb fd9b 	bl	80001d0 <__aeabi_dsub>
 800469a:	4602      	mov	r2, r0
 800469c:	460b      	mov	r3, r1
 800469e:	a10c      	add	r1, pc, #48	; (adr r1, 80046d0 <__ieee754_atan2+0x158>)
 80046a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80046a4:	f7fb fd94 	bl	80001d0 <__aeabi_dsub>
 80046a8:	e787      	b.n	80045ba <__ieee754_atan2+0x42>
 80046aa:	a109      	add	r1, pc, #36	; (adr r1, 80046d0 <__ieee754_atan2+0x158>)
 80046ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80046b0:	e783      	b.n	80045ba <__ieee754_atan2+0x42>
 80046b2:	a10b      	add	r1, pc, #44	; (adr r1, 80046e0 <__ieee754_atan2+0x168>)
 80046b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80046b8:	e77f      	b.n	80045ba <__ieee754_atan2+0x42>
 80046ba:	2000      	movs	r0, #0
 80046bc:	2100      	movs	r1, #0
 80046be:	e77c      	b.n	80045ba <__ieee754_atan2+0x42>
 80046c0:	a105      	add	r1, pc, #20	; (adr r1, 80046d8 <__ieee754_atan2+0x160>)
 80046c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80046c6:	e778      	b.n	80045ba <__ieee754_atan2+0x42>
 80046c8:	33145c07 	.word	0x33145c07
 80046cc:	3ca1a626 	.word	0x3ca1a626
 80046d0:	54442d18 	.word	0x54442d18
 80046d4:	400921fb 	.word	0x400921fb
 80046d8:	54442d18 	.word	0x54442d18
 80046dc:	3ff921fb 	.word	0x3ff921fb
 80046e0:	54442d18 	.word	0x54442d18
 80046e4:	3fe921fb 	.word	0x3fe921fb
 80046e8:	08005648 	.word	0x08005648
 80046ec:	08005660 	.word	0x08005660
 80046f0:	54442d18 	.word	0x54442d18
 80046f4:	c00921fb 	.word	0xc00921fb
 80046f8:	54442d18 	.word	0x54442d18
 80046fc:	bff921fb 	.word	0xbff921fb
 8004700:	7ff00000 	.word	0x7ff00000
 8004704:	00000000 	.word	0x00000000

08004708 <__ieee754_pow>:
 8004708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800470c:	ed2d 8b06 	vpush	{d8-d10}
 8004710:	b089      	sub	sp, #36	; 0x24
 8004712:	ed8d 1b00 	vstr	d1, [sp]
 8004716:	e9dd 2900 	ldrd	r2, r9, [sp]
 800471a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800471e:	ea58 0102 	orrs.w	r1, r8, r2
 8004722:	ec57 6b10 	vmov	r6, r7, d0
 8004726:	d115      	bne.n	8004754 <__ieee754_pow+0x4c>
 8004728:	19b3      	adds	r3, r6, r6
 800472a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800472e:	4152      	adcs	r2, r2
 8004730:	4299      	cmp	r1, r3
 8004732:	4b89      	ldr	r3, [pc, #548]	; (8004958 <__ieee754_pow+0x250>)
 8004734:	4193      	sbcs	r3, r2
 8004736:	f080 84d1 	bcs.w	80050dc <__ieee754_pow+0x9d4>
 800473a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800473e:	4630      	mov	r0, r6
 8004740:	4639      	mov	r1, r7
 8004742:	f7fb fd47 	bl	80001d4 <__adddf3>
 8004746:	ec41 0b10 	vmov	d0, r0, r1
 800474a:	b009      	add	sp, #36	; 0x24
 800474c:	ecbd 8b06 	vpop	{d8-d10}
 8004750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004754:	4b81      	ldr	r3, [pc, #516]	; (800495c <__ieee754_pow+0x254>)
 8004756:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800475a:	429c      	cmp	r4, r3
 800475c:	ee10 aa10 	vmov	sl, s0
 8004760:	463d      	mov	r5, r7
 8004762:	dc06      	bgt.n	8004772 <__ieee754_pow+0x6a>
 8004764:	d101      	bne.n	800476a <__ieee754_pow+0x62>
 8004766:	2e00      	cmp	r6, #0
 8004768:	d1e7      	bne.n	800473a <__ieee754_pow+0x32>
 800476a:	4598      	cmp	r8, r3
 800476c:	dc01      	bgt.n	8004772 <__ieee754_pow+0x6a>
 800476e:	d10f      	bne.n	8004790 <__ieee754_pow+0x88>
 8004770:	b172      	cbz	r2, 8004790 <__ieee754_pow+0x88>
 8004772:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8004776:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800477a:	ea55 050a 	orrs.w	r5, r5, sl
 800477e:	d1dc      	bne.n	800473a <__ieee754_pow+0x32>
 8004780:	e9dd 3200 	ldrd	r3, r2, [sp]
 8004784:	18db      	adds	r3, r3, r3
 8004786:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800478a:	4152      	adcs	r2, r2
 800478c:	429d      	cmp	r5, r3
 800478e:	e7d0      	b.n	8004732 <__ieee754_pow+0x2a>
 8004790:	2d00      	cmp	r5, #0
 8004792:	da3b      	bge.n	800480c <__ieee754_pow+0x104>
 8004794:	4b72      	ldr	r3, [pc, #456]	; (8004960 <__ieee754_pow+0x258>)
 8004796:	4598      	cmp	r8, r3
 8004798:	dc51      	bgt.n	800483e <__ieee754_pow+0x136>
 800479a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800479e:	4598      	cmp	r8, r3
 80047a0:	f340 84ab 	ble.w	80050fa <__ieee754_pow+0x9f2>
 80047a4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80047a8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80047ac:	2b14      	cmp	r3, #20
 80047ae:	dd0f      	ble.n	80047d0 <__ieee754_pow+0xc8>
 80047b0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80047b4:	fa22 f103 	lsr.w	r1, r2, r3
 80047b8:	fa01 f303 	lsl.w	r3, r1, r3
 80047bc:	4293      	cmp	r3, r2
 80047be:	f040 849c 	bne.w	80050fa <__ieee754_pow+0x9f2>
 80047c2:	f001 0101 	and.w	r1, r1, #1
 80047c6:	f1c1 0302 	rsb	r3, r1, #2
 80047ca:	9304      	str	r3, [sp, #16]
 80047cc:	b182      	cbz	r2, 80047f0 <__ieee754_pow+0xe8>
 80047ce:	e05f      	b.n	8004890 <__ieee754_pow+0x188>
 80047d0:	2a00      	cmp	r2, #0
 80047d2:	d15b      	bne.n	800488c <__ieee754_pow+0x184>
 80047d4:	f1c3 0314 	rsb	r3, r3, #20
 80047d8:	fa48 f103 	asr.w	r1, r8, r3
 80047dc:	fa01 f303 	lsl.w	r3, r1, r3
 80047e0:	4543      	cmp	r3, r8
 80047e2:	f040 8487 	bne.w	80050f4 <__ieee754_pow+0x9ec>
 80047e6:	f001 0101 	and.w	r1, r1, #1
 80047ea:	f1c1 0302 	rsb	r3, r1, #2
 80047ee:	9304      	str	r3, [sp, #16]
 80047f0:	4b5c      	ldr	r3, [pc, #368]	; (8004964 <__ieee754_pow+0x25c>)
 80047f2:	4598      	cmp	r8, r3
 80047f4:	d132      	bne.n	800485c <__ieee754_pow+0x154>
 80047f6:	f1b9 0f00 	cmp.w	r9, #0
 80047fa:	f280 8477 	bge.w	80050ec <__ieee754_pow+0x9e4>
 80047fe:	4959      	ldr	r1, [pc, #356]	; (8004964 <__ieee754_pow+0x25c>)
 8004800:	4632      	mov	r2, r6
 8004802:	463b      	mov	r3, r7
 8004804:	2000      	movs	r0, #0
 8004806:	f7fb ffc5 	bl	8000794 <__aeabi_ddiv>
 800480a:	e79c      	b.n	8004746 <__ieee754_pow+0x3e>
 800480c:	2300      	movs	r3, #0
 800480e:	9304      	str	r3, [sp, #16]
 8004810:	2a00      	cmp	r2, #0
 8004812:	d13d      	bne.n	8004890 <__ieee754_pow+0x188>
 8004814:	4b51      	ldr	r3, [pc, #324]	; (800495c <__ieee754_pow+0x254>)
 8004816:	4598      	cmp	r8, r3
 8004818:	d1ea      	bne.n	80047f0 <__ieee754_pow+0xe8>
 800481a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800481e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004822:	ea53 030a 	orrs.w	r3, r3, sl
 8004826:	f000 8459 	beq.w	80050dc <__ieee754_pow+0x9d4>
 800482a:	4b4f      	ldr	r3, [pc, #316]	; (8004968 <__ieee754_pow+0x260>)
 800482c:	429c      	cmp	r4, r3
 800482e:	dd08      	ble.n	8004842 <__ieee754_pow+0x13a>
 8004830:	f1b9 0f00 	cmp.w	r9, #0
 8004834:	f2c0 8456 	blt.w	80050e4 <__ieee754_pow+0x9dc>
 8004838:	e9dd 0100 	ldrd	r0, r1, [sp]
 800483c:	e783      	b.n	8004746 <__ieee754_pow+0x3e>
 800483e:	2302      	movs	r3, #2
 8004840:	e7e5      	b.n	800480e <__ieee754_pow+0x106>
 8004842:	f1b9 0f00 	cmp.w	r9, #0
 8004846:	f04f 0000 	mov.w	r0, #0
 800484a:	f04f 0100 	mov.w	r1, #0
 800484e:	f6bf af7a 	bge.w	8004746 <__ieee754_pow+0x3e>
 8004852:	e9dd 0300 	ldrd	r0, r3, [sp]
 8004856:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800485a:	e774      	b.n	8004746 <__ieee754_pow+0x3e>
 800485c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8004860:	d106      	bne.n	8004870 <__ieee754_pow+0x168>
 8004862:	4632      	mov	r2, r6
 8004864:	463b      	mov	r3, r7
 8004866:	4630      	mov	r0, r6
 8004868:	4639      	mov	r1, r7
 800486a:	f7fb fe69 	bl	8000540 <__aeabi_dmul>
 800486e:	e76a      	b.n	8004746 <__ieee754_pow+0x3e>
 8004870:	4b3e      	ldr	r3, [pc, #248]	; (800496c <__ieee754_pow+0x264>)
 8004872:	4599      	cmp	r9, r3
 8004874:	d10c      	bne.n	8004890 <__ieee754_pow+0x188>
 8004876:	2d00      	cmp	r5, #0
 8004878:	db0a      	blt.n	8004890 <__ieee754_pow+0x188>
 800487a:	ec47 6b10 	vmov	d0, r6, r7
 800487e:	b009      	add	sp, #36	; 0x24
 8004880:	ecbd 8b06 	vpop	{d8-d10}
 8004884:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004888:	f7ff bd9a 	b.w	80043c0 <__ieee754_sqrt>
 800488c:	2300      	movs	r3, #0
 800488e:	9304      	str	r3, [sp, #16]
 8004890:	ec47 6b10 	vmov	d0, r6, r7
 8004894:	f000 fe04 	bl	80054a0 <fabs>
 8004898:	ec51 0b10 	vmov	r0, r1, d0
 800489c:	f1ba 0f00 	cmp.w	sl, #0
 80048a0:	d129      	bne.n	80048f6 <__ieee754_pow+0x1ee>
 80048a2:	b124      	cbz	r4, 80048ae <__ieee754_pow+0x1a6>
 80048a4:	4b2f      	ldr	r3, [pc, #188]	; (8004964 <__ieee754_pow+0x25c>)
 80048a6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d123      	bne.n	80048f6 <__ieee754_pow+0x1ee>
 80048ae:	f1b9 0f00 	cmp.w	r9, #0
 80048b2:	da05      	bge.n	80048c0 <__ieee754_pow+0x1b8>
 80048b4:	4602      	mov	r2, r0
 80048b6:	460b      	mov	r3, r1
 80048b8:	2000      	movs	r0, #0
 80048ba:	492a      	ldr	r1, [pc, #168]	; (8004964 <__ieee754_pow+0x25c>)
 80048bc:	f7fb ff6a 	bl	8000794 <__aeabi_ddiv>
 80048c0:	2d00      	cmp	r5, #0
 80048c2:	f6bf af40 	bge.w	8004746 <__ieee754_pow+0x3e>
 80048c6:	9b04      	ldr	r3, [sp, #16]
 80048c8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80048cc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80048d0:	431c      	orrs	r4, r3
 80048d2:	d108      	bne.n	80048e6 <__ieee754_pow+0x1de>
 80048d4:	4602      	mov	r2, r0
 80048d6:	460b      	mov	r3, r1
 80048d8:	4610      	mov	r0, r2
 80048da:	4619      	mov	r1, r3
 80048dc:	f7fb fc78 	bl	80001d0 <__aeabi_dsub>
 80048e0:	4602      	mov	r2, r0
 80048e2:	460b      	mov	r3, r1
 80048e4:	e78f      	b.n	8004806 <__ieee754_pow+0xfe>
 80048e6:	9b04      	ldr	r3, [sp, #16]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	f47f af2c 	bne.w	8004746 <__ieee754_pow+0x3e>
 80048ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80048f2:	4619      	mov	r1, r3
 80048f4:	e727      	b.n	8004746 <__ieee754_pow+0x3e>
 80048f6:	0feb      	lsrs	r3, r5, #31
 80048f8:	3b01      	subs	r3, #1
 80048fa:	9306      	str	r3, [sp, #24]
 80048fc:	9a06      	ldr	r2, [sp, #24]
 80048fe:	9b04      	ldr	r3, [sp, #16]
 8004900:	4313      	orrs	r3, r2
 8004902:	d102      	bne.n	800490a <__ieee754_pow+0x202>
 8004904:	4632      	mov	r2, r6
 8004906:	463b      	mov	r3, r7
 8004908:	e7e6      	b.n	80048d8 <__ieee754_pow+0x1d0>
 800490a:	4b19      	ldr	r3, [pc, #100]	; (8004970 <__ieee754_pow+0x268>)
 800490c:	4598      	cmp	r8, r3
 800490e:	f340 80fb 	ble.w	8004b08 <__ieee754_pow+0x400>
 8004912:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004916:	4598      	cmp	r8, r3
 8004918:	4b13      	ldr	r3, [pc, #76]	; (8004968 <__ieee754_pow+0x260>)
 800491a:	dd0c      	ble.n	8004936 <__ieee754_pow+0x22e>
 800491c:	429c      	cmp	r4, r3
 800491e:	dc0f      	bgt.n	8004940 <__ieee754_pow+0x238>
 8004920:	f1b9 0f00 	cmp.w	r9, #0
 8004924:	da0f      	bge.n	8004946 <__ieee754_pow+0x23e>
 8004926:	2000      	movs	r0, #0
 8004928:	b009      	add	sp, #36	; 0x24
 800492a:	ecbd 8b06 	vpop	{d8-d10}
 800492e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004932:	f000 be66 	b.w	8005602 <__math_oflow>
 8004936:	429c      	cmp	r4, r3
 8004938:	dbf2      	blt.n	8004920 <__ieee754_pow+0x218>
 800493a:	4b0a      	ldr	r3, [pc, #40]	; (8004964 <__ieee754_pow+0x25c>)
 800493c:	429c      	cmp	r4, r3
 800493e:	dd19      	ble.n	8004974 <__ieee754_pow+0x26c>
 8004940:	f1b9 0f00 	cmp.w	r9, #0
 8004944:	dcef      	bgt.n	8004926 <__ieee754_pow+0x21e>
 8004946:	2000      	movs	r0, #0
 8004948:	b009      	add	sp, #36	; 0x24
 800494a:	ecbd 8b06 	vpop	{d8-d10}
 800494e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004952:	f000 be4d 	b.w	80055f0 <__math_uflow>
 8004956:	bf00      	nop
 8004958:	fff00000 	.word	0xfff00000
 800495c:	7ff00000 	.word	0x7ff00000
 8004960:	433fffff 	.word	0x433fffff
 8004964:	3ff00000 	.word	0x3ff00000
 8004968:	3fefffff 	.word	0x3fefffff
 800496c:	3fe00000 	.word	0x3fe00000
 8004970:	41e00000 	.word	0x41e00000
 8004974:	4b60      	ldr	r3, [pc, #384]	; (8004af8 <__ieee754_pow+0x3f0>)
 8004976:	2200      	movs	r2, #0
 8004978:	f7fb fc2a 	bl	80001d0 <__aeabi_dsub>
 800497c:	a354      	add	r3, pc, #336	; (adr r3, 8004ad0 <__ieee754_pow+0x3c8>)
 800497e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004982:	4604      	mov	r4, r0
 8004984:	460d      	mov	r5, r1
 8004986:	f7fb fddb 	bl	8000540 <__aeabi_dmul>
 800498a:	a353      	add	r3, pc, #332	; (adr r3, 8004ad8 <__ieee754_pow+0x3d0>)
 800498c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004990:	4606      	mov	r6, r0
 8004992:	460f      	mov	r7, r1
 8004994:	4620      	mov	r0, r4
 8004996:	4629      	mov	r1, r5
 8004998:	f7fb fdd2 	bl	8000540 <__aeabi_dmul>
 800499c:	4b57      	ldr	r3, [pc, #348]	; (8004afc <__ieee754_pow+0x3f4>)
 800499e:	4682      	mov	sl, r0
 80049a0:	468b      	mov	fp, r1
 80049a2:	2200      	movs	r2, #0
 80049a4:	4620      	mov	r0, r4
 80049a6:	4629      	mov	r1, r5
 80049a8:	f7fb fdca 	bl	8000540 <__aeabi_dmul>
 80049ac:	4602      	mov	r2, r0
 80049ae:	460b      	mov	r3, r1
 80049b0:	a14b      	add	r1, pc, #300	; (adr r1, 8004ae0 <__ieee754_pow+0x3d8>)
 80049b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80049b6:	f7fb fc0b 	bl	80001d0 <__aeabi_dsub>
 80049ba:	4622      	mov	r2, r4
 80049bc:	462b      	mov	r3, r5
 80049be:	f7fb fdbf 	bl	8000540 <__aeabi_dmul>
 80049c2:	4602      	mov	r2, r0
 80049c4:	460b      	mov	r3, r1
 80049c6:	2000      	movs	r0, #0
 80049c8:	494d      	ldr	r1, [pc, #308]	; (8004b00 <__ieee754_pow+0x3f8>)
 80049ca:	f7fb fc01 	bl	80001d0 <__aeabi_dsub>
 80049ce:	4622      	mov	r2, r4
 80049d0:	4680      	mov	r8, r0
 80049d2:	4689      	mov	r9, r1
 80049d4:	462b      	mov	r3, r5
 80049d6:	4620      	mov	r0, r4
 80049d8:	4629      	mov	r1, r5
 80049da:	f7fb fdb1 	bl	8000540 <__aeabi_dmul>
 80049de:	4602      	mov	r2, r0
 80049e0:	460b      	mov	r3, r1
 80049e2:	4640      	mov	r0, r8
 80049e4:	4649      	mov	r1, r9
 80049e6:	f7fb fdab 	bl	8000540 <__aeabi_dmul>
 80049ea:	a33f      	add	r3, pc, #252	; (adr r3, 8004ae8 <__ieee754_pow+0x3e0>)
 80049ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f0:	f7fb fda6 	bl	8000540 <__aeabi_dmul>
 80049f4:	4602      	mov	r2, r0
 80049f6:	460b      	mov	r3, r1
 80049f8:	4650      	mov	r0, sl
 80049fa:	4659      	mov	r1, fp
 80049fc:	f7fb fbe8 	bl	80001d0 <__aeabi_dsub>
 8004a00:	4602      	mov	r2, r0
 8004a02:	460b      	mov	r3, r1
 8004a04:	4680      	mov	r8, r0
 8004a06:	4689      	mov	r9, r1
 8004a08:	4630      	mov	r0, r6
 8004a0a:	4639      	mov	r1, r7
 8004a0c:	f7fb fbe2 	bl	80001d4 <__adddf3>
 8004a10:	2000      	movs	r0, #0
 8004a12:	4632      	mov	r2, r6
 8004a14:	463b      	mov	r3, r7
 8004a16:	4604      	mov	r4, r0
 8004a18:	460d      	mov	r5, r1
 8004a1a:	f7fb fbd9 	bl	80001d0 <__aeabi_dsub>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	460b      	mov	r3, r1
 8004a22:	4640      	mov	r0, r8
 8004a24:	4649      	mov	r1, r9
 8004a26:	f7fb fbd3 	bl	80001d0 <__aeabi_dsub>
 8004a2a:	9b04      	ldr	r3, [sp, #16]
 8004a2c:	9a06      	ldr	r2, [sp, #24]
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	4313      	orrs	r3, r2
 8004a32:	4682      	mov	sl, r0
 8004a34:	468b      	mov	fp, r1
 8004a36:	f040 81e7 	bne.w	8004e08 <__ieee754_pow+0x700>
 8004a3a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8004af0 <__ieee754_pow+0x3e8>
 8004a3e:	eeb0 8a47 	vmov.f32	s16, s14
 8004a42:	eef0 8a67 	vmov.f32	s17, s15
 8004a46:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004a4a:	2600      	movs	r6, #0
 8004a4c:	4632      	mov	r2, r6
 8004a4e:	463b      	mov	r3, r7
 8004a50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004a54:	f7fb fbbc 	bl	80001d0 <__aeabi_dsub>
 8004a58:	4622      	mov	r2, r4
 8004a5a:	462b      	mov	r3, r5
 8004a5c:	f7fb fd70 	bl	8000540 <__aeabi_dmul>
 8004a60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a64:	4680      	mov	r8, r0
 8004a66:	4689      	mov	r9, r1
 8004a68:	4650      	mov	r0, sl
 8004a6a:	4659      	mov	r1, fp
 8004a6c:	f7fb fd68 	bl	8000540 <__aeabi_dmul>
 8004a70:	4602      	mov	r2, r0
 8004a72:	460b      	mov	r3, r1
 8004a74:	4640      	mov	r0, r8
 8004a76:	4649      	mov	r1, r9
 8004a78:	f7fb fbac 	bl	80001d4 <__adddf3>
 8004a7c:	4632      	mov	r2, r6
 8004a7e:	463b      	mov	r3, r7
 8004a80:	4680      	mov	r8, r0
 8004a82:	4689      	mov	r9, r1
 8004a84:	4620      	mov	r0, r4
 8004a86:	4629      	mov	r1, r5
 8004a88:	f7fb fd5a 	bl	8000540 <__aeabi_dmul>
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	4604      	mov	r4, r0
 8004a90:	460d      	mov	r5, r1
 8004a92:	4602      	mov	r2, r0
 8004a94:	4649      	mov	r1, r9
 8004a96:	4640      	mov	r0, r8
 8004a98:	f7fb fb9c 	bl	80001d4 <__adddf3>
 8004a9c:	4b19      	ldr	r3, [pc, #100]	; (8004b04 <__ieee754_pow+0x3fc>)
 8004a9e:	4299      	cmp	r1, r3
 8004aa0:	ec45 4b19 	vmov	d9, r4, r5
 8004aa4:	4606      	mov	r6, r0
 8004aa6:	460f      	mov	r7, r1
 8004aa8:	468b      	mov	fp, r1
 8004aaa:	f340 82f0 	ble.w	800508e <__ieee754_pow+0x986>
 8004aae:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8004ab2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8004ab6:	4303      	orrs	r3, r0
 8004ab8:	f000 81e4 	beq.w	8004e84 <__ieee754_pow+0x77c>
 8004abc:	ec51 0b18 	vmov	r0, r1, d8
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	f7fb ffae 	bl	8000a24 <__aeabi_dcmplt>
 8004ac8:	3800      	subs	r0, #0
 8004aca:	bf18      	it	ne
 8004acc:	2001      	movne	r0, #1
 8004ace:	e72b      	b.n	8004928 <__ieee754_pow+0x220>
 8004ad0:	60000000 	.word	0x60000000
 8004ad4:	3ff71547 	.word	0x3ff71547
 8004ad8:	f85ddf44 	.word	0xf85ddf44
 8004adc:	3e54ae0b 	.word	0x3e54ae0b
 8004ae0:	55555555 	.word	0x55555555
 8004ae4:	3fd55555 	.word	0x3fd55555
 8004ae8:	652b82fe 	.word	0x652b82fe
 8004aec:	3ff71547 	.word	0x3ff71547
 8004af0:	00000000 	.word	0x00000000
 8004af4:	bff00000 	.word	0xbff00000
 8004af8:	3ff00000 	.word	0x3ff00000
 8004afc:	3fd00000 	.word	0x3fd00000
 8004b00:	3fe00000 	.word	0x3fe00000
 8004b04:	408fffff 	.word	0x408fffff
 8004b08:	4bd5      	ldr	r3, [pc, #852]	; (8004e60 <__ieee754_pow+0x758>)
 8004b0a:	402b      	ands	r3, r5
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	b92b      	cbnz	r3, 8004b1c <__ieee754_pow+0x414>
 8004b10:	4bd4      	ldr	r3, [pc, #848]	; (8004e64 <__ieee754_pow+0x75c>)
 8004b12:	f7fb fd15 	bl	8000540 <__aeabi_dmul>
 8004b16:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8004b1a:	460c      	mov	r4, r1
 8004b1c:	1523      	asrs	r3, r4, #20
 8004b1e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004b22:	4413      	add	r3, r2
 8004b24:	9305      	str	r3, [sp, #20]
 8004b26:	4bd0      	ldr	r3, [pc, #832]	; (8004e68 <__ieee754_pow+0x760>)
 8004b28:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004b2c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8004b30:	429c      	cmp	r4, r3
 8004b32:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004b36:	dd08      	ble.n	8004b4a <__ieee754_pow+0x442>
 8004b38:	4bcc      	ldr	r3, [pc, #816]	; (8004e6c <__ieee754_pow+0x764>)
 8004b3a:	429c      	cmp	r4, r3
 8004b3c:	f340 8162 	ble.w	8004e04 <__ieee754_pow+0x6fc>
 8004b40:	9b05      	ldr	r3, [sp, #20]
 8004b42:	3301      	adds	r3, #1
 8004b44:	9305      	str	r3, [sp, #20]
 8004b46:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004b4a:	2400      	movs	r4, #0
 8004b4c:	00e3      	lsls	r3, r4, #3
 8004b4e:	9307      	str	r3, [sp, #28]
 8004b50:	4bc7      	ldr	r3, [pc, #796]	; (8004e70 <__ieee754_pow+0x768>)
 8004b52:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004b56:	ed93 7b00 	vldr	d7, [r3]
 8004b5a:	4629      	mov	r1, r5
 8004b5c:	ec53 2b17 	vmov	r2, r3, d7
 8004b60:	eeb0 9a47 	vmov.f32	s18, s14
 8004b64:	eef0 9a67 	vmov.f32	s19, s15
 8004b68:	4682      	mov	sl, r0
 8004b6a:	f7fb fb31 	bl	80001d0 <__aeabi_dsub>
 8004b6e:	4652      	mov	r2, sl
 8004b70:	4606      	mov	r6, r0
 8004b72:	460f      	mov	r7, r1
 8004b74:	462b      	mov	r3, r5
 8004b76:	ec51 0b19 	vmov	r0, r1, d9
 8004b7a:	f7fb fb2b 	bl	80001d4 <__adddf3>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	460b      	mov	r3, r1
 8004b82:	2000      	movs	r0, #0
 8004b84:	49bb      	ldr	r1, [pc, #748]	; (8004e74 <__ieee754_pow+0x76c>)
 8004b86:	f7fb fe05 	bl	8000794 <__aeabi_ddiv>
 8004b8a:	ec41 0b1a 	vmov	d10, r0, r1
 8004b8e:	4602      	mov	r2, r0
 8004b90:	460b      	mov	r3, r1
 8004b92:	4630      	mov	r0, r6
 8004b94:	4639      	mov	r1, r7
 8004b96:	f7fb fcd3 	bl	8000540 <__aeabi_dmul>
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ba0:	9302      	str	r3, [sp, #8]
 8004ba2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004ba6:	46ab      	mov	fp, r5
 8004ba8:	106d      	asrs	r5, r5, #1
 8004baa:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004bae:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8004bb2:	ec41 0b18 	vmov	d8, r0, r1
 8004bb6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8004bba:	2200      	movs	r2, #0
 8004bbc:	4640      	mov	r0, r8
 8004bbe:	4649      	mov	r1, r9
 8004bc0:	4614      	mov	r4, r2
 8004bc2:	461d      	mov	r5, r3
 8004bc4:	f7fb fcbc 	bl	8000540 <__aeabi_dmul>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	460b      	mov	r3, r1
 8004bcc:	4630      	mov	r0, r6
 8004bce:	4639      	mov	r1, r7
 8004bd0:	f7fb fafe 	bl	80001d0 <__aeabi_dsub>
 8004bd4:	ec53 2b19 	vmov	r2, r3, d9
 8004bd8:	4606      	mov	r6, r0
 8004bda:	460f      	mov	r7, r1
 8004bdc:	4620      	mov	r0, r4
 8004bde:	4629      	mov	r1, r5
 8004be0:	f7fb faf6 	bl	80001d0 <__aeabi_dsub>
 8004be4:	4602      	mov	r2, r0
 8004be6:	460b      	mov	r3, r1
 8004be8:	4650      	mov	r0, sl
 8004bea:	4659      	mov	r1, fp
 8004bec:	f7fb faf0 	bl	80001d0 <__aeabi_dsub>
 8004bf0:	4642      	mov	r2, r8
 8004bf2:	464b      	mov	r3, r9
 8004bf4:	f7fb fca4 	bl	8000540 <__aeabi_dmul>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	4630      	mov	r0, r6
 8004bfe:	4639      	mov	r1, r7
 8004c00:	f7fb fae6 	bl	80001d0 <__aeabi_dsub>
 8004c04:	ec53 2b1a 	vmov	r2, r3, d10
 8004c08:	f7fb fc9a 	bl	8000540 <__aeabi_dmul>
 8004c0c:	ec53 2b18 	vmov	r2, r3, d8
 8004c10:	ec41 0b19 	vmov	d9, r0, r1
 8004c14:	ec51 0b18 	vmov	r0, r1, d8
 8004c18:	f7fb fc92 	bl	8000540 <__aeabi_dmul>
 8004c1c:	a37c      	add	r3, pc, #496	; (adr r3, 8004e10 <__ieee754_pow+0x708>)
 8004c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c22:	4604      	mov	r4, r0
 8004c24:	460d      	mov	r5, r1
 8004c26:	f7fb fc8b 	bl	8000540 <__aeabi_dmul>
 8004c2a:	a37b      	add	r3, pc, #492	; (adr r3, 8004e18 <__ieee754_pow+0x710>)
 8004c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c30:	f7fb fad0 	bl	80001d4 <__adddf3>
 8004c34:	4622      	mov	r2, r4
 8004c36:	462b      	mov	r3, r5
 8004c38:	f7fb fc82 	bl	8000540 <__aeabi_dmul>
 8004c3c:	a378      	add	r3, pc, #480	; (adr r3, 8004e20 <__ieee754_pow+0x718>)
 8004c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c42:	f7fb fac7 	bl	80001d4 <__adddf3>
 8004c46:	4622      	mov	r2, r4
 8004c48:	462b      	mov	r3, r5
 8004c4a:	f7fb fc79 	bl	8000540 <__aeabi_dmul>
 8004c4e:	a376      	add	r3, pc, #472	; (adr r3, 8004e28 <__ieee754_pow+0x720>)
 8004c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c54:	f7fb fabe 	bl	80001d4 <__adddf3>
 8004c58:	4622      	mov	r2, r4
 8004c5a:	462b      	mov	r3, r5
 8004c5c:	f7fb fc70 	bl	8000540 <__aeabi_dmul>
 8004c60:	a373      	add	r3, pc, #460	; (adr r3, 8004e30 <__ieee754_pow+0x728>)
 8004c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c66:	f7fb fab5 	bl	80001d4 <__adddf3>
 8004c6a:	4622      	mov	r2, r4
 8004c6c:	462b      	mov	r3, r5
 8004c6e:	f7fb fc67 	bl	8000540 <__aeabi_dmul>
 8004c72:	a371      	add	r3, pc, #452	; (adr r3, 8004e38 <__ieee754_pow+0x730>)
 8004c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c78:	f7fb faac 	bl	80001d4 <__adddf3>
 8004c7c:	4622      	mov	r2, r4
 8004c7e:	4606      	mov	r6, r0
 8004c80:	460f      	mov	r7, r1
 8004c82:	462b      	mov	r3, r5
 8004c84:	4620      	mov	r0, r4
 8004c86:	4629      	mov	r1, r5
 8004c88:	f7fb fc5a 	bl	8000540 <__aeabi_dmul>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	460b      	mov	r3, r1
 8004c90:	4630      	mov	r0, r6
 8004c92:	4639      	mov	r1, r7
 8004c94:	f7fb fc54 	bl	8000540 <__aeabi_dmul>
 8004c98:	4642      	mov	r2, r8
 8004c9a:	4604      	mov	r4, r0
 8004c9c:	460d      	mov	r5, r1
 8004c9e:	464b      	mov	r3, r9
 8004ca0:	ec51 0b18 	vmov	r0, r1, d8
 8004ca4:	f7fb fa96 	bl	80001d4 <__adddf3>
 8004ca8:	ec53 2b19 	vmov	r2, r3, d9
 8004cac:	f7fb fc48 	bl	8000540 <__aeabi_dmul>
 8004cb0:	4622      	mov	r2, r4
 8004cb2:	462b      	mov	r3, r5
 8004cb4:	f7fb fa8e 	bl	80001d4 <__adddf3>
 8004cb8:	4642      	mov	r2, r8
 8004cba:	4682      	mov	sl, r0
 8004cbc:	468b      	mov	fp, r1
 8004cbe:	464b      	mov	r3, r9
 8004cc0:	4640      	mov	r0, r8
 8004cc2:	4649      	mov	r1, r9
 8004cc4:	f7fb fc3c 	bl	8000540 <__aeabi_dmul>
 8004cc8:	4b6b      	ldr	r3, [pc, #428]	; (8004e78 <__ieee754_pow+0x770>)
 8004cca:	2200      	movs	r2, #0
 8004ccc:	4606      	mov	r6, r0
 8004cce:	460f      	mov	r7, r1
 8004cd0:	f7fb fa80 	bl	80001d4 <__adddf3>
 8004cd4:	4652      	mov	r2, sl
 8004cd6:	465b      	mov	r3, fp
 8004cd8:	f7fb fa7c 	bl	80001d4 <__adddf3>
 8004cdc:	2000      	movs	r0, #0
 8004cde:	4604      	mov	r4, r0
 8004ce0:	460d      	mov	r5, r1
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	4640      	mov	r0, r8
 8004ce8:	4649      	mov	r1, r9
 8004cea:	f7fb fc29 	bl	8000540 <__aeabi_dmul>
 8004cee:	4b62      	ldr	r3, [pc, #392]	; (8004e78 <__ieee754_pow+0x770>)
 8004cf0:	4680      	mov	r8, r0
 8004cf2:	4689      	mov	r9, r1
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	4620      	mov	r0, r4
 8004cf8:	4629      	mov	r1, r5
 8004cfa:	f7fb fa69 	bl	80001d0 <__aeabi_dsub>
 8004cfe:	4632      	mov	r2, r6
 8004d00:	463b      	mov	r3, r7
 8004d02:	f7fb fa65 	bl	80001d0 <__aeabi_dsub>
 8004d06:	4602      	mov	r2, r0
 8004d08:	460b      	mov	r3, r1
 8004d0a:	4650      	mov	r0, sl
 8004d0c:	4659      	mov	r1, fp
 8004d0e:	f7fb fa5f 	bl	80001d0 <__aeabi_dsub>
 8004d12:	ec53 2b18 	vmov	r2, r3, d8
 8004d16:	f7fb fc13 	bl	8000540 <__aeabi_dmul>
 8004d1a:	4622      	mov	r2, r4
 8004d1c:	4606      	mov	r6, r0
 8004d1e:	460f      	mov	r7, r1
 8004d20:	462b      	mov	r3, r5
 8004d22:	ec51 0b19 	vmov	r0, r1, d9
 8004d26:	f7fb fc0b 	bl	8000540 <__aeabi_dmul>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	4630      	mov	r0, r6
 8004d30:	4639      	mov	r1, r7
 8004d32:	f7fb fa4f 	bl	80001d4 <__adddf3>
 8004d36:	4606      	mov	r6, r0
 8004d38:	460f      	mov	r7, r1
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	4640      	mov	r0, r8
 8004d40:	4649      	mov	r1, r9
 8004d42:	f7fb fa47 	bl	80001d4 <__adddf3>
 8004d46:	a33e      	add	r3, pc, #248	; (adr r3, 8004e40 <__ieee754_pow+0x738>)
 8004d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4c:	2000      	movs	r0, #0
 8004d4e:	4604      	mov	r4, r0
 8004d50:	460d      	mov	r5, r1
 8004d52:	f7fb fbf5 	bl	8000540 <__aeabi_dmul>
 8004d56:	4642      	mov	r2, r8
 8004d58:	ec41 0b18 	vmov	d8, r0, r1
 8004d5c:	464b      	mov	r3, r9
 8004d5e:	4620      	mov	r0, r4
 8004d60:	4629      	mov	r1, r5
 8004d62:	f7fb fa35 	bl	80001d0 <__aeabi_dsub>
 8004d66:	4602      	mov	r2, r0
 8004d68:	460b      	mov	r3, r1
 8004d6a:	4630      	mov	r0, r6
 8004d6c:	4639      	mov	r1, r7
 8004d6e:	f7fb fa2f 	bl	80001d0 <__aeabi_dsub>
 8004d72:	a335      	add	r3, pc, #212	; (adr r3, 8004e48 <__ieee754_pow+0x740>)
 8004d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d78:	f7fb fbe2 	bl	8000540 <__aeabi_dmul>
 8004d7c:	a334      	add	r3, pc, #208	; (adr r3, 8004e50 <__ieee754_pow+0x748>)
 8004d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d82:	4606      	mov	r6, r0
 8004d84:	460f      	mov	r7, r1
 8004d86:	4620      	mov	r0, r4
 8004d88:	4629      	mov	r1, r5
 8004d8a:	f7fb fbd9 	bl	8000540 <__aeabi_dmul>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	460b      	mov	r3, r1
 8004d92:	4630      	mov	r0, r6
 8004d94:	4639      	mov	r1, r7
 8004d96:	f7fb fa1d 	bl	80001d4 <__adddf3>
 8004d9a:	9a07      	ldr	r2, [sp, #28]
 8004d9c:	4b37      	ldr	r3, [pc, #220]	; (8004e7c <__ieee754_pow+0x774>)
 8004d9e:	4413      	add	r3, r2
 8004da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da4:	f7fb fa16 	bl	80001d4 <__adddf3>
 8004da8:	4682      	mov	sl, r0
 8004daa:	9805      	ldr	r0, [sp, #20]
 8004dac:	468b      	mov	fp, r1
 8004dae:	f7fb fb5d 	bl	800046c <__aeabi_i2d>
 8004db2:	9a07      	ldr	r2, [sp, #28]
 8004db4:	4b32      	ldr	r3, [pc, #200]	; (8004e80 <__ieee754_pow+0x778>)
 8004db6:	4413      	add	r3, r2
 8004db8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004dbc:	4606      	mov	r6, r0
 8004dbe:	460f      	mov	r7, r1
 8004dc0:	4652      	mov	r2, sl
 8004dc2:	465b      	mov	r3, fp
 8004dc4:	ec51 0b18 	vmov	r0, r1, d8
 8004dc8:	f7fb fa04 	bl	80001d4 <__adddf3>
 8004dcc:	4642      	mov	r2, r8
 8004dce:	464b      	mov	r3, r9
 8004dd0:	f7fb fa00 	bl	80001d4 <__adddf3>
 8004dd4:	4632      	mov	r2, r6
 8004dd6:	463b      	mov	r3, r7
 8004dd8:	f7fb f9fc 	bl	80001d4 <__adddf3>
 8004ddc:	2000      	movs	r0, #0
 8004dde:	4632      	mov	r2, r6
 8004de0:	463b      	mov	r3, r7
 8004de2:	4604      	mov	r4, r0
 8004de4:	460d      	mov	r5, r1
 8004de6:	f7fb f9f3 	bl	80001d0 <__aeabi_dsub>
 8004dea:	4642      	mov	r2, r8
 8004dec:	464b      	mov	r3, r9
 8004dee:	f7fb f9ef 	bl	80001d0 <__aeabi_dsub>
 8004df2:	ec53 2b18 	vmov	r2, r3, d8
 8004df6:	f7fb f9eb 	bl	80001d0 <__aeabi_dsub>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	4650      	mov	r0, sl
 8004e00:	4659      	mov	r1, fp
 8004e02:	e610      	b.n	8004a26 <__ieee754_pow+0x31e>
 8004e04:	2401      	movs	r4, #1
 8004e06:	e6a1      	b.n	8004b4c <__ieee754_pow+0x444>
 8004e08:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8004e58 <__ieee754_pow+0x750>
 8004e0c:	e617      	b.n	8004a3e <__ieee754_pow+0x336>
 8004e0e:	bf00      	nop
 8004e10:	4a454eef 	.word	0x4a454eef
 8004e14:	3fca7e28 	.word	0x3fca7e28
 8004e18:	93c9db65 	.word	0x93c9db65
 8004e1c:	3fcd864a 	.word	0x3fcd864a
 8004e20:	a91d4101 	.word	0xa91d4101
 8004e24:	3fd17460 	.word	0x3fd17460
 8004e28:	518f264d 	.word	0x518f264d
 8004e2c:	3fd55555 	.word	0x3fd55555
 8004e30:	db6fabff 	.word	0xdb6fabff
 8004e34:	3fdb6db6 	.word	0x3fdb6db6
 8004e38:	33333303 	.word	0x33333303
 8004e3c:	3fe33333 	.word	0x3fe33333
 8004e40:	e0000000 	.word	0xe0000000
 8004e44:	3feec709 	.word	0x3feec709
 8004e48:	dc3a03fd 	.word	0xdc3a03fd
 8004e4c:	3feec709 	.word	0x3feec709
 8004e50:	145b01f5 	.word	0x145b01f5
 8004e54:	be3e2fe0 	.word	0xbe3e2fe0
 8004e58:	00000000 	.word	0x00000000
 8004e5c:	3ff00000 	.word	0x3ff00000
 8004e60:	7ff00000 	.word	0x7ff00000
 8004e64:	43400000 	.word	0x43400000
 8004e68:	0003988e 	.word	0x0003988e
 8004e6c:	000bb679 	.word	0x000bb679
 8004e70:	08005678 	.word	0x08005678
 8004e74:	3ff00000 	.word	0x3ff00000
 8004e78:	40080000 	.word	0x40080000
 8004e7c:	08005698 	.word	0x08005698
 8004e80:	08005688 	.word	0x08005688
 8004e84:	a3b3      	add	r3, pc, #716	; (adr r3, 8005154 <__ieee754_pow+0xa4c>)
 8004e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8a:	4640      	mov	r0, r8
 8004e8c:	4649      	mov	r1, r9
 8004e8e:	f7fb f9a1 	bl	80001d4 <__adddf3>
 8004e92:	4622      	mov	r2, r4
 8004e94:	ec41 0b1a 	vmov	d10, r0, r1
 8004e98:	462b      	mov	r3, r5
 8004e9a:	4630      	mov	r0, r6
 8004e9c:	4639      	mov	r1, r7
 8004e9e:	f7fb f997 	bl	80001d0 <__aeabi_dsub>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	ec51 0b1a 	vmov	r0, r1, d10
 8004eaa:	f7fb fdd9 	bl	8000a60 <__aeabi_dcmpgt>
 8004eae:	2800      	cmp	r0, #0
 8004eb0:	f47f ae04 	bne.w	8004abc <__ieee754_pow+0x3b4>
 8004eb4:	4aa2      	ldr	r2, [pc, #648]	; (8005140 <__ieee754_pow+0xa38>)
 8004eb6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	f340 8107 	ble.w	80050ce <__ieee754_pow+0x9c6>
 8004ec0:	151b      	asrs	r3, r3, #20
 8004ec2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8004ec6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8004eca:	fa4a fa03 	asr.w	sl, sl, r3
 8004ece:	44da      	add	sl, fp
 8004ed0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8004ed4:	489b      	ldr	r0, [pc, #620]	; (8005144 <__ieee754_pow+0xa3c>)
 8004ed6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8004eda:	4108      	asrs	r0, r1
 8004edc:	ea00 030a 	and.w	r3, r0, sl
 8004ee0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8004ee4:	f1c1 0114 	rsb	r1, r1, #20
 8004ee8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8004eec:	fa4a fa01 	asr.w	sl, sl, r1
 8004ef0:	f1bb 0f00 	cmp.w	fp, #0
 8004ef4:	f04f 0200 	mov.w	r2, #0
 8004ef8:	4620      	mov	r0, r4
 8004efa:	4629      	mov	r1, r5
 8004efc:	bfb8      	it	lt
 8004efe:	f1ca 0a00 	rsblt	sl, sl, #0
 8004f02:	f7fb f965 	bl	80001d0 <__aeabi_dsub>
 8004f06:	ec41 0b19 	vmov	d9, r0, r1
 8004f0a:	4642      	mov	r2, r8
 8004f0c:	464b      	mov	r3, r9
 8004f0e:	ec51 0b19 	vmov	r0, r1, d9
 8004f12:	f7fb f95f 	bl	80001d4 <__adddf3>
 8004f16:	a37a      	add	r3, pc, #488	; (adr r3, 8005100 <__ieee754_pow+0x9f8>)
 8004f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1c:	2000      	movs	r0, #0
 8004f1e:	4604      	mov	r4, r0
 8004f20:	460d      	mov	r5, r1
 8004f22:	f7fb fb0d 	bl	8000540 <__aeabi_dmul>
 8004f26:	ec53 2b19 	vmov	r2, r3, d9
 8004f2a:	4606      	mov	r6, r0
 8004f2c:	460f      	mov	r7, r1
 8004f2e:	4620      	mov	r0, r4
 8004f30:	4629      	mov	r1, r5
 8004f32:	f7fb f94d 	bl	80001d0 <__aeabi_dsub>
 8004f36:	4602      	mov	r2, r0
 8004f38:	460b      	mov	r3, r1
 8004f3a:	4640      	mov	r0, r8
 8004f3c:	4649      	mov	r1, r9
 8004f3e:	f7fb f947 	bl	80001d0 <__aeabi_dsub>
 8004f42:	a371      	add	r3, pc, #452	; (adr r3, 8005108 <__ieee754_pow+0xa00>)
 8004f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f48:	f7fb fafa 	bl	8000540 <__aeabi_dmul>
 8004f4c:	a370      	add	r3, pc, #448	; (adr r3, 8005110 <__ieee754_pow+0xa08>)
 8004f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f52:	4680      	mov	r8, r0
 8004f54:	4689      	mov	r9, r1
 8004f56:	4620      	mov	r0, r4
 8004f58:	4629      	mov	r1, r5
 8004f5a:	f7fb faf1 	bl	8000540 <__aeabi_dmul>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	460b      	mov	r3, r1
 8004f62:	4640      	mov	r0, r8
 8004f64:	4649      	mov	r1, r9
 8004f66:	f7fb f935 	bl	80001d4 <__adddf3>
 8004f6a:	4604      	mov	r4, r0
 8004f6c:	460d      	mov	r5, r1
 8004f6e:	4602      	mov	r2, r0
 8004f70:	460b      	mov	r3, r1
 8004f72:	4630      	mov	r0, r6
 8004f74:	4639      	mov	r1, r7
 8004f76:	f7fb f92d 	bl	80001d4 <__adddf3>
 8004f7a:	4632      	mov	r2, r6
 8004f7c:	463b      	mov	r3, r7
 8004f7e:	4680      	mov	r8, r0
 8004f80:	4689      	mov	r9, r1
 8004f82:	f7fb f925 	bl	80001d0 <__aeabi_dsub>
 8004f86:	4602      	mov	r2, r0
 8004f88:	460b      	mov	r3, r1
 8004f8a:	4620      	mov	r0, r4
 8004f8c:	4629      	mov	r1, r5
 8004f8e:	f7fb f91f 	bl	80001d0 <__aeabi_dsub>
 8004f92:	4642      	mov	r2, r8
 8004f94:	4606      	mov	r6, r0
 8004f96:	460f      	mov	r7, r1
 8004f98:	464b      	mov	r3, r9
 8004f9a:	4640      	mov	r0, r8
 8004f9c:	4649      	mov	r1, r9
 8004f9e:	f7fb facf 	bl	8000540 <__aeabi_dmul>
 8004fa2:	a35d      	add	r3, pc, #372	; (adr r3, 8005118 <__ieee754_pow+0xa10>)
 8004fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa8:	4604      	mov	r4, r0
 8004faa:	460d      	mov	r5, r1
 8004fac:	f7fb fac8 	bl	8000540 <__aeabi_dmul>
 8004fb0:	a35b      	add	r3, pc, #364	; (adr r3, 8005120 <__ieee754_pow+0xa18>)
 8004fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb6:	f7fb f90b 	bl	80001d0 <__aeabi_dsub>
 8004fba:	4622      	mov	r2, r4
 8004fbc:	462b      	mov	r3, r5
 8004fbe:	f7fb fabf 	bl	8000540 <__aeabi_dmul>
 8004fc2:	a359      	add	r3, pc, #356	; (adr r3, 8005128 <__ieee754_pow+0xa20>)
 8004fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc8:	f7fb f904 	bl	80001d4 <__adddf3>
 8004fcc:	4622      	mov	r2, r4
 8004fce:	462b      	mov	r3, r5
 8004fd0:	f7fb fab6 	bl	8000540 <__aeabi_dmul>
 8004fd4:	a356      	add	r3, pc, #344	; (adr r3, 8005130 <__ieee754_pow+0xa28>)
 8004fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fda:	f7fb f8f9 	bl	80001d0 <__aeabi_dsub>
 8004fde:	4622      	mov	r2, r4
 8004fe0:	462b      	mov	r3, r5
 8004fe2:	f7fb faad 	bl	8000540 <__aeabi_dmul>
 8004fe6:	a354      	add	r3, pc, #336	; (adr r3, 8005138 <__ieee754_pow+0xa30>)
 8004fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fec:	f7fb f8f2 	bl	80001d4 <__adddf3>
 8004ff0:	4622      	mov	r2, r4
 8004ff2:	462b      	mov	r3, r5
 8004ff4:	f7fb faa4 	bl	8000540 <__aeabi_dmul>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	4640      	mov	r0, r8
 8004ffe:	4649      	mov	r1, r9
 8005000:	f7fb f8e6 	bl	80001d0 <__aeabi_dsub>
 8005004:	4604      	mov	r4, r0
 8005006:	460d      	mov	r5, r1
 8005008:	4602      	mov	r2, r0
 800500a:	460b      	mov	r3, r1
 800500c:	4640      	mov	r0, r8
 800500e:	4649      	mov	r1, r9
 8005010:	f7fb fa96 	bl	8000540 <__aeabi_dmul>
 8005014:	2200      	movs	r2, #0
 8005016:	ec41 0b19 	vmov	d9, r0, r1
 800501a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800501e:	4620      	mov	r0, r4
 8005020:	4629      	mov	r1, r5
 8005022:	f7fb f8d5 	bl	80001d0 <__aeabi_dsub>
 8005026:	4602      	mov	r2, r0
 8005028:	460b      	mov	r3, r1
 800502a:	ec51 0b19 	vmov	r0, r1, d9
 800502e:	f7fb fbb1 	bl	8000794 <__aeabi_ddiv>
 8005032:	4632      	mov	r2, r6
 8005034:	4604      	mov	r4, r0
 8005036:	460d      	mov	r5, r1
 8005038:	463b      	mov	r3, r7
 800503a:	4640      	mov	r0, r8
 800503c:	4649      	mov	r1, r9
 800503e:	f7fb fa7f 	bl	8000540 <__aeabi_dmul>
 8005042:	4632      	mov	r2, r6
 8005044:	463b      	mov	r3, r7
 8005046:	f7fb f8c5 	bl	80001d4 <__adddf3>
 800504a:	4602      	mov	r2, r0
 800504c:	460b      	mov	r3, r1
 800504e:	4620      	mov	r0, r4
 8005050:	4629      	mov	r1, r5
 8005052:	f7fb f8bd 	bl	80001d0 <__aeabi_dsub>
 8005056:	4642      	mov	r2, r8
 8005058:	464b      	mov	r3, r9
 800505a:	f7fb f8b9 	bl	80001d0 <__aeabi_dsub>
 800505e:	460b      	mov	r3, r1
 8005060:	4602      	mov	r2, r0
 8005062:	4939      	ldr	r1, [pc, #228]	; (8005148 <__ieee754_pow+0xa40>)
 8005064:	2000      	movs	r0, #0
 8005066:	f7fb f8b3 	bl	80001d0 <__aeabi_dsub>
 800506a:	ec41 0b10 	vmov	d0, r0, r1
 800506e:	ee10 3a90 	vmov	r3, s1
 8005072:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8005076:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800507a:	da2b      	bge.n	80050d4 <__ieee754_pow+0x9cc>
 800507c:	4650      	mov	r0, sl
 800507e:	f000 fa1b 	bl	80054b8 <scalbn>
 8005082:	ec51 0b10 	vmov	r0, r1, d0
 8005086:	ec53 2b18 	vmov	r2, r3, d8
 800508a:	f7ff bbee 	b.w	800486a <__ieee754_pow+0x162>
 800508e:	4b2f      	ldr	r3, [pc, #188]	; (800514c <__ieee754_pow+0xa44>)
 8005090:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005094:	429e      	cmp	r6, r3
 8005096:	f77f af0d 	ble.w	8004eb4 <__ieee754_pow+0x7ac>
 800509a:	4b2d      	ldr	r3, [pc, #180]	; (8005150 <__ieee754_pow+0xa48>)
 800509c:	440b      	add	r3, r1
 800509e:	4303      	orrs	r3, r0
 80050a0:	d009      	beq.n	80050b6 <__ieee754_pow+0x9ae>
 80050a2:	ec51 0b18 	vmov	r0, r1, d8
 80050a6:	2200      	movs	r2, #0
 80050a8:	2300      	movs	r3, #0
 80050aa:	f7fb fcbb 	bl	8000a24 <__aeabi_dcmplt>
 80050ae:	3800      	subs	r0, #0
 80050b0:	bf18      	it	ne
 80050b2:	2001      	movne	r0, #1
 80050b4:	e448      	b.n	8004948 <__ieee754_pow+0x240>
 80050b6:	4622      	mov	r2, r4
 80050b8:	462b      	mov	r3, r5
 80050ba:	f7fb f889 	bl	80001d0 <__aeabi_dsub>
 80050be:	4642      	mov	r2, r8
 80050c0:	464b      	mov	r3, r9
 80050c2:	f7fb fcc3 	bl	8000a4c <__aeabi_dcmpge>
 80050c6:	2800      	cmp	r0, #0
 80050c8:	f43f aef4 	beq.w	8004eb4 <__ieee754_pow+0x7ac>
 80050cc:	e7e9      	b.n	80050a2 <__ieee754_pow+0x99a>
 80050ce:	f04f 0a00 	mov.w	sl, #0
 80050d2:	e71a      	b.n	8004f0a <__ieee754_pow+0x802>
 80050d4:	ec51 0b10 	vmov	r0, r1, d0
 80050d8:	4619      	mov	r1, r3
 80050da:	e7d4      	b.n	8005086 <__ieee754_pow+0x97e>
 80050dc:	491a      	ldr	r1, [pc, #104]	; (8005148 <__ieee754_pow+0xa40>)
 80050de:	2000      	movs	r0, #0
 80050e0:	f7ff bb31 	b.w	8004746 <__ieee754_pow+0x3e>
 80050e4:	2000      	movs	r0, #0
 80050e6:	2100      	movs	r1, #0
 80050e8:	f7ff bb2d 	b.w	8004746 <__ieee754_pow+0x3e>
 80050ec:	4630      	mov	r0, r6
 80050ee:	4639      	mov	r1, r7
 80050f0:	f7ff bb29 	b.w	8004746 <__ieee754_pow+0x3e>
 80050f4:	9204      	str	r2, [sp, #16]
 80050f6:	f7ff bb7b 	b.w	80047f0 <__ieee754_pow+0xe8>
 80050fa:	2300      	movs	r3, #0
 80050fc:	f7ff bb65 	b.w	80047ca <__ieee754_pow+0xc2>
 8005100:	00000000 	.word	0x00000000
 8005104:	3fe62e43 	.word	0x3fe62e43
 8005108:	fefa39ef 	.word	0xfefa39ef
 800510c:	3fe62e42 	.word	0x3fe62e42
 8005110:	0ca86c39 	.word	0x0ca86c39
 8005114:	be205c61 	.word	0xbe205c61
 8005118:	72bea4d0 	.word	0x72bea4d0
 800511c:	3e663769 	.word	0x3e663769
 8005120:	c5d26bf1 	.word	0xc5d26bf1
 8005124:	3ebbbd41 	.word	0x3ebbbd41
 8005128:	af25de2c 	.word	0xaf25de2c
 800512c:	3f11566a 	.word	0x3f11566a
 8005130:	16bebd93 	.word	0x16bebd93
 8005134:	3f66c16c 	.word	0x3f66c16c
 8005138:	5555553e 	.word	0x5555553e
 800513c:	3fc55555 	.word	0x3fc55555
 8005140:	3fe00000 	.word	0x3fe00000
 8005144:	fff00000 	.word	0xfff00000
 8005148:	3ff00000 	.word	0x3ff00000
 800514c:	4090cbff 	.word	0x4090cbff
 8005150:	3f6f3400 	.word	0x3f6f3400
 8005154:	652b82fe 	.word	0x652b82fe
 8005158:	3c971547 	.word	0x3c971547
 800515c:	00000000 	.word	0x00000000

08005160 <atan>:
 8005160:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005164:	ec55 4b10 	vmov	r4, r5, d0
 8005168:	4bc3      	ldr	r3, [pc, #780]	; (8005478 <atan+0x318>)
 800516a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800516e:	429e      	cmp	r6, r3
 8005170:	46ab      	mov	fp, r5
 8005172:	dd18      	ble.n	80051a6 <atan+0x46>
 8005174:	4bc1      	ldr	r3, [pc, #772]	; (800547c <atan+0x31c>)
 8005176:	429e      	cmp	r6, r3
 8005178:	dc01      	bgt.n	800517e <atan+0x1e>
 800517a:	d109      	bne.n	8005190 <atan+0x30>
 800517c:	b144      	cbz	r4, 8005190 <atan+0x30>
 800517e:	4622      	mov	r2, r4
 8005180:	462b      	mov	r3, r5
 8005182:	4620      	mov	r0, r4
 8005184:	4629      	mov	r1, r5
 8005186:	f7fb f825 	bl	80001d4 <__adddf3>
 800518a:	4604      	mov	r4, r0
 800518c:	460d      	mov	r5, r1
 800518e:	e006      	b.n	800519e <atan+0x3e>
 8005190:	f1bb 0f00 	cmp.w	fp, #0
 8005194:	f300 8131 	bgt.w	80053fa <atan+0x29a>
 8005198:	a59b      	add	r5, pc, #620	; (adr r5, 8005408 <atan+0x2a8>)
 800519a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800519e:	ec45 4b10 	vmov	d0, r4, r5
 80051a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051a6:	4bb6      	ldr	r3, [pc, #728]	; (8005480 <atan+0x320>)
 80051a8:	429e      	cmp	r6, r3
 80051aa:	dc14      	bgt.n	80051d6 <atan+0x76>
 80051ac:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80051b0:	429e      	cmp	r6, r3
 80051b2:	dc0d      	bgt.n	80051d0 <atan+0x70>
 80051b4:	a396      	add	r3, pc, #600	; (adr r3, 8005410 <atan+0x2b0>)
 80051b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ba:	ee10 0a10 	vmov	r0, s0
 80051be:	4629      	mov	r1, r5
 80051c0:	f7fb f808 	bl	80001d4 <__adddf3>
 80051c4:	4baf      	ldr	r3, [pc, #700]	; (8005484 <atan+0x324>)
 80051c6:	2200      	movs	r2, #0
 80051c8:	f7fb fc4a 	bl	8000a60 <__aeabi_dcmpgt>
 80051cc:	2800      	cmp	r0, #0
 80051ce:	d1e6      	bne.n	800519e <atan+0x3e>
 80051d0:	f04f 3aff 	mov.w	sl, #4294967295
 80051d4:	e02b      	b.n	800522e <atan+0xce>
 80051d6:	f000 f963 	bl	80054a0 <fabs>
 80051da:	4bab      	ldr	r3, [pc, #684]	; (8005488 <atan+0x328>)
 80051dc:	429e      	cmp	r6, r3
 80051de:	ec55 4b10 	vmov	r4, r5, d0
 80051e2:	f300 80bf 	bgt.w	8005364 <atan+0x204>
 80051e6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80051ea:	429e      	cmp	r6, r3
 80051ec:	f300 80a0 	bgt.w	8005330 <atan+0x1d0>
 80051f0:	ee10 2a10 	vmov	r2, s0
 80051f4:	ee10 0a10 	vmov	r0, s0
 80051f8:	462b      	mov	r3, r5
 80051fa:	4629      	mov	r1, r5
 80051fc:	f7fa ffea 	bl	80001d4 <__adddf3>
 8005200:	4ba0      	ldr	r3, [pc, #640]	; (8005484 <atan+0x324>)
 8005202:	2200      	movs	r2, #0
 8005204:	f7fa ffe4 	bl	80001d0 <__aeabi_dsub>
 8005208:	2200      	movs	r2, #0
 800520a:	4606      	mov	r6, r0
 800520c:	460f      	mov	r7, r1
 800520e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005212:	4620      	mov	r0, r4
 8005214:	4629      	mov	r1, r5
 8005216:	f7fa ffdd 	bl	80001d4 <__adddf3>
 800521a:	4602      	mov	r2, r0
 800521c:	460b      	mov	r3, r1
 800521e:	4630      	mov	r0, r6
 8005220:	4639      	mov	r1, r7
 8005222:	f7fb fab7 	bl	8000794 <__aeabi_ddiv>
 8005226:	f04f 0a00 	mov.w	sl, #0
 800522a:	4604      	mov	r4, r0
 800522c:	460d      	mov	r5, r1
 800522e:	4622      	mov	r2, r4
 8005230:	462b      	mov	r3, r5
 8005232:	4620      	mov	r0, r4
 8005234:	4629      	mov	r1, r5
 8005236:	f7fb f983 	bl	8000540 <__aeabi_dmul>
 800523a:	4602      	mov	r2, r0
 800523c:	460b      	mov	r3, r1
 800523e:	4680      	mov	r8, r0
 8005240:	4689      	mov	r9, r1
 8005242:	f7fb f97d 	bl	8000540 <__aeabi_dmul>
 8005246:	a374      	add	r3, pc, #464	; (adr r3, 8005418 <atan+0x2b8>)
 8005248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524c:	4606      	mov	r6, r0
 800524e:	460f      	mov	r7, r1
 8005250:	f7fb f976 	bl	8000540 <__aeabi_dmul>
 8005254:	a372      	add	r3, pc, #456	; (adr r3, 8005420 <atan+0x2c0>)
 8005256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800525a:	f7fa ffbb 	bl	80001d4 <__adddf3>
 800525e:	4632      	mov	r2, r6
 8005260:	463b      	mov	r3, r7
 8005262:	f7fb f96d 	bl	8000540 <__aeabi_dmul>
 8005266:	a370      	add	r3, pc, #448	; (adr r3, 8005428 <atan+0x2c8>)
 8005268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526c:	f7fa ffb2 	bl	80001d4 <__adddf3>
 8005270:	4632      	mov	r2, r6
 8005272:	463b      	mov	r3, r7
 8005274:	f7fb f964 	bl	8000540 <__aeabi_dmul>
 8005278:	a36d      	add	r3, pc, #436	; (adr r3, 8005430 <atan+0x2d0>)
 800527a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527e:	f7fa ffa9 	bl	80001d4 <__adddf3>
 8005282:	4632      	mov	r2, r6
 8005284:	463b      	mov	r3, r7
 8005286:	f7fb f95b 	bl	8000540 <__aeabi_dmul>
 800528a:	a36b      	add	r3, pc, #428	; (adr r3, 8005438 <atan+0x2d8>)
 800528c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005290:	f7fa ffa0 	bl	80001d4 <__adddf3>
 8005294:	4632      	mov	r2, r6
 8005296:	463b      	mov	r3, r7
 8005298:	f7fb f952 	bl	8000540 <__aeabi_dmul>
 800529c:	a368      	add	r3, pc, #416	; (adr r3, 8005440 <atan+0x2e0>)
 800529e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a2:	f7fa ff97 	bl	80001d4 <__adddf3>
 80052a6:	4642      	mov	r2, r8
 80052a8:	464b      	mov	r3, r9
 80052aa:	f7fb f949 	bl	8000540 <__aeabi_dmul>
 80052ae:	a366      	add	r3, pc, #408	; (adr r3, 8005448 <atan+0x2e8>)
 80052b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b4:	4680      	mov	r8, r0
 80052b6:	4689      	mov	r9, r1
 80052b8:	4630      	mov	r0, r6
 80052ba:	4639      	mov	r1, r7
 80052bc:	f7fb f940 	bl	8000540 <__aeabi_dmul>
 80052c0:	a363      	add	r3, pc, #396	; (adr r3, 8005450 <atan+0x2f0>)
 80052c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c6:	f7fa ff83 	bl	80001d0 <__aeabi_dsub>
 80052ca:	4632      	mov	r2, r6
 80052cc:	463b      	mov	r3, r7
 80052ce:	f7fb f937 	bl	8000540 <__aeabi_dmul>
 80052d2:	a361      	add	r3, pc, #388	; (adr r3, 8005458 <atan+0x2f8>)
 80052d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d8:	f7fa ff7a 	bl	80001d0 <__aeabi_dsub>
 80052dc:	4632      	mov	r2, r6
 80052de:	463b      	mov	r3, r7
 80052e0:	f7fb f92e 	bl	8000540 <__aeabi_dmul>
 80052e4:	a35e      	add	r3, pc, #376	; (adr r3, 8005460 <atan+0x300>)
 80052e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ea:	f7fa ff71 	bl	80001d0 <__aeabi_dsub>
 80052ee:	4632      	mov	r2, r6
 80052f0:	463b      	mov	r3, r7
 80052f2:	f7fb f925 	bl	8000540 <__aeabi_dmul>
 80052f6:	a35c      	add	r3, pc, #368	; (adr r3, 8005468 <atan+0x308>)
 80052f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fc:	f7fa ff68 	bl	80001d0 <__aeabi_dsub>
 8005300:	4632      	mov	r2, r6
 8005302:	463b      	mov	r3, r7
 8005304:	f7fb f91c 	bl	8000540 <__aeabi_dmul>
 8005308:	4602      	mov	r2, r0
 800530a:	460b      	mov	r3, r1
 800530c:	4640      	mov	r0, r8
 800530e:	4649      	mov	r1, r9
 8005310:	f7fa ff60 	bl	80001d4 <__adddf3>
 8005314:	4622      	mov	r2, r4
 8005316:	462b      	mov	r3, r5
 8005318:	f7fb f912 	bl	8000540 <__aeabi_dmul>
 800531c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005320:	4602      	mov	r2, r0
 8005322:	460b      	mov	r3, r1
 8005324:	d14b      	bne.n	80053be <atan+0x25e>
 8005326:	4620      	mov	r0, r4
 8005328:	4629      	mov	r1, r5
 800532a:	f7fa ff51 	bl	80001d0 <__aeabi_dsub>
 800532e:	e72c      	b.n	800518a <atan+0x2a>
 8005330:	ee10 0a10 	vmov	r0, s0
 8005334:	4b53      	ldr	r3, [pc, #332]	; (8005484 <atan+0x324>)
 8005336:	2200      	movs	r2, #0
 8005338:	4629      	mov	r1, r5
 800533a:	f7fa ff49 	bl	80001d0 <__aeabi_dsub>
 800533e:	4b51      	ldr	r3, [pc, #324]	; (8005484 <atan+0x324>)
 8005340:	4606      	mov	r6, r0
 8005342:	460f      	mov	r7, r1
 8005344:	2200      	movs	r2, #0
 8005346:	4620      	mov	r0, r4
 8005348:	4629      	mov	r1, r5
 800534a:	f7fa ff43 	bl	80001d4 <__adddf3>
 800534e:	4602      	mov	r2, r0
 8005350:	460b      	mov	r3, r1
 8005352:	4630      	mov	r0, r6
 8005354:	4639      	mov	r1, r7
 8005356:	f7fb fa1d 	bl	8000794 <__aeabi_ddiv>
 800535a:	f04f 0a01 	mov.w	sl, #1
 800535e:	4604      	mov	r4, r0
 8005360:	460d      	mov	r5, r1
 8005362:	e764      	b.n	800522e <atan+0xce>
 8005364:	4b49      	ldr	r3, [pc, #292]	; (800548c <atan+0x32c>)
 8005366:	429e      	cmp	r6, r3
 8005368:	da1d      	bge.n	80053a6 <atan+0x246>
 800536a:	ee10 0a10 	vmov	r0, s0
 800536e:	4b48      	ldr	r3, [pc, #288]	; (8005490 <atan+0x330>)
 8005370:	2200      	movs	r2, #0
 8005372:	4629      	mov	r1, r5
 8005374:	f7fa ff2c 	bl	80001d0 <__aeabi_dsub>
 8005378:	4b45      	ldr	r3, [pc, #276]	; (8005490 <atan+0x330>)
 800537a:	4606      	mov	r6, r0
 800537c:	460f      	mov	r7, r1
 800537e:	2200      	movs	r2, #0
 8005380:	4620      	mov	r0, r4
 8005382:	4629      	mov	r1, r5
 8005384:	f7fb f8dc 	bl	8000540 <__aeabi_dmul>
 8005388:	4b3e      	ldr	r3, [pc, #248]	; (8005484 <atan+0x324>)
 800538a:	2200      	movs	r2, #0
 800538c:	f7fa ff22 	bl	80001d4 <__adddf3>
 8005390:	4602      	mov	r2, r0
 8005392:	460b      	mov	r3, r1
 8005394:	4630      	mov	r0, r6
 8005396:	4639      	mov	r1, r7
 8005398:	f7fb f9fc 	bl	8000794 <__aeabi_ddiv>
 800539c:	f04f 0a02 	mov.w	sl, #2
 80053a0:	4604      	mov	r4, r0
 80053a2:	460d      	mov	r5, r1
 80053a4:	e743      	b.n	800522e <atan+0xce>
 80053a6:	462b      	mov	r3, r5
 80053a8:	ee10 2a10 	vmov	r2, s0
 80053ac:	4939      	ldr	r1, [pc, #228]	; (8005494 <atan+0x334>)
 80053ae:	2000      	movs	r0, #0
 80053b0:	f7fb f9f0 	bl	8000794 <__aeabi_ddiv>
 80053b4:	f04f 0a03 	mov.w	sl, #3
 80053b8:	4604      	mov	r4, r0
 80053ba:	460d      	mov	r5, r1
 80053bc:	e737      	b.n	800522e <atan+0xce>
 80053be:	4b36      	ldr	r3, [pc, #216]	; (8005498 <atan+0x338>)
 80053c0:	4e36      	ldr	r6, [pc, #216]	; (800549c <atan+0x33c>)
 80053c2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80053c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ca:	f7fa ff01 	bl	80001d0 <__aeabi_dsub>
 80053ce:	4622      	mov	r2, r4
 80053d0:	462b      	mov	r3, r5
 80053d2:	f7fa fefd 	bl	80001d0 <__aeabi_dsub>
 80053d6:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80053da:	4602      	mov	r2, r0
 80053dc:	460b      	mov	r3, r1
 80053de:	e9d6 0100 	ldrd	r0, r1, [r6]
 80053e2:	f7fa fef5 	bl	80001d0 <__aeabi_dsub>
 80053e6:	f1bb 0f00 	cmp.w	fp, #0
 80053ea:	4604      	mov	r4, r0
 80053ec:	460d      	mov	r5, r1
 80053ee:	f6bf aed6 	bge.w	800519e <atan+0x3e>
 80053f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80053f6:	461d      	mov	r5, r3
 80053f8:	e6d1      	b.n	800519e <atan+0x3e>
 80053fa:	a51d      	add	r5, pc, #116	; (adr r5, 8005470 <atan+0x310>)
 80053fc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005400:	e6cd      	b.n	800519e <atan+0x3e>
 8005402:	bf00      	nop
 8005404:	f3af 8000 	nop.w
 8005408:	54442d18 	.word	0x54442d18
 800540c:	bff921fb 	.word	0xbff921fb
 8005410:	8800759c 	.word	0x8800759c
 8005414:	7e37e43c 	.word	0x7e37e43c
 8005418:	e322da11 	.word	0xe322da11
 800541c:	3f90ad3a 	.word	0x3f90ad3a
 8005420:	24760deb 	.word	0x24760deb
 8005424:	3fa97b4b 	.word	0x3fa97b4b
 8005428:	a0d03d51 	.word	0xa0d03d51
 800542c:	3fb10d66 	.word	0x3fb10d66
 8005430:	c54c206e 	.word	0xc54c206e
 8005434:	3fb745cd 	.word	0x3fb745cd
 8005438:	920083ff 	.word	0x920083ff
 800543c:	3fc24924 	.word	0x3fc24924
 8005440:	5555550d 	.word	0x5555550d
 8005444:	3fd55555 	.word	0x3fd55555
 8005448:	2c6a6c2f 	.word	0x2c6a6c2f
 800544c:	bfa2b444 	.word	0xbfa2b444
 8005450:	52defd9a 	.word	0x52defd9a
 8005454:	3fadde2d 	.word	0x3fadde2d
 8005458:	af749a6d 	.word	0xaf749a6d
 800545c:	3fb3b0f2 	.word	0x3fb3b0f2
 8005460:	fe231671 	.word	0xfe231671
 8005464:	3fbc71c6 	.word	0x3fbc71c6
 8005468:	9998ebc4 	.word	0x9998ebc4
 800546c:	3fc99999 	.word	0x3fc99999
 8005470:	54442d18 	.word	0x54442d18
 8005474:	3ff921fb 	.word	0x3ff921fb
 8005478:	440fffff 	.word	0x440fffff
 800547c:	7ff00000 	.word	0x7ff00000
 8005480:	3fdbffff 	.word	0x3fdbffff
 8005484:	3ff00000 	.word	0x3ff00000
 8005488:	3ff2ffff 	.word	0x3ff2ffff
 800548c:	40038000 	.word	0x40038000
 8005490:	3ff80000 	.word	0x3ff80000
 8005494:	bff00000 	.word	0xbff00000
 8005498:	080056c8 	.word	0x080056c8
 800549c:	080056a8 	.word	0x080056a8

080054a0 <fabs>:
 80054a0:	ec51 0b10 	vmov	r0, r1, d0
 80054a4:	ee10 2a10 	vmov	r2, s0
 80054a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80054ac:	ec43 2b10 	vmov	d0, r2, r3
 80054b0:	4770      	bx	lr
 80054b2:	0000      	movs	r0, r0
 80054b4:	0000      	movs	r0, r0
	...

080054b8 <scalbn>:
 80054b8:	b570      	push	{r4, r5, r6, lr}
 80054ba:	ec55 4b10 	vmov	r4, r5, d0
 80054be:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80054c2:	4606      	mov	r6, r0
 80054c4:	462b      	mov	r3, r5
 80054c6:	b999      	cbnz	r1, 80054f0 <scalbn+0x38>
 80054c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80054cc:	4323      	orrs	r3, r4
 80054ce:	d03f      	beq.n	8005550 <scalbn+0x98>
 80054d0:	4b35      	ldr	r3, [pc, #212]	; (80055a8 <scalbn+0xf0>)
 80054d2:	4629      	mov	r1, r5
 80054d4:	ee10 0a10 	vmov	r0, s0
 80054d8:	2200      	movs	r2, #0
 80054da:	f7fb f831 	bl	8000540 <__aeabi_dmul>
 80054de:	4b33      	ldr	r3, [pc, #204]	; (80055ac <scalbn+0xf4>)
 80054e0:	429e      	cmp	r6, r3
 80054e2:	4604      	mov	r4, r0
 80054e4:	460d      	mov	r5, r1
 80054e6:	da10      	bge.n	800550a <scalbn+0x52>
 80054e8:	a327      	add	r3, pc, #156	; (adr r3, 8005588 <scalbn+0xd0>)
 80054ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ee:	e01f      	b.n	8005530 <scalbn+0x78>
 80054f0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80054f4:	4291      	cmp	r1, r2
 80054f6:	d10c      	bne.n	8005512 <scalbn+0x5a>
 80054f8:	ee10 2a10 	vmov	r2, s0
 80054fc:	4620      	mov	r0, r4
 80054fe:	4629      	mov	r1, r5
 8005500:	f7fa fe68 	bl	80001d4 <__adddf3>
 8005504:	4604      	mov	r4, r0
 8005506:	460d      	mov	r5, r1
 8005508:	e022      	b.n	8005550 <scalbn+0x98>
 800550a:	460b      	mov	r3, r1
 800550c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005510:	3936      	subs	r1, #54	; 0x36
 8005512:	f24c 3250 	movw	r2, #50000	; 0xc350
 8005516:	4296      	cmp	r6, r2
 8005518:	dd0d      	ble.n	8005536 <scalbn+0x7e>
 800551a:	2d00      	cmp	r5, #0
 800551c:	a11c      	add	r1, pc, #112	; (adr r1, 8005590 <scalbn+0xd8>)
 800551e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005522:	da02      	bge.n	800552a <scalbn+0x72>
 8005524:	a11c      	add	r1, pc, #112	; (adr r1, 8005598 <scalbn+0xe0>)
 8005526:	e9d1 0100 	ldrd	r0, r1, [r1]
 800552a:	a319      	add	r3, pc, #100	; (adr r3, 8005590 <scalbn+0xd8>)
 800552c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005530:	f7fb f806 	bl	8000540 <__aeabi_dmul>
 8005534:	e7e6      	b.n	8005504 <scalbn+0x4c>
 8005536:	1872      	adds	r2, r6, r1
 8005538:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800553c:	428a      	cmp	r2, r1
 800553e:	dcec      	bgt.n	800551a <scalbn+0x62>
 8005540:	2a00      	cmp	r2, #0
 8005542:	dd08      	ble.n	8005556 <scalbn+0x9e>
 8005544:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005548:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800554c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005550:	ec45 4b10 	vmov	d0, r4, r5
 8005554:	bd70      	pop	{r4, r5, r6, pc}
 8005556:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800555a:	da08      	bge.n	800556e <scalbn+0xb6>
 800555c:	2d00      	cmp	r5, #0
 800555e:	a10a      	add	r1, pc, #40	; (adr r1, 8005588 <scalbn+0xd0>)
 8005560:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005564:	dac0      	bge.n	80054e8 <scalbn+0x30>
 8005566:	a10e      	add	r1, pc, #56	; (adr r1, 80055a0 <scalbn+0xe8>)
 8005568:	e9d1 0100 	ldrd	r0, r1, [r1]
 800556c:	e7bc      	b.n	80054e8 <scalbn+0x30>
 800556e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005572:	3236      	adds	r2, #54	; 0x36
 8005574:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005578:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800557c:	4620      	mov	r0, r4
 800557e:	4b0c      	ldr	r3, [pc, #48]	; (80055b0 <scalbn+0xf8>)
 8005580:	2200      	movs	r2, #0
 8005582:	e7d5      	b.n	8005530 <scalbn+0x78>
 8005584:	f3af 8000 	nop.w
 8005588:	c2f8f359 	.word	0xc2f8f359
 800558c:	01a56e1f 	.word	0x01a56e1f
 8005590:	8800759c 	.word	0x8800759c
 8005594:	7e37e43c 	.word	0x7e37e43c
 8005598:	8800759c 	.word	0x8800759c
 800559c:	fe37e43c 	.word	0xfe37e43c
 80055a0:	c2f8f359 	.word	0xc2f8f359
 80055a4:	81a56e1f 	.word	0x81a56e1f
 80055a8:	43500000 	.word	0x43500000
 80055ac:	ffff3cb0 	.word	0xffff3cb0
 80055b0:	3c900000 	.word	0x3c900000

080055b4 <with_errno>:
 80055b4:	b570      	push	{r4, r5, r6, lr}
 80055b6:	4604      	mov	r4, r0
 80055b8:	460d      	mov	r5, r1
 80055ba:	4616      	mov	r6, r2
 80055bc:	f7fe fe2c 	bl	8004218 <__errno>
 80055c0:	4629      	mov	r1, r5
 80055c2:	6006      	str	r6, [r0, #0]
 80055c4:	4620      	mov	r0, r4
 80055c6:	bd70      	pop	{r4, r5, r6, pc}

080055c8 <xflow>:
 80055c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055ca:	4614      	mov	r4, r2
 80055cc:	461d      	mov	r5, r3
 80055ce:	b108      	cbz	r0, 80055d4 <xflow+0xc>
 80055d0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80055d4:	e9cd 2300 	strd	r2, r3, [sp]
 80055d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80055dc:	4620      	mov	r0, r4
 80055de:	4629      	mov	r1, r5
 80055e0:	f7fa ffae 	bl	8000540 <__aeabi_dmul>
 80055e4:	2222      	movs	r2, #34	; 0x22
 80055e6:	b003      	add	sp, #12
 80055e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80055ec:	f7ff bfe2 	b.w	80055b4 <with_errno>

080055f0 <__math_uflow>:
 80055f0:	b508      	push	{r3, lr}
 80055f2:	2200      	movs	r2, #0
 80055f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80055f8:	f7ff ffe6 	bl	80055c8 <xflow>
 80055fc:	ec41 0b10 	vmov	d0, r0, r1
 8005600:	bd08      	pop	{r3, pc}

08005602 <__math_oflow>:
 8005602:	b508      	push	{r3, lr}
 8005604:	2200      	movs	r2, #0
 8005606:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800560a:	f7ff ffdd 	bl	80055c8 <xflow>
 800560e:	ec41 0b10 	vmov	d0, r0, r1
 8005612:	bd08      	pop	{r3, pc}

08005614 <_init>:
 8005614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005616:	bf00      	nop
 8005618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800561a:	bc08      	pop	{r3}
 800561c:	469e      	mov	lr, r3
 800561e:	4770      	bx	lr

08005620 <_fini>:
 8005620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005622:	bf00      	nop
 8005624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005626:	bc08      	pop	{r3}
 8005628:	469e      	mov	lr, r3
 800562a:	4770      	bx	lr
